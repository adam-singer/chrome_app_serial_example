// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.ListIterator = {'': function ListIterator(i, list) {
  this.i = i;
  this.list = list;
},
 'super': 'Object',
 get$hasNext: function() {
  return $.lt(this.i, this.list.length);
},
 next$0: function() {
  var value, t1;
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$("No more elements"));
  value = this.list[this.i];
  t1 = this.i;
  if (typeof t1 !== 'number')
    return this.next$0$bailout0(1, t1, value);
  this.i = t1 + 1;
  return value;
},
 next$0$bailout0: function(state0, t1, value) {
  this.i = $.add(t1, 1);
  return value;
}
};

$$.JSInvocationMirror = {'': function JSInvocationMirror(memberName, _internalName, _kind, _liblib0$_arguments, _namedArgumentNames, _namedIndices) {
  this.memberName = memberName;
  this._internalName = _internalName;
  this._kind = _kind;
  this._liblib0$_arguments = _liblib0$_arguments;
  this._namedArgumentNames = _namedArgumentNames;
  this._namedIndices = _namedIndices;
},
 'super': 'Object',
 get$memberName: function() { return this.memberName; },
 get$isGetter: function() {
  return $.eq(this._kind, 1);
},
 get$isSetter: function() {
  return $.eq(this._kind, 2);
},
 get$isAccessor: function() {
  return !$.eqB(this._kind, 0);
},
 get$positionalArguments: function() {
  var list, t1, t3, t4, t5, argumentCount, index;
  if (this.get$isGetter() === true)
    return;
  list = [];
  t1 = this._liblib0$_arguments;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.get$positionalArguments$bailout(1, t1, list);
  t3 = $.getInterceptor$JSStringJSArray(t1);
  t4 = t1.length;
  t5 = this._namedArgumentNames;
  t5 = $.getInterceptor$JSStringJSArray(t5).get$length(t5);
  if (typeof t5 !== 'number')
    throw $.iae(t5);
  argumentCount = t4 - t5;
  for (index = 0; index < argumentCount; ++index) {
    if (index >= t1.length)
      throw $.ioore(index);
    list.push(t1[index]);
  }
  return list;
},
 get$positionalArguments$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      list = env1;
      t1 = env0;
      break;
    case 2:
      t3 = env3;
      argumentCount = env2;
      list = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      if (this.get$isGetter() === true)
        return;
      list = [];
      t1 = this._liblib0$_arguments;
    case 1:
      state0 = 0;
      t3 = $.getInterceptor$JSStringJSArray(t1);
      t4 = t3.get$length(t1);
      t5 = this._namedArgumentNames;
      argumentCount = $.sub(t4, $.getInterceptor$JSStringJSArray(t5).get$length(t5));
    case 2:
      var list, t1, t3, t4, t5, argumentCount, index;
      state0 = 0;
      for (index = 0; $.ltB(index, argumentCount); ++index)
        list.push(t3.operator$index$1(t1, index));
      return list;
  }
},
 get$namedArguments: function() {
  var map, t2, t4, namedArgumentCount, t5, t7, t8, namedArgumentsStartIndex, t1, i, t3;
  if (this.get$isAccessor() === true)
    return;
  map = $.makeLiteralMap([]);
  if (typeof map !== 'object' || map === null || (map.constructor !== Array || !!map.immutable$list) && !map.is$JavaScriptIndexingBehavior())
    return this.get$namedArguments$bailout(1, map);
  t2 = this._namedArgumentNames;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
    return this.get$namedArguments$bailout(2, t2, map);
  t4 = $.getInterceptor$JSStringJSArray(t2);
  namedArgumentCount = t2.length;
  t5 = this._liblib0$_arguments;
  if (typeof t5 !== 'string' && (typeof t5 !== 'object' || t5 === null || t5.constructor !== Array && !t5.is$JavaScriptIndexingBehavior()))
    return this.get$namedArguments$bailout(4, t2, t5, map, t4, namedArgumentCount);
  t7 = $.getInterceptor$JSStringJSArray(t5);
  t8 = t5.length;
  namedArgumentsStartIndex = t8 - namedArgumentCount;
  for (t1 = map.length, i = 0; i < namedArgumentCount; ++i) {
    t3 = t2[i];
    t4 = namedArgumentsStartIndex + i;
    if (t4 < 0 || t4 >= t8)
      throw $.ioore(t4);
    t4 = t5[t4];
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1)
      throw $.ioore(t3);
    map[t3] = t4;
  }
  return map;
},
 get$namedArguments$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6) {
  switch (state0) {
    case 1:
      map = env0;
      break;
    case 2:
      map = env1;
      t2 = env0;
      break;
    case 3:
      namedArgumentCount = env3;
      t4 = env2;
      map = env1;
      t2 = env0;
      break;
    case 4:
      namedArgumentCount = env4;
      t4 = env3;
      map = env2;
      t6 = env1;
      t2 = env0;
      break;
    case 5:
      namedArgumentCount = env6;
      t4 = env5;
      map = env4;
      t2 = env3;
      namedArgumentsStartIndex = env2;
      t6 = env1;
      t8 = env0;
      break;
  }
  switch (state0) {
    case 0:
      if (this.get$isAccessor() === true)
        return;
      map = $.makeLiteralMap([]);
    case 1:
      state0 = 0;
      t2 = this._namedArgumentNames;
    case 2:
      state0 = 0;
      t4 = $.getInterceptor$JSStringJSArray(t2);
      namedArgumentCount = t4.get$length(t2);
    case 3:
      state0 = 0;
      t6 = this._liblib0$_arguments;
    case 4:
      state0 = 0;
      t8 = $.getInterceptor$JSStringJSArray(t6);
      namedArgumentsStartIndex = $.sub(t8.get$length(t6), namedArgumentCount);
    case 5:
      var map, t2, t4, namedArgumentCount, t6, t8, namedArgumentsStartIndex, i;
      state0 = 0;
      for (i = 0; $.ltB(i, namedArgumentCount); ++i)
        $.indexSet(map, t4.operator$index$1(t2, i), t8.operator$index$1(t6, $.add(namedArgumentsStartIndex, i)));
      return map;
  }
}
};

$$.StackTrace = {'': function StackTrace(stack) {
  this.stack = stack;
},
 'super': 'Object',
 toString$0: function() {
  var t1 = this.stack;
  return !(t1 == null) ? t1 : "";
}
};

$$.Closure = {'': function Closure() {
},
 'super': 'Object',
 toString$0: function() {
  return "Closure";
},
 is$Function: true
};

$$.Null = {'': function Null() {
},
 'super': 'Object'
};

$$.TypeImpl = {'': function TypeImpl(typeName) {
  this.typeName = typeName;
},
 'super': 'Object',
 toString$0: function() {
  return this.typeName;
},
 get$hashCode: function() {
  var t1 = this.typeName;
  return $.getInterceptor(t1).get$hashCode(t1);
},
 operator$eq$1: function(other) {
  if (!(typeof other === 'object' && other !== null && !!other.is$TypeImpl))
    return false;
  return $.eq(this.typeName, other.typeName);
},
 is$TypeImpl: true
};

$$.ConstantMap = {'': function ConstantMap(length, _jsObject, _liblib0$_keys) {
  this.length = length;
  this._jsObject = _jsObject;
  this._liblib0$_keys = _liblib0$_keys;
},
 'super': 'Object',
 get$length: function() { return this.length; },
 get$_liblib0$_keys: function() { return this._liblib0$_keys; },
 containsKey$1: function(key) {
  if (typeof key !== 'string')
    return this.containsKey$1$bailout(1, key);
  if (key === "__proto__")
    return false;
  return this._jsObject.hasOwnProperty(key);
},
 containsKey$1$bailout: function(state0, key) {
  if ($.eqB(key, "__proto__"))
    return false;
  return this._jsObject.hasOwnProperty(key);
},
 operator$index$1: function(key) {
  if (this.containsKey$1(key) !== true)
    return;
  return this._jsObject[key];
},
 forEach$1: function(f) {
  var t1 = this._liblib0$_keys;
  $.getInterceptor$JSArray(t1).forEach$1(t1, new $.ConstantMap_forEach_anon(this, f));
},
 get$keys: function() {
  return this._liblib0$_keys;
},
 get$values: function() {
  var result, t1;
  result = [];
  t1 = this._liblib0$_keys;
  $.getInterceptor$JSArray(t1).forEach$1(t1, new $.ConstantMap_values_anon(this, result));
  return result;
},
 get$isEmpty: function() {
  return $.eq(this.length, 0);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _throwUnmodifiable$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot modify unmodifiable Map"));
},
 operator$indexSet$2: function(key, val) {
  return this._throwUnmodifiable$0();
},
 remove$1: function(key) {
  return this._throwUnmodifiable$0();
},
 clear$0: function() {
  return this._throwUnmodifiable$0();
},
 is$Map: function() { return true; }
};

$$.MetaInfo = {'': function MetaInfo(_tag, _tags, _set) {
  this._tag = _tag;
  this._tags = _tags;
  this._set = _set;
},
 'super': 'Object',
 get$_tag: function() { return this._tag; },
 get$_set: function() { return this._set; }
};

$$.JSSyntaxRegExp = {'': function JSSyntaxRegExp(_liblib0$_pattern, _multiLine, _ignoreCase) {
  this._liblib0$_pattern = _liblib0$_pattern;
  this._multiLine = _multiLine;
  this._ignoreCase = _ignoreCase;
},
 'super': 'Object',
 firstMatch$1: function(str) {
  var m, matchStart, t1, matchEnd;
  m = $.regExpExec(this, $.checkString(str));
  if (m == null)
    return;
  matchStart = m.index;
  t1 = $.getInterceptor$JSStringJSArray(m).operator$index$1(m, 0);
  t1 = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  matchEnd = matchStart + t1;
  return $._MatchImplementation$(this.get$pattern(), str, matchStart, matchEnd, m);
},
 hasMatch$1: function(str) {
  return $.regExpTest(this, $.checkString(str));
},
 allMatches$1: function(str) {
  $.checkString(str);
  return $._AllMatchesIterable$(this, str);
},
 get$pattern: function() {
  return this._liblib0$_pattern;
},
 get$multiLine: function() {
  return this._multiLine;
},
 get$ignoreCase: function() {
  return this._ignoreCase;
},
 is$JSSyntaxRegExp: true,
 is$RegExp: true
};

$$._MatchImplementation = {'': function _MatchImplementation(pattern, str, start, end, _groups) {
  this.pattern = pattern;
  this.str = str;
  this.start = start;
  this.end = end;
  this._groups = _groups;
},
 'super': 'Object',
 get$pattern: function() { return this.pattern; },
 operator$index$1: function(index) {
  var t1 = this._groups;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.operator$index$1$bailout2(1, index, t1);
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  return t1[index];
},
 operator$index$1$bailout2: function(state0, index, t1) {
  return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index);
}
};

$$._AllMatchesIterable = {'': function _AllMatchesIterable(_re, _str) {
  this._re = _re;
  this._str = _str;
},
 'super': 'Object',
 iterator$0: function() {
  return $._AllMatchesIterator$(this._re, this._str);
}
};

$$._AllMatchesIterator = {'': function _AllMatchesIterator(_re, _str, _liblib0$_next, _done) {
  this._re = _re;
  this._str = _str;
  this._liblib0$_next = _liblib0$_next;
  this._done = _done;
},
 'super': 'Object',
 get$_liblib0$_next: function() { return this._liblib0$_next; },
 set$_liblib0$_next: function(v) { this._liblib0$_next = v; },
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$("No more elements"));
  var next = this._liblib0$_next;
  this._liblib0$_next = null;
  return next;
},
 get$hasNext: function() {
  if (this._done)
    return false;
  else if (!(this._liblib0$_next == null))
    return true;
  this._liblib0$_next = this._re.firstMatch$1(this._str);
  if (this._liblib0$_next == null) {
    this._done = true;
    return false;
  } else
    return true;
}
};

$$.StringMatch = {'': function StringMatch(start, str, pattern) {
  this.start = start;
  this.str = str;
  this.pattern = pattern;
},
 'super': 'Object',
 get$pattern: function() { return this.pattern; },
 operator$index$1: function(g) {
  return this.group$1(g);
},
 group$1: function(group_) {
  if (!$.eqB(group_, 0))
    throw $.$$throw($.RangeError$value(group_));
  return this.pattern;
}
};

$$._DateImpl = {'': function _DateImpl(millisecondsSinceEpoch, isUtc) {
  this.millisecondsSinceEpoch = millisecondsSinceEpoch;
  this.isUtc = isUtc;
},
 'super': 'Object',
 get$millisecondsSinceEpoch: function() { return this.millisecondsSinceEpoch; },
 operator$eq$1: function(other) {
  if (!(typeof other === 'object' && other !== null && !!other.is$Date))
    return false;
  return $.eq(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$lt$1: function(other) {
  return $.lt(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$le$1: function(other) {
  return $.le(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$gt$1: function(other) {
  return $.gt(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$ge$1: function(other) {
  return $.ge(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 get$hashCode: function() {
  return this.millisecondsSinceEpoch;
},
 toString$0: function() {
  var t1, t2, t3, y, m, d, h, min, sec, ms;
  t1 = new $._DateImpl_toString_fourDigits();
  t2 = new $._DateImpl_toString_threeDigits();
  t3 = new $._DateImpl_toString_twoDigits();
  y = t1.call$1(this.get$year());
  m = t3.call$1(this.get$month());
  d = t3.call$1(this.get$day());
  h = t3.call$1(this.get$hour());
  min = t3.call$1(this.get$minute());
  sec = t3.call$1(this.get$second());
  ms = t2.call$1(this.get$millisecond());
  if (this.isUtc === true)
    return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms) + "Z";
  else
    return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms);
},
 add$1: function(duration) {
  var ms, t2;
  ms = this.millisecondsSinceEpoch;
  if (typeof ms !== 'number')
    return this.add$1$bailout2(1, duration, ms);
  t2 = duration.get$inMilliseconds();
  if (typeof t2 !== 'number')
    return this.add$1$bailout2(2, ms, t2);
  return $.Date_Date$fromMillisecondsSinceEpoch(ms + t2, this.isUtc);
},
 add$1$bailout2: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      ms = env1;
      duration = env0;
      break;
    case 2:
      t2 = env1;
      ms = env0;
      break;
  }
  switch (state0) {
    case 0:
      ms = this.millisecondsSinceEpoch;
    case 1:
      state0 = 0;
      t2 = duration.get$inMilliseconds();
    case 2:
      var ms, duration, t2;
      state0 = 0;
      return $.Date_Date$fromMillisecondsSinceEpoch($.add(ms, t2), this.isUtc);
  }
},
 get$year: function() {
  return $.Primitives_getYear(this);
},
 get$month: function() {
  return $.Primitives_getMonth(this);
},
 get$day: function() {
  return $.Primitives_getDay(this);
},
 get$hour: function() {
  return $.Primitives_getHours(this);
},
 get$minute: function() {
  return $.Primitives_getMinutes(this);
},
 get$second: function() {
  return $.Primitives_getSeconds(this);
},
 get$millisecond: function() {
  return $.Primitives_getMilliseconds(this);
},
 _DateImpl$now$0: function() {
  $.Primitives_lazyAsJsDate(this);
},
 _DateImpl$fromMillisecondsSinceEpoch$2: function(millisecondsSinceEpoch, isUtc) {
  var t1 = this.millisecondsSinceEpoch;
  if ($.gtB($.getInterceptor$JSNumber(t1).abs$0(t1), 8640000000000000))
    throw $.$$throw($.ArgumentError$(t1));
  t1 = this.isUtc;
  if (t1 == null)
    throw $.$$throw($.ArgumentError$(t1));
},
 is$Date: true
};

$$.NullThrownError = {'': function NullThrownError() {
},
 'super': 'Object',
 toString$0: function() {
  return "Throw of null.";
}
};

$$.ArgumentError = {'': function ArgumentError(message) {
  this.message = message;
},
 'super': 'Object',
 get$message: function() { return this.message; },
 toString$0: function() {
  var t1 = this.message;
  if (!(t1 == null))
    return "Illegal argument(s): " + $.S(t1);
  return "Illegal argument(s)";
}
};

$$.RangeError = {'': function RangeError(message) {
  this.message = message;
},
 'super': 'ArgumentError',
 toString$0: function() {
  return "RangeError: " + $.S(this.message);
}
};

$$.NoSuchMethodError = {'': function NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, _existingArgumentNames) {
  this._receiver = _receiver;
  this._memberName = _memberName;
  this._arguments = _arguments;
  this._namedArguments = _namedArguments;
  this._existingArgumentNames = _existingArgumentNames;
},
 'super': 'Object',
 toString$0: function() {
  var t1, t2, t3, t4, t5, actualParameters, i, formalParameters;
  t1 = {};
  t1.sb_0 = $.StringBuffer_StringBuffer("");
  t1.i_1 = 0;
  t2 = this._arguments;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
    return this.toString$0$bailout(1, t1, t2);
  for (; $.ltB(t1.i_1, t2.length); t1.i_1 = $.add(t1.i_1, 1)) {
    if ($.gtB(t1.i_1, 0)) {
      t3 = t1.sb_0;
      $.getInterceptor$JSArray(t3).add$1(t3, ", ");
    }
    t3 = t1.sb_0;
    t4 = $.getInterceptor$JSArray(t3);
    t5 = t1.i_1;
    if (t5 !== (t5 | 0))
      throw $.iae(t5);
    if (t5 < 0 || t5 >= t2.length)
      throw $.ioore(t5);
    t4.add$1(t3, $.Error_safeToString(t2[t5]));
  }
  t2 = this._namedArguments;
  if (!(t2 == null))
    $.getInterceptor$JSArray(t2).forEach$1(t2, new $.NoSuchMethodError_toString_anon(t1));
  t2 = this._existingArgumentNames;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
    return this.toString$0$bailout(2, t1, t2);
  t3 = t1.sb_0;
  actualParameters = $.getInterceptor(t3).toString$0(t3);
  t1.sb_0 = $.StringBuffer_StringBuffer("");
  for (i = 0; i < t2.length; ++i) {
    if (i > 0) {
      t3 = t1.sb_0;
      $.getInterceptor$JSArray(t3).add$1(t3, ", ");
    }
    t3 = t1.sb_0;
    t4 = $.getInterceptor$JSArray(t3);
    if (i >= t2.length)
      throw $.ioore(i);
    t4.add$1(t3, t2[i]);
  }
  t1 = t1.sb_0;
  formalParameters = $.getInterceptor(t1).toString$0(t1);
  t1 = this._memberName;
  return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t1) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t1) + "(" + $.S(formalParameters) + ")";
},
 toString$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t2 = env1;
      t1 = env0;
      break;
    case 2:
      t2 = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = {};
      t1.sb_0 = $.StringBuffer_StringBuffer("");
      t1.i_1 = 0;
      t2 = this._arguments;
    case 1:
      state0 = 0;
      if (!(t2 == null))
        for (t3 = $.getInterceptor$JSStringJSArray(t2); $.ltB(t1.i_1, t3.get$length(t2)); t1.i_1 = $.add(t1.i_1, 1)) {
          if ($.gtB(t1.i_1, 0)) {
            t4 = t1.sb_0;
            $.getInterceptor$JSArray(t4).add$1(t4, ", ");
          }
          t4 = t1.sb_0;
          $.getInterceptor$JSArray(t4).add$1(t4, $.Error_safeToString(t3.operator$index$1(t2, t1.i_1)));
        }
      t2 = this._namedArguments;
      if (!(t2 == null))
        $.getInterceptor$JSArray(t2).forEach$1(t2, new $.NoSuchMethodError_toString_anon(t1));
      t2 = this._existingArgumentNames;
    case 2:
      var t1, t2, t3, t4, actualParameters, i, formalParameters;
      state0 = 0;
      if (t2 == null)
        return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Arguments: [" + $.S(t1.sb_0) + "]";
      else {
        t3 = t1.sb_0;
        actualParameters = $.getInterceptor(t3).toString$0(t3);
        t1.sb_0 = $.StringBuffer_StringBuffer("");
        for (t3 = $.getInterceptor$JSStringJSArray(t2), i = 0; $.ltB(i, t3.get$length(t2)); ++i) {
          if (i > 0) {
            t4 = t1.sb_0;
            $.getInterceptor$JSArray(t4).add$1(t4, ", ");
          }
          t4 = t1.sb_0;
          $.getInterceptor$JSArray(t4).add$1(t4, t3.operator$index$1(t2, i));
        }
        t1 = t1.sb_0;
        formalParameters = $.getInterceptor(t1).toString$0(t1);
        t1 = this._memberName;
        return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t1) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t1) + "(" + $.S(formalParameters) + ")";
      }
  }
}
};

$$.UnsupportedError = {'': function UnsupportedError(message) {
  this.message = message;
},
 'super': 'Object',
 get$message: function() { return this.message; },
 toString$0: function() {
  return "Unsupported operation: " + $.S(this.get$message());
}
};

$$.UnimplementedError = {'': function UnimplementedError(message) {
  this.message = message;
},
 'super': 'Object',
 get$message: function() { return this.message; },
 toString$0: function() {
  var t1 = this.message;
  return !(t1 == null) ? "UnimplementedError: " + $.S(t1) : "UnimplementedError";
}
};

$$.StateError = {'': function StateError(message) {
  this.message = message;
},
 'super': 'Object',
 get$message: function() { return this.message; },
 toString$0: function() {
  return "Bad state: " + this.message;
}
};

$$.StackOverflowError = {'': function StackOverflowError() {
},
 'super': 'Object',
 toString$0: function() {
  return "Stack Overflow";
}
};

$$.RuntimeError = {'': function RuntimeError(message) {
  this.message = message;
},
 'super': 'Object',
 get$message: function() { return this.message; },
 toString$0: function() {
  return "RuntimeError: " + this.message;
}
};

$$._ExceptionImplementation = {'': function _ExceptionImplementation(message) {
  this.message = message;
},
 'super': 'Object',
 get$message: function() { return this.message; },
 toString$0: function() {
  var t1 = this.message;
  if (t1 == null)
    return "Exception";
  return "Exception: " + $.S(t1);
},
 is$Exception: true
};

$$.FormatException = {'': function FormatException(message) {
  this.message = message;
},
 'super': 'Object',
 get$message: function() { return this.message; },
 toString$0: function() {
  return "FormatException: " + $.S(this.message);
},
 is$Exception: true
};

$$.IllegalJSRegExpException = {'': function IllegalJSRegExpException(_pattern, _errmsg) {
  this._pattern = _pattern;
  this._errmsg = _errmsg;
},
 'super': 'Object',
 toString$0: function() {
  return "IllegalJSRegExpException: '" + $.S(this._pattern) + "' '" + this._errmsg + "'";
},
 is$Exception: true
};

$$.FutureNotCompleteException = {'': function FutureNotCompleteException() {
},
 'super': 'Object',
 toString$0: function() {
  return "Exception: future has not been completed";
},
 is$Exception: true
};

$$.FutureAlreadyCompleteException = {'': function FutureAlreadyCompleteException() {
},
 'super': 'Object',
 toString$0: function() {
  return "Exception: future already completed";
},
 is$Exception: true
};

$$.FutureUnhandledException = {'': function FutureUnhandledException(source, stackTrace) {
  this.source = source;
  this.stackTrace = stackTrace;
},
 'super': 'Object',
 get$stackTrace: function() { return this.stackTrace; },
 toString$0: function() {
  var t1, t2, t3;
  t1 = this.source;
  t1 = $.getInterceptor(t1).toString$0(t1);
  t2 = "FutureUnhandledException: exception while executing Future\n  " + $.S($.getInterceptor$JSString(t1).replaceAll$2(t1, "\n", "\n  ")) + "\n" + "original stack trace:\n  ";
  t3 = this.stackTrace;
  t3 = $.getInterceptor(t3).toString$0(t3);
  return t2 + $.S($.getInterceptor$JSString(t3).replaceAll$2(t3, "\n", "\n  "));
},
 is$Exception: true
};

$$._FutureImpl = {'': function _FutureImpl(_isComplete, _value, _exception, _stackTrace, _exceptionHandled, _throwOnException, _successListeners, _exceptionHandlers, _completionListeners) {
  this._isComplete = _isComplete;
  this._value = _value;
  this._exception = _exception;
  this._stackTrace = _stackTrace;
  this._exceptionHandled = _exceptionHandled;
  this._throwOnException = _throwOnException;
  this._successListeners = _successListeners;
  this._exceptionHandlers = _exceptionHandlers;
  this._completionListeners = _completionListeners;
},
 'super': 'Object',
 get$value: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  var t1 = this._exception;
  if (!(t1 == null))
    throw $.$$throw($.FutureUnhandledException$(t1, this.get$stackTrace()));
  return this._value;
},
 get$stackTrace: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  return this._stackTrace;
},
 get$isComplete: function() {
  return this._isComplete;
},
 get$hasValue: function() {
  return this.get$isComplete() === true && this._exception == null;
},
 then$1: function(onSuccess) {
  if (this.get$hasValue() === true)
    onSuccess.call$1(this.get$value());
  else if (this.get$isComplete() !== true) {
    this._throwOnException = true;
    this._successListeners.push(onSuccess);
  } else if (this._exceptionHandled !== true)
    throw $.$$throw($.FutureUnhandledException$(this._exception, this.get$stackTrace()));
},
 handleException$1: function(onException) {
  var t1;
  if (this._exceptionHandled === true)
    return;
  if (this._isComplete) {
    t1 = this._exception;
    if (!(t1 == null))
      this._exceptionHandled = onException.call$1(t1);
  } else
    this._exceptionHandlers.push(onException);
},
 _complete$0: function(exception) {
  var t1, handler, listener, listener0;
  this._isComplete = true;
  try {
    if (!(this._exception == null))
      for (t1 = $.CONSTANT2.iterator$0(this._exceptionHandlers); t1.get$hasNext() === true;) {
        handler = t1.next$0();
        if ($.eqB(handler.call$1(this._exception), true)) {
          this._exceptionHandled = true;
          break;
        }
      }
    if (this.get$hasValue() === true)
      for (t1 = $.CONSTANT2.iterator$0(this._successListeners); t1.get$hasNext() === true;) {
        listener = t1.next$0();
        listener.call$1(this.get$value());
      }
    else if (this._exceptionHandled !== true && this._throwOnException)
      throw $.$$throw($.FutureUnhandledException$(this._exception, this.get$stackTrace()));
  } finally {
    for (t1 = $.CONSTANT2.iterator$0(this._completionListeners); t1.get$hasNext() === true;) {
      listener0 = t1.next$0();
      try {
        listener0.call$1(this);
      } catch (exception) {
        $.unwrapException(exception);
      }

    }
  }
},
 _setValue$1: function(value) {
  if (this._isComplete)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._value = value;
  this._complete$0();
},
 _setException$2: function(exception, stackTrace) {
  if (exception == null)
    throw $.$$throw($.ArgumentError$(null));
  if (this._isComplete)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._exception = exception;
  this._stackTrace = stackTrace;
  this._complete$0();
}
};

$$._CompleterImpl = {'': function _CompleterImpl(_futureImpl) {
  this._futureImpl = _futureImpl;
},
 'super': 'Object',
 get$future: function() {
  return this._futureImpl;
},
 complete$1: function(value) {
  this._futureImpl._setValue$1(value);
},
 completeException$2: function(exception, stackTrace) {
  this._futureImpl._setException$2(exception, stackTrace);
},
 completeException$1: function(exception) {
  return this.completeException$2(exception, null);
}
};

$$._HashMapImpl = {'': function _HashMapImpl(_keys, _values, _loadLimit, _numberOfEntries, _numberOfDeleted) {
  this._keys = _keys;
  this._values = _values;
  this._loadLimit = _loadLimit;
  this._numberOfEntries = _numberOfEntries;
  this._numberOfDeleted = _numberOfDeleted;
},
 'super': 'Object',
 get$_keys: function() { return this._keys; },
 _probeForAdding$1: function(key) {
  var t1, t3, hash, insertionIndex, numberOfProbes, existingKey, numberOfProbes0;
  if (key == null)
    throw $.$$throw($.ArgumentError$(null));
  t1 = $.getInterceptor(key).get$hashCode(key);
  if (t1 !== (t1 | 0))
    return this._probeForAdding$1$bailout(1, key, t1);
  t3 = this._keys;
  t3 = $.getInterceptor$JSStringJSArray(t3).get$length(t3);
  if (t3 !== (t3 | 0))
    return this._probeForAdding$1$bailout(2, key, t3, t1);
  hash = (t1 & t3 - 1) >>> 0;
  for (insertionIndex = -1, numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this._probeForAdding$1$bailout(3, key, hash, numberOfProbes, t1, insertionIndex);
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null) {
      if (insertionIndex < 0)
        return hash;
      return insertionIndex;
    } else if ($.eqB(existingKey, key))
      return hash;
    else if (insertionIndex < 0 && existingKey === $.CONSTANT4)
      insertionIndex = hash;
    numberOfProbes0 = numberOfProbes + 1;
    t1 = this._keys;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, $.getInterceptor$JSStringJSArray(t1).get$length(t1));
    if (hash !== (hash | 0))
      return this._probeForAdding$1$bailout(4, key, insertionIndex, hash, numberOfProbes0);
  }
},
 _probeForAdding$1$bailout: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      t1 = env1;
      key = env0;
      break;
    case 2:
      t1 = env2;
      t3 = env1;
      key = env0;
      break;
    case 3:
      insertionIndex = env4;
      t1 = env3;
      numberOfProbes = env2;
      hash = env1;
      key = env0;
      break;
    case 4:
      numberOfProbes0 = env3;
      hash = env2;
      insertionIndex = env1;
      key = env0;
      break;
  }
  switch (state0) {
    case 0:
      if (key == null)
        throw $.$$throw($.ArgumentError$(null));
      t1 = $.getInterceptor(key).get$hashCode(key);
    case 1:
      state0 = 0;
      t3 = this._keys;
      t3 = $.getInterceptor$JSStringJSArray(t3).get$length(t3);
    case 2:
      state0 = 0;
      hash = $.and(t1, $.sub(t3, 1));
      insertionIndex = -1;
      numberOfProbes = 1;
    default:
      var t1, key, t3, hash, insertionIndex, numberOfProbes, existingKey, numberOfProbes0;
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!true)
                break L0;
              t1 = this._keys;
            case 3:
              state0 = 0;
              existingKey = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, hash);
              if (existingKey == null) {
                if ($.ltB(insertionIndex, 0))
                  return hash;
                return insertionIndex;
              } else if ($.eqB(existingKey, key))
                return hash;
              else if ($.ltB(insertionIndex, 0) && existingKey === $.CONSTANT4)
                insertionIndex = hash;
              numberOfProbes0 = numberOfProbes + 1;
              t1 = this._keys;
              hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, $.getInterceptor$JSStringJSArray(t1).get$length(t1));
            case 4:
              state0 = 0;
              numberOfProbes = numberOfProbes0;
          }
  }
},
 _probeForLookup$1: function(key) {
  var t1, t2, hash, numberOfProbes, existingKey, numberOfProbes0;
  if (key == null)
    throw $.$$throw($.ArgumentError$(null));
  t1 = $.getInterceptor(key).get$hashCode(key);
  t2 = this._keys;
  hash = $.and(t1, $.sub($.getInterceptor$JSStringJSArray(t2).get$length(t2), 1));
  if (hash !== (hash | 0))
    return this._probeForLookup$1$bailout(1, key, hash);
  for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    existingKey = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, hash);
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    numberOfProbes0 = numberOfProbes + 1;
    t1 = this._keys;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, $.getInterceptor$JSStringJSArray(t1).get$length(t1));
  }
},
 _probeForLookup$1$bailout: function(state0, key, hash) {
  var numberOfProbes, t1, existingKey, numberOfProbes0;
  for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    existingKey = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, hash);
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    numberOfProbes0 = numberOfProbes + 1;
    t1 = this._keys;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, $.getInterceptor$JSStringJSArray(t1).get$length(t1));
  }
},
 _ensureCapacity$0: function() {
  var newNumberOfEntries, t1, numberOfFree;
  newNumberOfEntries = $.add(this._numberOfEntries, 1);
  if ($.geB(newNumberOfEntries, this._loadLimit)) {
    t1 = this._keys;
    this._grow$1($.mul($.getInterceptor$JSStringJSArray(t1).get$length(t1), 2));
    return;
  }
  t1 = this._keys;
  numberOfFree = $.sub($.sub($.getInterceptor$JSStringJSArray(t1).get$length(t1), newNumberOfEntries), this._numberOfDeleted);
  if ($.gtB(this._numberOfDeleted, numberOfFree)) {
    t1 = this._keys;
    this._grow$1($.getInterceptor$JSStringJSArray(t1).get$length(t1));
  }
},
 _grow$1: function(newCapacity) {
  var t1, capacity, oldKeys, oldValues, t4, i, key, value, newIndex;
  t1 = this._keys;
  capacity = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  if (typeof capacity !== 'number')
    return this._grow$1$bailout(1, newCapacity, capacity);
  this._loadLimit = $.tdiv($.mul(newCapacity, 3), 4);
  oldKeys = this._keys;
  if (typeof oldKeys !== 'string' && (typeof oldKeys !== 'object' || oldKeys === null || oldKeys.constructor !== Array && !oldKeys.is$JavaScriptIndexingBehavior()))
    return this._grow$1$bailout(2, newCapacity, oldKeys, capacity);
  oldValues = this._values;
  if (typeof oldValues !== 'string' && (typeof oldValues !== 'object' || oldValues === null || oldValues.constructor !== Array && !oldValues.is$JavaScriptIndexingBehavior()))
    return this._grow$1$bailout(3, newCapacity, oldKeys, oldValues, capacity);
  t4 = $.List_List(newCapacity);
  $.setRuntimeTypeInfo(t4, []);
  this._keys = t4;
  t4 = $.List_List(newCapacity, $.getRuntimeTypeInfo(this)[1]);
  $.setRuntimeTypeInfo(t4, [$.getRuntimeTypeInfo(this)[1]]);
  this._values = t4;
  for (i = 0; i < capacity; ++i) {
    if (i >= oldKeys.length)
      throw $.ioore(i);
    key = oldKeys[i];
    if (key == null || key === $.CONSTANT4)
      continue;
    if (i >= oldValues.length)
      throw $.ioore(i);
    value = oldValues[i];
    newIndex = this._probeForAdding$1(key);
    $.indexSet(this._keys, newIndex, key);
    $.indexSet(this._values, newIndex, value);
  }
  this._numberOfDeleted = 0;
},
 _grow$1$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      capacity = env1;
      newCapacity = env0;
      break;
    case 2:
      capacity = env2;
      oldKeys = env1;
      newCapacity = env0;
      break;
    case 3:
      capacity = env3;
      oldValues = env2;
      oldKeys = env1;
      newCapacity = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this._keys;
      capacity = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
    case 1:
      state0 = 0;
      this._loadLimit = $.tdiv($.mul(newCapacity, 3), 4);
      oldKeys = this._keys;
    case 2:
      state0 = 0;
      oldValues = this._values;
    case 3:
      var t1, capacity, newCapacity, oldKeys, oldValues, t4, t2, i, key, value, newIndex;
      state0 = 0;
      t4 = $.List_List(newCapacity);
      $.setRuntimeTypeInfo(t4, []);
      this._keys = t4;
      t4 = $.List_List(newCapacity, $.getRuntimeTypeInfo(this)[1]);
      $.setRuntimeTypeInfo(t4, [$.getRuntimeTypeInfo(this)[1]]);
      this._values = t4;
      for (t1 = $.getInterceptor$JSStringJSArray(oldKeys), t2 = $.getInterceptor$JSStringJSArray(oldValues), i = 0; $.ltB(i, capacity); ++i) {
        key = t1.operator$index$1(oldKeys, i);
        if (key == null || key === $.CONSTANT4)
          continue;
        value = t2.operator$index$1(oldValues, i);
        newIndex = this._probeForAdding$1(key);
        $.indexSet(this._keys, newIndex, key);
        $.indexSet(this._values, newIndex, value);
      }
      this._numberOfDeleted = 0;
  }
},
 clear$0: function() {
  var t1, length$, i;
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  t1 = this._keys;
  length$ = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  if (typeof length$ !== 'number')
    return this.clear$0$bailout(1, length$);
  for (i = 0; i < length$; ++i) {
    $.indexSet(this._keys, i, null);
    $.indexSet(this._values, i, null);
  }
},
 clear$0$bailout: function(state0, length$) {
  var i;
  for (i = 0; $.ltB(i, length$); ++i) {
    $.indexSet(this._keys, i, null);
    $.indexSet(this._values, i, null);
  }
},
 operator$indexSet$2: function(key, value) {
  var index, t1, t2;
  this._ensureCapacity$0();
  index = this._probeForAdding$1(key);
  t1 = this._keys;
  if (!($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index) == null)) {
    t1 = this._keys;
    t2 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index) === $.CONSTANT4;
    t1 = t2;
  } else
    t1 = true;
  if (t1)
    this._numberOfEntries = $.add(this._numberOfEntries, 1);
  $.indexSet(this._keys, index, key);
  $.indexSet(this._values, index, value);
},
 operator$index$1: function(key) {
  var index, t1;
  index = this._probeForLookup$1(key);
  if (typeof index !== 'number')
    return this.operator$index$1$bailout(1, index);
  if (index < 0)
    return;
  t1 = this._values;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.operator$index$1$bailout(2, t1, index);
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  return t1[index];
},
 operator$index$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      index = env0;
      break;
    case 2:
      index = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      index = this._probeForLookup$1(key);
    case 1:
      state0 = 0;
      if ($.ltB(index, 0))
        return;
      t1 = this._values;
    case 2:
      var index, t1;
      state0 = 0;
      return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index);
  }
},
 remove$1: function(key) {
  var index, t1, t3, value;
  index = this._probeForLookup$1(key);
  if (typeof index !== 'number')
    return this.remove$1$bailout(1, index);
  if (index >= 0) {
    t1 = this._numberOfEntries;
    if (typeof t1 !== 'number')
      return this.remove$1$bailout(2, index, t1);
    this._numberOfEntries = t1 - 1;
    t3 = this._values;
    if (typeof t3 !== 'string' && (typeof t3 !== 'object' || t3 === null || t3.constructor !== Array && !t3.is$JavaScriptIndexingBehavior()))
      return this.remove$1$bailout(3, index, t3);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t3.length)
      throw $.ioore(index);
    value = t3[index];
    if (typeof t3 !== 'object' || t3 === null || (t3.constructor !== Array || !!t3.immutable$list) && !t3.is$JavaScriptIndexingBehavior())
      return this.remove$1$bailout(4, value, index, t3);
    if (index >= t3.length)
      throw $.ioore(index);
    t3[index] = null;
    t3 = this._keys;
    if (typeof t3 !== 'object' || t3 === null || (t3.constructor !== Array || !!t3.immutable$list) && !t3.is$JavaScriptIndexingBehavior())
      return this.remove$1$bailout(5, value, index, t3);
    if (index >= t3.length)
      throw $.ioore(index);
    t3[index] = $.CONSTANT4;
    t3 = this._numberOfDeleted;
    if (typeof t3 !== 'number')
      return this.remove$1$bailout(6, t3, value);
    this._numberOfDeleted = t3 + 1;
    return value;
  }
  return;
},
 remove$1$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      index = env0;
      break;
    case 2:
      t1 = env1;
      index = env0;
      break;
    case 3:
      t3 = env1;
      index = env0;
      break;
    case 4:
      t3 = env2;
      index = env1;
      value = env0;
      break;
    case 5:
      t3 = env2;
      index = env1;
      value = env0;
      break;
    case 6:
      value = env1;
      t3 = env0;
      break;
  }
  switch (state0) {
    case 0:
      index = this._probeForLookup$1(key);
    case 1:
      state0 = 0;
    default:
      var index, t1, t3, value;
      if (state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 0 && $.geB(index, 0))
        switch (state0) {
          case 0:
            t1 = this._numberOfEntries;
          case 2:
            state0 = 0;
            this._numberOfEntries = $.sub(t1, 1);
            t3 = this._values;
          case 3:
            state0 = 0;
            value = $.getInterceptor$JSStringJSArray(t3).operator$index$1(t3, index);
            t3 = this._values;
          case 4:
            state0 = 0;
            $.indexSet(t3, index, null);
            t3 = this._keys;
          case 5:
            state0 = 0;
            $.indexSet(t3, index, $.CONSTANT4);
            t3 = this._numberOfDeleted;
          case 6:
            state0 = 0;
            this._numberOfDeleted = $.add(t3, 1);
            return value;
        }
      return;
  }
},
 get$isEmpty: function() {
  return $.eq(this._numberOfEntries, 0);
},
 get$length: function() {
  return this._numberOfEntries;
},
 forEach$1: function(f) {
  var t1, length$, i, key;
  t1 = this._keys;
  length$ = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  if (typeof length$ !== 'number')
    return this.forEach$1$bailout(1, f, length$);
  for (i = 0; i < length$; ++i) {
    t1 = this._keys;
    key = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i);
    if (!(key == null) && !(key === $.CONSTANT4)) {
      t1 = this._values;
      f.call$2(key, $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i));
    }
  }
},
 forEach$1$bailout: function(state0, f, length$) {
  var i, t1, key;
  for (i = 0; $.ltB(i, length$); ++i) {
    t1 = this._keys;
    key = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i);
    if (!(key == null) && !(key === $.CONSTANT4)) {
      t1 = this._values;
      f.call$2(key, $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i));
    }
  }
},
 get$keys: function() {
  var t1, list;
  t1 = {};
  list = $.List_List(this.get$length(), $.getRuntimeTypeInfo(this)[0]);
  $.setRuntimeTypeInfo(list, [$.getRuntimeTypeInfo(this)[0]]);
  t1.i_0 = 0;
  this.forEach$1(new $._HashMapImpl_keys_anon(t1, list));
  return list;
},
 get$values: function() {
  var t1, list;
  t1 = {};
  list = $.List_List(this.get$length(), $.getRuntimeTypeInfo(this)[1]);
  $.setRuntimeTypeInfo(list, [$.getRuntimeTypeInfo(this)[1]]);
  t1.i_0 = 0;
  this.forEach$1(new $._HashMapImpl_values_anon(t1, list));
  return list;
},
 containsKey$1: function(key) {
  return !$.eqB(this._probeForLookup$1(key), -1);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _HashMapImpl$0: function() {
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  this._loadLimit = $._HashMapImpl__computeLoadLimit(8);
  var t1 = $.List_List(8);
  $.setRuntimeTypeInfo(t1, []);
  this._keys = t1;
  t1 = $.List_List(8, $.getRuntimeTypeInfo(this)[1]);
  $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeInfo(this)[1]]);
  this._values = t1;
},
 is$Map: function() { return true; }
};

$$._DeletedKeySentinel = {'': function _DeletedKeySentinel() {
},
 'super': 'Object'
};

$$._KeyValuePair = {'': function _KeyValuePair(key, value) {
  this.key = key;
  this.value = value;
},
 'super': 'Object',
 get$key: function() { return this.key; },
 get$value: function() { return this.value; },
 set$value: function(v) { this.value = v; }
};

$$._LinkedHashMapImpl = {'': function _LinkedHashMapImpl(_list, _map) {
  this._list = _list;
  this._map = _map;
},
 'super': 'Object',
 operator$indexSet$2: function(key, value) {
  var t1;
  if (this._map.containsKey$1(key) === true) {
    t1 = this._map;
    $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, key).get$element().set$value(value);
  } else {
    t1 = this._list;
    $.getInterceptor$JSArray(t1).addLast$1(t1, $._KeyValuePair$(key, value, $.getRuntimeTypeInfo(this)[0], $.getRuntimeTypeInfo(this)[1]));
    $.indexSet(this._map, key, this._list.lastEntry$0());
  }
},
 operator$index$1: function(key) {
  var t1, entry;
  t1 = this._map;
  entry = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, key);
  if (entry == null)
    return;
  return entry.get$element().get$value();
},
 remove$1: function(key) {
  var entry = this._map.remove$1(key);
  if (entry == null)
    return;
  entry.remove$0();
  return entry.get$element().get$value();
},
 get$keys: function() {
  var t1, list, t2;
  t1 = {};
  list = $.List_List(this.get$length(), $.getRuntimeTypeInfo(this)[0]);
  $.setRuntimeTypeInfo(list, [$.getRuntimeTypeInfo(this)[0]]);
  t1.index_0 = 0;
  t2 = this._list;
  $.getInterceptor$JSArray(t2).forEach$1(t2, new $._LinkedHashMapImpl_keys_anon(t1, list));
  return list;
},
 get$values: function() {
  var t1, list, t2;
  t1 = {};
  list = $.List_List(this.get$length(), $.getRuntimeTypeInfo(this)[1]);
  $.setRuntimeTypeInfo(list, [$.getRuntimeTypeInfo(this)[1]]);
  t1.index_0 = 0;
  t2 = this._list;
  $.getInterceptor$JSArray(t2).forEach$1(t2, new $._LinkedHashMapImpl_values_anon(t1, list));
  return list;
},
 forEach$1: function(f) {
  var t1 = this._list;
  $.getInterceptor$JSArray(t1).forEach$1(t1, new $._LinkedHashMapImpl_forEach_anon(f));
},
 containsKey$1: function(key) {
  return this._map.containsKey$1(key);
},
 get$length: function() {
  var t1 = this._map;
  return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
},
 get$isEmpty: function() {
  return $.eq(this.get$length(), 0);
},
 clear$0: function() {
  var t1 = this._map;
  $.getInterceptor$JSArray(t1).clear$0(t1);
  t1 = this._list;
  $.getInterceptor$JSArray(t1).clear$0(t1);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _LinkedHashMapImpl$0: function() {
  var t1, t2, t3;
  t1 = $.getRuntimeTypeInfo(this)[0];
  t2 = $.getRuntimeTypeInfo(this);
  this._map = $.HashMap_HashMap(t1, [$.DoubleLinkedQueueEntry, [$._KeyValuePair, t2[0], t2[1]]]);
  t3 = $.getRuntimeTypeInfo(this);
  this._list = $.DoubleLinkedQueue$([$._KeyValuePair, t3[0], t3[1]]);
},
 is$Map: function() { return true; }
};

$$.Object = {'': function Object() {
},
 operator$eq$1: function(other) {
  return this === other;
},
 get$hashCode: function() {
  return $.Primitives_objectHashCode(this);
},
 toString$0: function() {
  return $.Primitives_objectToString(this);
},
 noSuchMethod$1: function(invocation) {
  throw $.$$throw($.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
},
 get$runtimeType: function() {
  return $.TypeImpl$($.getRuntimeTypeString(this));
},
 registerPort$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("registerPort", "registerPort$2", 0, [$0, $1], []));
},
 operator$index$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("[]", "operator$index$1", 0, [$0], []));
},
 floor$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("floor", "floor$0", 0, [], []));
},
 xArrayBuffer$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("xArrayBuffer", "xArrayBuffer$1", 0, [$0], []));
},
 maybeCloseWorker$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("maybeCloseWorker", "maybeCloseWorker$0", 0, [], []));
},
 fine$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("fine", "fine$1", 0, [$0], []));
},
 _postMessage_2$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_postMessage_2", "_postMessage_2$1", 0, [$0], []));
},
 allMatches$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("allMatches", "allMatches$1", 0, [$0], []));
},
 operator$ge$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror(">=", "operator$ge$1", 0, [$0], []));
},
 _runHelper$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_runHelper", "_runHelper$0", 0, [], []));
},
 _probeForLookup$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_probeForLookup", "_probeForLookup$1", 0, [$0], []));
},
 replaceAll$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("replaceAll", "replaceAll$2", 0, [$0, $1], []));
},
 $$dom_addEventListener$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_addEventListener", "$$dom_addEventListener$3", 0, [$0, $1, $2], []));
},
 _setGlobals$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_setGlobals", "_setGlobals$0", 0, [], []));
},
 open$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("open", "open$3", 0, [$0, $1, $2], []));
},
 operator$xor$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("^", "operator$xor$1", 0, [$0], []));
},
 firstMatch$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("firstMatch", "firstMatch$1", 0, [$0], []));
},
 _nativeDetectEnvironment$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_nativeDetectEnvironment", "_nativeDetectEnvironment$0", 0, [], []));
},
 _probeForAdding$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_probeForAdding", "_probeForAdding$1", 0, [$0], []));
},
 _deserializeMap$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_deserializeMap", "_deserializeMap$1", 0, [$0], []));
},
 _liblib2$_deserializeMap$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_deserializeMap", "_liblib2$_deserializeMap$1", 0, [$0], []));
},
 operator$sub$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("-", "operator$sub$1", 0, [$0], []));
},
 setTimeout$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("setTimeout", "setTimeout$2", 0, [$0, $1], []));
},
 truncate$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("truncate", "truncate$0", 0, [], []));
},
 concat$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("concat", "concat$1", 0, [$0], []));
},
 _add_1$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("_add_1", "_add_1$2", 0, [$0, $1], []));
},
 completeException$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("completeException", "completeException$1", 0, [$0], []));
},
 completeException$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("completeException", "completeException$2", 0, [$0, $1], []));
},
 _toList$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_toList", "_toList$0", 0, [], []));
},
 _clearHandlers$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_clearHandlers", "_clearHandlers$0", 0, [], []));
},
 next$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("next", "next$0", 0, [], []));
},
 remove$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("remove", "remove$0", 0, [], []));
},
 remove$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("remove", "remove$1", 0, [$0], []));
},
 onRead$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("onRead", "onRead$1", 0, [$0], []));
},
 startsWith$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("startsWith", "startsWith$1", 0, [$0], []));
},
 getRange$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("getRange", "getRange$2", 0, [$0, $1], []));
},
 callSync$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("callSync", "callSync$1", 0, [$0], []));
},
 openPort$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("openPort", "openPort$1", 0, [$0], []));
},
 $$dom_removeEventListener$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_removeEventListener", "$$dom_removeEventListener$3", 0, [$0, $1, $2], []));
},
 iterator$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("iterator", "iterator$0", 0, [], []));
},
 lookup$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("lookup", "lookup$1", 0, [$0], []));
},
 cleanup$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("cleanup", "cleanup$0", 0, [], []));
},
 write$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("write", "write$1", 0, [$0], []));
},
 write$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("write", "write$3", 0, [$0, $1, $2], []));
},
 operator$le$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("<=", "operator$le$1", 0, [$0], []));
},
 _get_1$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_get_1", "_get_1$1", 0, [$0], []));
},
 contains$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("contains", "contains$1", 0, [$0], []));
},
 contains$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("contains", "contains$2", 0, [$0, $1], []));
},
 unregister$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("unregister", "unregister$1", 0, [$0], []));
},
 $$dom_removeAttribute$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_removeAttribute", "$$dom_removeAttribute$1", 0, [$0], []));
},
 hasMatch$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("hasMatch", "hasMatch$1", 0, [$0], []));
},
 handleException$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("handleException", "handleException$1", 0, [$0], []));
},
 add$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("add", "add$1", 0, [$0], []));
},
 _addHandler$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_addHandler", "_addHandler$1", 0, [$0], []));
},
 operator$mul$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("*", "operator$mul$1", 0, [$0], []));
},
 previousEntry$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("previousEntry", "previousEntry$0", 0, [], []));
},
 $$dom_getAttribute$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_getAttribute", "$$dom_getAttribute$1", 0, [$0], []));
},
 run$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("run", "run$0", 0, [], []));
},
 $$dom_createEvent$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_createEvent", "$$dom_createEvent$1", 0, [$0], []));
},
 lastIndexOf$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("lastIndexOf", "lastIndexOf$1", 0, [$0], []));
},
 lastIndexOf$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("lastIndexOf", "lastIndexOf$2", 0, [$0, $1], []));
},
 get$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("get", "get$1", 0, [$0], []));
},
 substring$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("substring", "substring$1", 0, [$0], []));
},
 substring$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("substring", "substring$2", 0, [$0, $1], []));
},
 _dispatch$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_dispatch", "_dispatch$1", 0, [$0], []));
},
 _liblib2$_dispatch$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_dispatch", "_liblib2$_dispatch$1", 0, [$0], []));
},
 addAll$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("addAll", "addAll$1", 0, [$0], []));
},
 stringifyValue$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("stringifyValue", "stringifyValue$1", 0, [$0], []));
},
 operator$shr$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror(">>", "operator$shr$1", 0, [$0], []));
},
 query$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("query", "query$1", 0, [$0], []));
},
 _complete$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_complete", "_complete$0", 0, [], []));
},
 queryAll$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("queryAll", "queryAll$1", 0, [$0], []));
},
 register$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("register", "register$2", 0, [$0, $1], []));
},
 charCodeAt$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("charCodeAt", "charCodeAt$1", 0, [$0], []));
},
 _initialize$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_initialize", "_initialize$1", 0, [$0], []));
},
 complete$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("complete", "complete$1", 0, [$0], []));
},
 $$dom_replaceChild$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_replaceChild", "$$dom_replaceChild$2", 0, [$0, $1], []));
},
 $$dom_hasAttribute$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_hasAttribute", "$$dom_hasAttribute$1", 0, [$0], []));
},
 clear$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("clear", "clear$0", 0, [], []));
},
 prepend$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("prepend", "prepend$1", 0, [$0], []));
},
 addLast$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("addLast", "addLast$1", 0, [$0], []));
},
 _throwUnmodifiable$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_throwUnmodifiable", "_throwUnmodifiable$0", 0, [], []));
},
 map$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("map", "map$1", 0, [$0], []));
},
 _postMessage_1$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("_postMessage_1", "_postMessage_1$2", 0, [$0, $1], []));
},
 close$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("close", "close$0", 0, [], []));
},
 close$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("close", "close$2", 0, [$0, $1], []));
},
 startListening$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("startListening", "startListening$0", 0, [], []));
},
 $$dom_initCustomEvent$4: function($0, $1, $2, $3) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_initCustomEvent", "$$dom_initCustomEvent$4", 0, [$0, $1, $2, $3], []));
},
 forEach$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("forEach", "forEach$1", 0, [$0], []));
},
 _deserializeHelper$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_deserializeHelper", "_deserializeHelper$1", 0, [$0], []));
},
 _liblib2$_deserializeHelper$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_deserializeHelper", "_liblib2$_deserializeHelper$1", 0, [$0], []));
},
 toSendPort$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("toSendPort", "toSendPort$0", 0, [], []));
},
 enterScope$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("enterScope", "enterScope$0", 0, [], []));
},
 $$dom_dispatchEvent$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_dispatchEvent", "$$dom_dispatchEvent$1", 0, [$0], []));
},
 abs$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("abs", "abs$0", 0, [], []));
},
 $$dom_setAttribute$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_setAttribute", "$$dom_setAttribute$2", 0, [$0, $1], []));
},
 _deserializeList$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_deserializeList", "_deserializeList$1", 0, [$0], []));
},
 _liblib2$_deserializeList$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_deserializeList", "_liblib2$_deserializeList$1", 0, [$0], []));
},
 endsWith$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("endsWith", "endsWith$1", 0, [$0], []));
},
 _asNonSentinelEntry$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_asNonSentinelEntry", "_asNonSentinelEntry$0", 0, [], []));
},
 onWrite$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("onWrite", "onWrite$1", 0, [$0], []));
},
 removeFirst$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("removeFirst", "removeFirst$0", 0, [], []));
},
 _getPropertyValue$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_getPropertyValue", "_getPropertyValue$1", 0, [$0], []));
},
 xUint8Array$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("xUint8Array", "xUint8Array$1", 0, [$0], []));
},
 _grow$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_grow", "_grow$1", 0, [$0], []));
},
 filter$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("filter", "filter$1", 0, [$0], []));
},
 globalize$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("globalize", "globalize$1", 0, [$0], []));
},
 _serializeList$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_serializeList", "_serializeList$1", 0, [$0], []));
},
 _liblib2$_serializeList$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_serializeList", "_liblib2$_serializeList$1", 0, [$0], []));
},
 operator$add$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("+", "operator$add$1", 0, [$0], []));
},
 postMessage$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("postMessage", "postMessage$1", 0, [$0], []));
},
 then$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("then", "then$1", 0, [$0], []));
},
 indexOf$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("indexOf", "indexOf$1", 0, [$0], []));
},
 indexOf$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("indexOf", "indexOf$2", 0, [$0, $1], []));
},
 operator$tdiv$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("~/", "operator$tdiv$1", 0, [$0], []));
},
 _nativeInitWorkerMessageHandler$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_nativeInitWorkerMessageHandler", "_nativeInitWorkerMessageHandler$0", 0, [], []));
},
 _add_2$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_add_2", "_add_2$1", 0, [$0], []));
},
 _advance$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_advance", "_advance$0", 0, [], []));
},
 operator$indexSet$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("[]=", "operator$indexSet$2", 0, [$0, $1], []));
},
 _link$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("_link", "_link$2", 0, [$0, $1], []));
},
 containsKey$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("containsKey", "containsKey$1", 0, [$0], []));
},
 read$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("read", "read$3", 0, [$0, $1, $2], []));
},
 operator$shl$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("<<", "operator$shl$1", 0, [$0], []));
},
 operator$lt$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("<", "operator$lt$1", 0, [$0], []));
},
 _ensureCapacity$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_ensureCapacity", "_ensureCapacity$0", 0, [], []));
},
 removeRange$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("removeRange", "removeRange$2", 0, [$0, $1], []));
},
 runIteration$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("runIteration", "runIteration$0", 0, [], []));
},
 exitScope$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("exitScope", "exitScope$0", 0, [], []));
},
 operator$gt$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror(">", "operator$gt$1", 0, [$0], []));
},
 invalidate$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("invalidate", "invalidate$1", 0, [$0], []));
},
 process$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("process", "process$0", 0, [], []));
},
 _checkReplyTo$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_checkReplyTo", "_checkReplyTo$1", 0, [$0], []));
},
 _callback$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_callback", "_callback$1", 0, [$0], []));
},
 _liblib2$_callback$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("_callback", "_liblib2$_callback$2", 0, [$0, $1], []));
},
 operator$and$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("&", "operator$and$1", 0, [$0], []));
},
 enqueue$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("enqueue", "enqueue$3", 0, [$0, $1, $2], []));
},
 $$dom_createElement$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_createElement", "$$dom_createElement$1", 0, [$0], []));
},
 getPorts$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("getPorts", "getPorts$1", 0, [$0], []));
},
 lastEntry$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("lastEntry", "lastEntry$0", 0, [], []));
},
 ceil$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("ceil", "ceil$0", 0, [], []));
},
 _matches$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_matches", "_matches$1", 0, [$0], []));
},
 _deserializeRef$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_deserializeRef", "_deserializeRef$1", 0, [$0], []));
},
 _liblib2$_deserializeRef$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_deserializeRef", "_liblib2$_deserializeRef$1", 0, [$0], []));
},
 $$dom_appendChild$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_appendChild", "$$dom_appendChild$1", 0, [$0], []));
},
 _publish$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_publish", "_publish$1", 0, [$0], []));
},
 reset$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("reset", "reset$0", 0, [], []));
},
 append$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("append", "append$1", 0, [$0], []));
},
 call$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("call", "call$0", 0, [], []));
},
 call$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("call", "call$1", 0, [$0], []));
},
 call$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("call", "call$2", 0, [$0, $1], []));
},
 call$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("call", "call$3", 0, [$0, $1, $2], []));
},
 call$4: function($0, $1, $2, $3) {
  return this.noSuchMethod$1($.createInvocationMirror("call", "call$4", 0, [$0, $1, $2, $3], []));
},
 $$dom_removeChild$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_removeChild", "$$dom_removeChild$1", 0, [$0], []));
},
 eval$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("eval", "eval$1", 0, [$0], []));
},
 _removeHandler$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_removeHandler", "_removeHandler$1", 0, [$0], []));
},
 lookupPort$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("lookupPort", "lookupPort$1", 0, [$0], []));
},
 _get_2$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_get_2", "_get_2$1", 0, [$0], []));
},
 toJson$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("toJson", "toJson$0", 0, [], []));
},
 removeLast$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("removeLast", "removeLast$0", 0, [], []));
},
 replaceWith$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("replaceWith", "replaceWith$1", 0, [$0], []));
},
 get$_liblib1$_id: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_id", "_liblib1$_id$0", 1, [], []));
},
 get$_liblib2$_id: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_id", "_liblib2$_id$0", 1, [], []));
},
 get$_previous: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_previous", "_previous$0", 1, [], []));
},
 get$chrome: function() {
  return this.noSuchMethod$1($.createInvocationMirror("chrome", "chrome$0", 1, [], []));
},
 get$key: function() {
  return this.noSuchMethod$1($.createInvocationMirror("key", "key$0", 1, [], []));
},
 get$_backingMap: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_backingMap", "_backingMap$0", 1, [], []));
},
 get$isNaN: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isNaN", "isNaN$0", 1, [], []));
},
 get$elements: function() {
  return this.noSuchMethod$1($.createInvocationMirror("elements", "elements$0", 1, [], []));
},
 get$name: function() {
  return this.noSuchMethod$1($.createInvocationMirror("name", "name$0", 1, [], []));
},
 get$memberName: function() {
  return this.noSuchMethod$1($.createInvocationMirror("memberName", "memberName$0", 1, [], []));
},
 get$$$dom_attributes: function() {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_attributes", "$$dom_attributes$0", 1, [], []));
},
 get$inMilliseconds: function() {
  return this.noSuchMethod$1($.createInvocationMirror("inMilliseconds", "inMilliseconds$0", 1, [], []));
},
 get$namedArguments: function() {
  return this.noSuchMethod$1($.createInvocationMirror("namedArguments", "namedArguments$0", 1, [], []));
},
 get$callback: function() {
  return this.noSuchMethod$1($.createInvocationMirror("callback", "callback$0", 1, [], []));
},
 get$_set: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_set", "_set$0", 1, [], []));
},
 get$userAgent: function() {
  return this.noSuchMethod$1($.createInvocationMirror("userAgent", "userAgent$0", 1, [], []));
},
 get$bytesWritten: function() {
  return this.noSuchMethod$1($.createInvocationMirror("bytesWritten", "bytesWritten$0", 1, [], []));
},
 get$rootContext: function() {
  return this.noSuchMethod$1($.createInvocationMirror("rootContext", "rootContext$0", 1, [], []));
},
 get$logger: function() {
  return this.noSuchMethod$1($.createInvocationMirror("logger", "logger$0", 1, [], []));
},
 get$_onCharRead: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_onCharRead", "_onCharRead$0", 1, [], []));
},
 get$sb: function() {
  return this.noSuchMethod$1($.createInvocationMirror("sb", "sb$0", 1, [], []));
},
 get$last: function() {
  return this.noSuchMethod$1($.createInvocationMirror("last", "last$0", 1, [], []));
},
 get$onRead: function() {
  return this.noSuchMethod$1($.createInvocationMirror("onRead", "onRead$0", 1, [], []));
},
 get$click: function() {
  return this.noSuchMethod$1($.createInvocationMirror("click", "click$0", 1, [], []));
},
 get$length: function() {
  return this.noSuchMethod$1($.createInvocationMirror("length", "length$0", 1, [], []));
},
 get$isWorker: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isWorker", "isWorker$0", 1, [], []));
},
 get$_element: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_element", "_element$0", 1, [], []));
},
 get$openInfoCallback: function() {
  return this.noSuchMethod$1($.createInvocationMirror("openInfoCallback", "openInfoCallback$0", 1, [], []));
},
 get$hasNext: function() {
  return this.noSuchMethod$1($.createInvocationMirror("hasNext", "hasNext$0", 1, [], []));
},
 get$mainManager: function() {
  return this.noSuchMethod$1($.createInvocationMirror("mainManager", "mainManager$0", 1, [], []));
},
 get$record: function() {
  return this.noSuchMethod$1($.createInvocationMirror("record", "record$0", 1, [], []));
},
 get$future: function() {
  return this.noSuchMethod$1($.createInvocationMirror("future", "future$0", 1, [], []));
},
 get$id: function() {
  return this.noSuchMethod$1($.createInvocationMirror("id", "id$0", 1, [], []));
},
 get$parent: function() {
  return this.noSuchMethod$1($.createInvocationMirror("parent", "parent$0", 1, [], []));
},
 get$value: function() {
  return this.noSuchMethod$1($.createInvocationMirror("value", "value$0", 1, [], []));
},
 get$data: function() {
  return this.noSuchMethod$1($.createInvocationMirror("data", "data$0", 1, [], []));
},
 get$writeCallback: function() {
  return this.noSuchMethod$1($.createInvocationMirror("writeCallback", "writeCallback$0", 1, [], []));
},
 get$positionalArguments: function() {
  return this.noSuchMethod$1($.createInvocationMirror("positionalArguments", "positionalArguments$0", 1, [], []));
},
 get$currentManagerId: function() {
  return this.noSuchMethod$1($.createInvocationMirror("currentManagerId", "currentManagerId$0", 1, [], []));
},
 get$isGetter: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isGetter", "isGetter$0", 1, [], []));
},
 get$connectionId: function() {
  return this.noSuchMethod$1($.createInvocationMirror("connectionId", "connectionId$0", 1, [], []));
},
 get$_filtered: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_filtered", "_filtered$0", 1, [], []));
},
 get$message: function() {
  return this.noSuchMethod$1($.createInvocationMirror("message", "message$0", 1, [], []));
},
 get$_next: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_next", "_next$0", 1, [], []));
},
 get$pattern: function() {
  return this.noSuchMethod$1($.createInvocationMirror("pattern", "pattern$0", 1, [], []));
},
 get$sendPort: function() {
  return this.noSuchMethod$1($.createInvocationMirror("sendPort", "sendPort$0", 1, [], []));
},
 get$_portId: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_portId", "_portId$0", 1, [], []));
},
 get$fromCommandLine: function() {
  return this.noSuchMethod$1($.createInvocationMirror("fromCommandLine", "fromCommandLine$0", 1, [], []));
},
 get$_futurePort: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_futurePort", "_futurePort$0", 1, [], []));
},
 get$children: function() {
  return this.noSuchMethod$1($.createInvocationMirror("children", "children$0", 1, [], []));
},
 get$on: function() {
  return this.noSuchMethod$1($.createInvocationMirror("on", "on$0", 1, [], []));
},
 get$ignoreCase: function() {
  return this.noSuchMethod$1($.createInvocationMirror("ignoreCase", "ignoreCase$0", 1, [], []));
},
 get$fullName: function() {
  return this.noSuchMethod$1($.createInvocationMirror("fullName", "fullName$0", 1, [], []));
},
 get$serial: function() {
  return this.noSuchMethod$1($.createInvocationMirror("serial", "serial$0", 1, [], []));
},
 get$element: function() {
  return this.noSuchMethod$1($.createInvocationMirror("element", "element$0", 1, [], []));
},
 get$_registry: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_registry", "_registry$0", 1, [], []));
},
 get$charCodes: function() {
  return this.noSuchMethod$1($.createInvocationMirror("charCodes", "charCodes$0", 1, [], []));
},
 get$level: function() {
  return this.noSuchMethod$1($.createInvocationMirror("level", "level$0", 1, [], []));
},
 get$attributes: function() {
  return this.noSuchMethod$1($.createInvocationMirror("attributes", "attributes$0", 1, [], []));
},
 get$dataRead: function() {
  return this.noSuchMethod$1($.createInvocationMirror("dataRead", "dataRead$0", 1, [], []));
},
 get$$$dom_namespaceUri: function() {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_namespaceUri", "$$dom_namespaceUri$0", 1, [], []));
},
 get$multiLine: function() {
  return this.noSuchMethod$1($.createInvocationMirror("multiLine", "multiLine$0", 1, [], []));
},
 get$onWrite: function() {
  return this.noSuchMethod$1($.createInvocationMirror("onWrite", "onWrite$0", 1, [], []));
},
 get$topEventLoop: function() {
  return this.noSuchMethod$1($.createInvocationMirror("topEventLoop", "topEventLoop$0", 1, [], []));
},
 get$body: function() {
  return this.noSuchMethod$1($.createInvocationMirror("body", "body$0", 1, [], []));
},
 get$$$dom_localName: function() {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_localName", "$$dom_localName$0", 1, [], []));
},
 get$_scopeIndices: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_scopeIndices", "_scopeIndices$0", 1, [], []));
},
 get$_keys: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_keys", "_keys$0", 1, [], []));
},
 get$documentElement: function() {
  return this.noSuchMethod$1($.createInvocationMirror("documentElement", "documentElement$0", 1, [], []));
},
 get$detail: function() {
  return this.noSuchMethod$1($.createInvocationMirror("detail", "detail$0", 1, [], []));
},
 get$$$dom_childNodes: function() {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_childNodes", "$$dom_childNodes$0", 1, [], []));
},
 get$_listenerName: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_listenerName", "_listenerName$0", 1, [], []));
},
 get$isComplete: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isComplete", "isComplete$0", 1, [], []));
},
 get$managers: function() {
  return this.noSuchMethod$1($.createInvocationMirror("managers", "managers$0", 1, [], []));
},
 get$scrollHeight: function() {
  return this.noSuchMethod$1($.createInvocationMirror("scrollHeight", "scrollHeight$0", 1, [], []));
},
 get$nextIsolateId: function() {
  return this.noSuchMethod$1($.createInvocationMirror("nextIsolateId", "nextIsolateId$0", 1, [], []));
},
 get$millisecondsSinceEpoch: function() {
  return this.noSuchMethod$1($.createInvocationMirror("millisecondsSinceEpoch", "millisecondsSinceEpoch$0", 1, [], []));
},
 get$isEmpty: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isEmpty", "isEmpty$0", 1, [], []));
},
 get$currentContext: function() {
  return this.noSuchMethod$1($.createInvocationMirror("currentContext", "currentContext$0", 1, [], []));
},
 get$_liblib2$_receivePort: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_receivePort", "_liblib2$_receivePort$0", 1, [], []));
},
 get$closeCallback: function() {
  return this.noSuchMethod$1($.createInvocationMirror("closeCallback", "closeCallback$0", 1, [], []));
},
 get$_port: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_port", "_port$0", 1, [], []));
},
 get$isolates: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isolates", "isolates$0", 1, [], []));
},
 get$needSerialization: function() {
  return this.noSuchMethod$1($.createInvocationMirror("needSerialization", "needSerialization$0", 1, [], []));
},
 get$$$dom_lastElementChild: function() {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_lastElementChild", "$$dom_lastElementChild$0", 1, [], []));
},
 get$openInfo: function() {
  return this.noSuchMethod$1($.createInvocationMirror("openInfo", "openInfo$0", 1, [], []));
},
 get$_liblib2$_callback: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_callback", "_liblib2$_callback$0", 1, [], []));
},
 get$$$dom_firstElementChild: function() {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_firstElementChild", "$$dom_firstElementChild$0", 1, [], []));
},
 get$$$dom_body: function() {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_body", "$$dom_body$0", 1, [], []));
},
 get$ports: function() {
  return this.noSuchMethod$1($.createInvocationMirror("ports", "ports$0", 1, [], []));
},
 get$bytesRead: function() {
  return this.noSuchMethod$1($.createInvocationMirror("bytesRead", "bytesRead$0", 1, [], []));
},
 get$nodes: function() {
  return this.noSuchMethod$1($.createInvocationMirror("nodes", "nodes$0", 1, [], []));
},
 get$_tag: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_tag", "_tag$0", 1, [], []));
},
 get$_liblib2$_isolateId: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_isolateId", "_liblib2$_isolateId$0", 1, [], []));
},
 get$stackTrace: function() {
  return this.noSuchMethod$1($.createInvocationMirror("stackTrace", "stackTrace$0", 1, [], []));
},
 get$navigator: function() {
  return this.noSuchMethod$1($.createInvocationMirror("navigator", "navigator$0", 1, [], []));
},
 get$isSetter: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isSetter", "isSetter$0", 1, [], []));
},
 get$_workerId: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_workerId", "_workerId$0", 1, [], []));
},
 get$_serialized: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_serialized", "_serialized$0", 1, [], []));
},
 set$nextIsolateId: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("nextIsolateId=", "nextIsolateId=$1", 2, [$0], []));
},
 set$openInfoCallback: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("openInfoCallback=", "openInfoCallback=$1", 2, [$0], []));
},
 set$scrollTop: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("scrollTop=", "scrollTop=$1", 2, [$0], []));
},
 set$_previous: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_previous=", "_previous=$1", 2, [$0], []));
},
 set$writeCallback: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("writeCallback=", "writeCallback=$1", 2, [$0], []));
},
 set$currentContext: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("currentContext=", "currentContext=$1", 2, [$0], []));
},
 set$text: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("text=", "text=$1", 2, [$0], []));
},
 set$rootContext: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("rootContext=", "rootContext=$1", 2, [$0], []));
},
 set$innerHtml: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("innerHtml=", "innerHtml=$1", 2, [$0], []));
},
 set$innerHTML: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("innerHTML=", "innerHTML=$1", 2, [$0], []));
},
 set$value: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("value=", "value=$1", 2, [$0], []));
},
 set$openInfo: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("openInfo=", "openInfo=$1", 2, [$0], []));
},
 set$onRead: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("onRead=", "onRead=$1", 2, [$0], []));
},
 set$_onCharRead: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_onCharRead=", "_onCharRead=$1", 2, [$0], []));
},
 set$_next: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_next=", "_next=$1", 2, [$0], []));
},
 set$level: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("level=", "level=$1", 2, [$0], []));
},
 set$length: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("length=", "length=$1", 2, [$0], []));
},
 set$callback: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("callback=", "callback=$1", 2, [$0], []));
},
 set$type: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("type=", "type=$1", 2, [$0], []));
},
 set$dataRead: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("dataRead=", "dataRead=$1", 2, [$0], []));
},
 set$closeCallback: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("closeCallback=", "closeCallback=$1", 2, [$0], []));
}
};

$$.DoubleLinkedQueueEntry = {'': function DoubleLinkedQueueEntry(_previous, _next, _element) {
  this._previous = _previous;
  this._next = _next;
  this._element = _element;
},
 'super': 'Object',
 get$_previous: function() { return this._previous; },
 set$_previous: function(v) { this._previous = v; },
 get$_next: function() { return this._next; },
 set$_next: function(v) { this._next = v; },
 get$_element: function() { return this._element; },
 _link$2: function(p, n) {
  this._next = n;
  this._previous = p;
  p.set$_next(this);
  n.set$_previous(this);
},
 append$1: function(e) {
  $.DoubleLinkedQueueEntry$(e, $.getRuntimeTypeInfo(this)[0])._link$2(this, this._next);
},
 prepend$1: function(e) {
  $.DoubleLinkedQueueEntry$(e, $.getRuntimeTypeInfo(this)[0])._link$2(this._previous, this);
},
 remove$0: function() {
  var t1 = this._next;
  this._previous.set$_next(t1);
  t1 = this._previous;
  this._next.set$_previous(t1);
  this._next = null;
  this._previous = null;
  return this._element;
},
 _asNonSentinelEntry$0: function() {
  return this;
},
 previousEntry$0: function() {
  return this._previous._asNonSentinelEntry$0();
},
 get$element: function() {
  return this._element;
},
 DoubleLinkedQueueEntry$1: function(e) {
  this._element = e;
}
};

$$._DoubleLinkedQueueEntrySentinel = {'': function _DoubleLinkedQueueEntrySentinel(_previous, _next, _element) {
  this._previous = _previous;
  this._next = _next;
  this._element = _element;
},
 'super': 'DoubleLinkedQueueEntry',
 remove$0: function() {
  throw $.$$throw($.StateError$("Empty queue"));
},
 _asNonSentinelEntry$0: function() {
  return;
},
 get$element: function() {
  throw $.$$throw($.StateError$("Empty queue"));
},
 _DoubleLinkedQueueEntrySentinel$0: function() {
  this._link$2(this, this);
}
};

$$.DoubleLinkedQueue = {'': function DoubleLinkedQueue(_sentinel) {
  this._sentinel = _sentinel;
},
 'super': 'Object',
 addLast$1: function(value) {
  this._sentinel.prepend$1(value);
},
 add$1: function(value) {
  this._sentinel.prepend$1(value);
},
 addAll$1: function(collection) {
  var t1, t2;
  for (t1 = $.getInterceptor$JSArray(collection).iterator$0(collection); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    this._sentinel.prepend$1(t2);
  }
},
 removeLast$0: function() {
  return this._sentinel.get$_previous().remove$0();
},
 removeFirst$0: function() {
  return this._sentinel.get$_next().remove$0();
},
 get$last: function() {
  return this._sentinel.get$_previous().get$element();
},
 lastEntry$0: function() {
  return this._sentinel.previousEntry$0();
},
 get$length: function() {
  var t1 = {};
  t1.counter_0 = 0;
  this.forEach$1(new $.DoubleLinkedQueue_length_anon(t1));
  return t1.counter_0;
},
 get$isEmpty: function() {
  var t1, t2;
  t1 = this._sentinel;
  t2 = t1.get$_next();
  return t2 == null ? t1 == null : t2 === t1;
},
 clear$0: function() {
  var t1 = this._sentinel;
  t1.set$_next(t1);
  t1 = this._sentinel;
  t1.set$_previous(t1);
},
 forEach$1: function(f) {
  var entry, t1, nextEntry;
  entry = this._sentinel.get$_next();
  for (; t1 = this._sentinel, !(entry == null ? t1 == null : entry === t1); entry = nextEntry) {
    nextEntry = entry.get$_next();
    f.call$1(entry.get$_element());
  }
},
 map$1: function(f) {
  var other, entry, t1, t2, nextEntry;
  other = $.Queue_Queue();
  entry = this._sentinel.get$_next();
  for (t1 = $.getInterceptor$JSArray(other); t2 = this._sentinel, !(entry == null ? t2 == null : entry === t2); entry = nextEntry) {
    nextEntry = entry.get$_next();
    t1.addLast$1(other, f.call$1(entry.get$_element()));
  }
  return other;
},
 filter$1: function(f) {
  var other, entry, t1, t2, nextEntry;
  other = $.Queue_Queue($.getRuntimeTypeInfo(this)[0]);
  entry = this._sentinel.get$_next();
  for (t1 = $.getInterceptor$JSArray(other); t2 = this._sentinel, !(entry == null ? t2 == null : entry === t2); entry = nextEntry) {
    nextEntry = entry.get$_next();
    if (f.call$1(entry.get$_element()) === true)
      t1.addLast$1(other, entry.get$_element());
  }
  return other;
},
 iterator$0: function() {
  return $._DoubleLinkedQueueIterator$(this._sentinel, $.getRuntimeTypeInfo(this)[0]);
},
 toString$0: function() {
  return $.Collections_collectionToString(this);
},
 DoubleLinkedQueue$0: function() {
  this._sentinel = $._DoubleLinkedQueueEntrySentinel$($.getRuntimeTypeInfo(this)[0]);
},
 is$Collection: function() { return true; }
};

$$._DoubleLinkedQueueIterator = {'': function _DoubleLinkedQueueIterator(_sentinel, _currentEntry) {
  this._sentinel = _sentinel;
  this._currentEntry = _currentEntry;
},
 'super': 'Object',
 get$hasNext: function() {
  var t1, t2;
  t1 = this._currentEntry.get$_next();
  t2 = this._sentinel;
  return !(t1 == null ? t2 == null : t1 === t2);
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$("No more elements"));
  this._currentEntry = this._currentEntry.get$_next();
  return this._currentEntry.get$element();
},
 _DoubleLinkedQueueIterator$1: function(_sentinel) {
  this._currentEntry = this._sentinel;
}
};

$$._HashSetImpl = {'': function _HashSetImpl(_backingMap) {
  this._backingMap = _backingMap;
},
 'super': 'Object',
 get$_backingMap: function() { return this._backingMap; },
 clear$0: function() {
  var t1 = this._backingMap;
  $.getInterceptor$JSArray(t1).clear$0(t1);
},
 add$1: function(value) {
  var t1 = this._backingMap;
  if (typeof t1 !== 'object' || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
    return this.add$1$bailout1(1, t1, value);
  if (value !== (value | 0))
    throw $.iae(value);
  if (value < 0 || value >= t1.length)
    throw $.ioore(value);
  t1[value] = value;
},
 add$1$bailout1: function(state0, t1, value) {
  $.indexSet(t1, value, value);
},
 contains$1: function(value) {
  return this._backingMap.containsKey$1(value);
},
 remove$1: function(value) {
  if (this._backingMap.containsKey$1(value) !== true)
    return false;
  this._backingMap.remove$1(value);
  return true;
},
 addAll$1: function(collection) {
  $.getInterceptor$JSArray(collection).forEach$1(collection, new $._HashSetImpl_addAll_anon(this));
},
 forEach$1: function(f) {
  var t1 = this._backingMap;
  $.getInterceptor$JSArray(t1).forEach$1(t1, new $._HashSetImpl_forEach_anon(f));
},
 map$1: function(f) {
  var result, t1;
  result = $.Set_Set();
  t1 = this._backingMap;
  $.getInterceptor$JSArray(t1).forEach$1(t1, new $._HashSetImpl_map_anon(result, f));
  return result;
},
 filter$1: function(f) {
  var result, t1;
  result = $.Set_Set($.getRuntimeTypeInfo(this)[0]);
  t1 = this._backingMap;
  $.getInterceptor$JSArray(t1).forEach$1(t1, new $._HashSetImpl_filter_anon(f, result));
  return result;
},
 get$isEmpty: function() {
  var t1 = this._backingMap;
  return $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1);
},
 get$length: function() {
  var t1 = this._backingMap;
  return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
},
 iterator$0: function() {
  return $._HashSetIterator$(this, $.getRuntimeTypeInfo(this)[0]);
},
 toString$0: function() {
  return $.Collections_collectionToString(this);
},
 _HashSetImpl$0: function() {
  this._backingMap = $._HashMapImpl$($.getRuntimeTypeInfo(this)[0], $.getRuntimeTypeInfo(this)[0]);
},
 is$Collection: function() { return true; }
};

$$._HashSetIterator = {'': function _HashSetIterator(_entries, _nextValidIndex) {
  this._entries = _entries;
  this._nextValidIndex = _nextValidIndex;
},
 'super': 'Object',
 get$hasNext: function() {
  var t1, t2, t3;
  t1 = this._nextValidIndex;
  t2 = this._entries;
  t3 = $.getInterceptor$JSStringJSArray(t2);
  if ($.geB(t1, t3.get$length(t2)))
    return false;
  if (t3.operator$index$1(t2, this._nextValidIndex) === $.CONSTANT4)
    this._advance$0();
  return $.lt(this._nextValidIndex, t3.get$length(t2));
},
 next$0: function() {
  var t1, t3, res;
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$("No more elements"));
  t1 = this._entries;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.next$0$bailout2(1, t1);
  t3 = this._nextValidIndex;
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  res = t1[t3];
  this._advance$0();
  return res;
},
 next$0$bailout2: function(state0, t1) {
  var res = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, this._nextValidIndex);
  this._advance$0();
  return res;
},
 _advance$0: function() {
  var t1, t3, length$, t2, entry;
  t1 = this._entries;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this._advance$0$bailout(1, t1);
  t3 = $.getInterceptor$JSStringJSArray(t1);
  length$ = t1.length;
  do {
    t2 = this._nextValidIndex + 1;
    this._nextValidIndex = t2;
    if (t2 >= length$)
      break;
    t2 = this._nextValidIndex;
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    entry = t1[t2];
  } while (entry == null || entry === $.CONSTANT4);
},
 _advance$0$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      length$ = env2;
      t3 = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this._entries;
    case 1:
      state0 = 0;
      t3 = $.getInterceptor$JSStringJSArray(t1);
      length$ = t3.get$length(t1);
    case 2:
      var t1, t3, length$, t2, entry;
      state0 = 0;
      do {
        t2 = this._nextValidIndex + 1;
        this._nextValidIndex = t2;
        if ($.geB(t2, length$))
          break;
        entry = t3.operator$index$1(t1, this._nextValidIndex);
      } while (entry == null || entry === $.CONSTANT4);
  }
},
 _HashSetIterator$1: function(set_) {
  this._advance$0();
}
};

$$._StringBufferImpl = {'': function _StringBufferImpl(_buffer, _length) {
  this._buffer = _buffer;
  this._length = _length;
},
 'super': 'Object',
 get$length: function() {
  return this._length;
},
 get$isEmpty: function() {
  return $.eq(this._length, 0);
},
 add$1: function(obj) {
  var str, t1, t3;
  str = $.getInterceptor(obj).toString$0(obj);
  if (str == null || $.getInterceptor$JSStringJSArray(str).get$isEmpty(str) === true)
    return this;
  t1 = this._buffer;
  $.getInterceptor$JSArray(t1).add$1(t1, str);
  t1 = this._length;
  if (typeof t1 !== 'number')
    return this.add$1$bailout(1, str, t1);
  t3 = $.getInterceptor$JSStringJSArray(str).get$length(str);
  if (typeof t3 !== 'number')
    return this.add$1$bailout(2, t3, t1);
  this._length = t1 + t3;
  return this;
},
 add$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env1;
      str = env0;
      break;
    case 2:
      t1 = env1;
      t3 = env0;
      break;
  }
  switch (state0) {
    case 0:
      str = $.getInterceptor(obj).toString$0(obj);
      if (str == null || $.getInterceptor$JSStringJSArray(str).get$isEmpty(str) === true)
        return this;
      t1 = this._buffer;
      $.getInterceptor$JSArray(t1).add$1(t1, str);
      t1 = this._length;
    case 1:
      state0 = 0;
      t3 = $.getInterceptor$JSStringJSArray(str).get$length(str);
    case 2:
      var str, t1, t3;
      state0 = 0;
      this._length = $.add(t1, t3);
      return this;
  }
},
 addAll$1: function(objects) {
  var t1;
  for (t1 = $.getInterceptor$JSArray(objects).iterator$0(objects); t1.get$hasNext() === true;)
    this.add$1(t1.next$0());
  return this;
},
 clear$0: function() {
  var t1 = $.List_List(null, $.String);
  $.setRuntimeTypeInfo(t1, [$.String]);
  this._buffer = t1;
  this._length = 0;
  return this;
},
 toString$0: function() {
  var t1, result;
  t1 = this._buffer;
  if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 0))
    return "";
  t1 = this._buffer;
  if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 1)) {
    t1 = this._buffer;
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, 0);
  }
  result = $.stringJoinUnchecked($.Strings__toJsStringArray(this._buffer), "");
  t1 = this._buffer;
  $.getInterceptor$JSArray(t1).clear$0(t1);
  t1 = this._buffer;
  $.getInterceptor$JSArray(t1).add$1(t1, result);
  return result;
},
 _StringBufferImpl$1: function(content$) {
  this.clear$0();
  this.add$1(content$);
}
};

$$.ObjectInterceptor = {'': function ObjectInterceptor() {
},
 'super': 'Object',
 toString$0: function(receiver) {
  return receiver.toString$0();
},
 add$1: function(receiver, a0) {
  return receiver.add$1(a0);
},
 substring$1: function(receiver, a0) {
  return receiver.substring$1(a0);
},
 iterator$0: function(receiver) {
  return receiver.iterator$0();
},
 charCodeAt$1: function(receiver, a0) {
  return receiver.charCodeAt$1(a0);
},
 replaceAll$2: function(receiver, a0, a1) {
  return receiver.replaceAll$2(a0, a1);
},
 removeLast$0: function(receiver) {
  return receiver.removeLast$0();
},
 operator$index$1: function(receiver, a0) {
  return receiver.operator$index$1(a0);
},
 substring$2: function(receiver, a0, a1) {
  return receiver.substring$2(a0, a1);
},
 indexOf$1: function(receiver, a0) {
  return receiver.indexOf$1(a0);
},
 get$length: function(receiver) {
  return receiver.get$length();
},
 set$length: function(receiver, value) {
  return receiver.set$length(value);
},
 contains$2: function(receiver, a0, a1) {
  return receiver.contains$2(a0, a1);
},
 get$hashCode: function(receiver) {
  return receiver.get$hashCode();
},
 truncate$0: function(receiver) {
  return receiver.truncate$0();
},
 endsWith$1: function(receiver, a0) {
  return receiver.endsWith$1(a0);
},
 indexOf$2: function(receiver, a0, a1) {
  return receiver.indexOf$2(a0, a1);
},
 floor$0: function(receiver) {
  return receiver.floor$0();
},
 forEach$1: function(receiver, a0) {
  return receiver.forEach$1(a0);
},
 lastIndexOf$2: function(receiver, a0, a1) {
  return receiver.lastIndexOf$2(a0, a1);
},
 abs$0: function(receiver) {
  return receiver.abs$0();
},
 map$1: function(receiver, a0) {
  return receiver.map$1(a0);
},
 get$isNaN: function(receiver) {
  return receiver.get$isNaN();
},
 clear$0: function(receiver) {
  return receiver.clear$0();
},
 startsWith$1: function(receiver, a0) {
  return receiver.startsWith$1(a0);
},
 getRange$2: function(receiver, a0, a1) {
  return receiver.getRange$2(a0, a1);
},
 get$isEmpty: function(receiver) {
  return receiver.get$isEmpty();
},
 lastIndexOf$1: function(receiver, a0) {
  return receiver.lastIndexOf$1(a0);
},
 removeRange$2: function(receiver, a0, a1) {
  return receiver.removeRange$2(a0, a1);
},
 get$charCodes: function(receiver) {
  return receiver.get$charCodes();
},
 allMatches$1: function(receiver, a0) {
  return receiver.allMatches$1(a0);
},
 get$runtimeType: function(receiver) {
  return receiver.get$runtimeType();
},
 concat$1: function(receiver, a0) {
  return receiver.concat$1(a0);
},
 ceil$0: function(receiver) {
  return receiver.ceil$0();
},
 addLast$1: function(receiver, a0) {
  return receiver.addLast$1(a0);
},
 get$last: function(receiver) {
  return receiver.get$last();
},
 filter$1: function(receiver, a0) {
  return receiver.filter$1(a0);
},
 contains$1: function(receiver, a0) {
  return receiver.contains$1(a0);
},
 addAll$1: function(receiver, a0) {
  return receiver.addAll$1(a0);
}
};

$$.JSFunction = {'': function JSFunction() {
},
 'super': 'Object',
 toString$0: function(receiver) {
  return "Closure";
},
 is$Function: true
};

$$.JSBool = {'': function JSBool() {
},
 'super': 'Object',
 toString$0: function(receiver) {
  return String(receiver);
},
 get$hashCode: function(receiver) {
  return receiver ? 519018 : 218159;
},
 get$runtimeType: function(receiver) {
  return $.CONSTANT11;
},
 is$bool: true
};

$$.JSNull = {'': function JSNull() {
},
 'super': 'Object',
 toString$0: function(receiver) {
  return "null";
},
 get$hashCode: function(receiver) {
  return 0;
},
 get$runtimeType: function(receiver) {
  return $.createRuntimeType("Null");
}
};

$$.JSArray = {'': function JSArray() {
},
 'super': 'Object',
 add$1: function(receiver, value) {
  $.checkGrowable(receiver, "add");
  receiver.push(value);
},
 removeLast$0: function(receiver) {
  $.checkGrowable(receiver, "removeLast");
  if (receiver.length === 0)
    throw $.$$throw($.RangeError$value(-1));
  return receiver.pop();
},
 filter$1: function(receiver, f) {
  return $.Collections_filter(receiver, [], f);
},
 addAll$1: function(receiver, collection) {
  var t1;
  for (t1 = $.getInterceptor$JSArray(collection).iterator$0(collection); t1.get$hasNext() === true;)
    $.CONSTANT2.add$1(receiver, t1.next$0());
},
 addLast$1: function(receiver, value) {
  $.checkGrowable(receiver, "addLast");
  receiver.push(value);
},
 clear$0: function(receiver) {
  this.set$length(receiver, 0);
},
 forEach$1: function(receiver, f) {
  return $.Collections_forEach(receiver, f);
},
 map$1: function(receiver, f) {
  return $.Collections_map(receiver, [], f);
},
 getRange$2: function(receiver, start, length$) {
  var t1, end;
  if (0 === length$)
    return [];
  $.checkNull(start);
  $.checkNull(length$);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$))
    throw $.$$throw($.ArgumentError$(length$));
  t1 = length$ < 0;
  if (t1)
    throw $.$$throw($.ArgumentError$(length$));
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  end = start + length$;
  if (end > receiver.length)
    throw $.$$throw($.RangeError$value(length$));
  if (t1)
    throw $.$$throw($.ArgumentError$(length$));
  return receiver.slice(start, end);
},
 get$last: function(receiver) {
  var t1, t2;
  t1 = receiver.length;
  t2 = t1 - 1;
  if (t2 < 0)
    throw $.ioore(t2);
  return receiver[t2];
},
 removeRange$2: function(receiver, start, length$) {
  var receiverLength, t1, t2;
  $.checkGrowable(receiver, "removeRange");
  if ($.eqB(length$, 0))
    return;
  $.checkNull(start);
  $.checkNull(length$);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$))
    throw $.$$throw($.ArgumentError$(length$));
  if (length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  receiverLength = receiver.length;
  if (start < 0 || start >= receiverLength)
    throw $.$$throw($.RangeError$value(start));
  t1 = start + length$;
  if (t1 > receiverLength)
    throw $.$$throw($.RangeError$value(t1));
  t2 = receiverLength - length$;
  $.Arrays_copy(receiver, t1, receiver, start, t2 - start);
  $.CONSTANT2.set$length(receiver, t2);
},
 indexOf$2: function(receiver, element, start) {
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  return $.Arrays_indexOf(receiver, element, start, receiver.length);
},
 indexOf$1: function($receiver, element) {
  return this.indexOf$2($receiver, element, 0);
},
 lastIndexOf$2: function(receiver, element, start) {
  if (start == null)
    start = receiver.length - 1;
  return $.Arrays_lastIndexOf(receiver, element, start);
},
 lastIndexOf$1: function($receiver, element) {
  return this.lastIndexOf$2($receiver, element, null);
},
 contains$1: function(receiver, other) {
  var i;
  for (i = 0; i < receiver.length; ++i)
    if ($.eqB(other, receiver[i]))
      return true;
  return false;
},
 get$isEmpty: function(receiver) {
  return receiver.length === 0;
},
 toString$0: function(receiver) {
  return $.Collections_collectionToString(receiver);
},
 iterator$0: function(receiver) {
  return $.ListIterator$(receiver);
},
 get$hashCode: function(receiver) {
  return $.Primitives_objectHashCode(receiver);
},
 get$runtimeType: function(receiver) {
  return $.TypeImpl$($.getRuntimeTypeString(receiver));
},
 get$length: function(receiver) {
  return receiver.length;
},
 set$length: function(receiver, newLength) {
  if (!(typeof newLength === 'number' && Math.floor(newLength) === newLength))
    throw $.$$throw($.ArgumentError$(newLength));
  if (newLength < 0)
    throw $.$$throw($.RangeError$value(newLength));
  $.checkGrowable(receiver, "set length");
  receiver.length = newLength;
},
 operator$index$1: function(receiver, index) {
  if (!(typeof index === 'number' && Math.floor(index) === index))
    throw $.$$throw($.ArgumentError$(index));
  if (index >= receiver.length || index < 0)
    throw $.$$throw($.RangeError$value(index));
  return receiver[index];
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$.JSNumber = {'': function JSNumber() {
},
 'super': 'Object',
 get$isNaN: function(receiver) {
  return isNaN(receiver);
},
 abs$0: function(receiver) {
  return Math.abs(receiver);
},
 ceil$0: function(receiver) {
  return Math.ceil(receiver);
},
 floor$0: function(receiver) {
  return Math.floor(receiver);
},
 truncate$0: function(receiver) {
  return receiver < 0 ? this.ceil$0(receiver) : this.floor$0(receiver);
},
 toString$0: function(receiver) {
  if (receiver === 0 && (1 / receiver) < 0)
    return "-0.0";
  else
    return String(receiver);
},
 get$hashCode: function(receiver) {
  return receiver & 536870911;
}
};

$$.JSInt = {'': function JSInt() {
},
 'super': 'JSNumber',
 get$runtimeType: function(receiver) {
  return $.CONSTANT9;
}
};

$$.JSDouble = {'': function JSDouble() {
},
 'super': 'JSNumber',
 get$runtimeType: function(receiver) {
  return $.CONSTANT10;
}
};

$$.JSString = {'': function JSString() {
},
 'super': 'Object',
 charCodeAt$1: function(receiver, index) {
  if (!(typeof index === 'number'))
    throw $.$$throw($.ArgumentError$(index));
  if (index < 0)
    throw $.$$throw($.RangeError$value(index));
  if (index >= receiver.length)
    throw $.$$throw($.RangeError$value(index));
  return receiver.charCodeAt(index);
},
 allMatches$1: function(receiver, str) {
  $.checkString(str);
  return $.allMatchesInStringUnchecked(receiver, str);
},
 concat$1: function(receiver, other) {
  return receiver + other;
},
 endsWith$1: function(receiver, other) {
  var otherLength, t1;
  $.checkString(other);
  otherLength = other.length;
  t1 = receiver.length;
  if (otherLength > t1)
    return false;
  return other === this.substring$1(receiver, t1 - otherLength);
},
 replaceAll$2: function(receiver, from, to) {
  $.checkString(to);
  return $.stringReplaceAllUnchecked(receiver, from, to);
},
 startsWith$1: function(receiver, other) {
  var otherLength;
  $.checkString(other);
  otherLength = other.length;
  if (otherLength > receiver.length)
    return false;
  return other == receiver.substring(0, otherLength);
},
 substring$2: function(receiver, startIndex, endIndex) {
  $.checkNum(startIndex);
  if (endIndex == null)
    endIndex = receiver.length;
  $.checkNum(endIndex);
  if ($.ltB(startIndex, 0))
    throw $.$$throw($.RangeError$value(startIndex));
  if ($.gtB(startIndex, endIndex))
    throw $.$$throw($.RangeError$value(startIndex));
  if ($.gtB(endIndex, receiver.length))
    throw $.$$throw($.RangeError$value(endIndex));
  return receiver.substring(startIndex, endIndex);
},
 substring$1: function($receiver, startIndex) {
  return this.substring$2($receiver, startIndex, null);
},
 get$charCodes: function(receiver) {
  var t1, result, i, t2;
  t1 = receiver.length;
  result = $.List_List(t1, $.$int);
  $.setRuntimeTypeInfo(result, [$.$int]);
  for (i = 0; i < t1; ++i) {
    t2 = receiver.charCodeAt(i);
    if (i >= result.length)
      throw $.ioore(i);
    result[i] = t2;
  }
  return result;
},
 indexOf$2: function(receiver, other, start) {
  $.checkNull(other);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  if (!(typeof other === 'string'))
    throw $.$$throw($.ArgumentError$(other));
  if (start < 0)
    return -1;
  return receiver.indexOf(other, start);
},
 indexOf$1: function($receiver, other) {
  return this.indexOf$2($receiver, other, 0);
},
 lastIndexOf$2: function(receiver, other, start) {
  var t1;
  $.checkNull(other);
  if (!(typeof other === 'string'))
    throw $.$$throw($.ArgumentError$(other));
  if (!(start == null)) {
    if (!(typeof start === 'number'))
      throw $.$$throw($.ArgumentError$(start));
    if (start < 0)
      return -1;
    t1 = receiver.length;
    if (start >= t1) {
      if (other === "")
        return t1;
      start = t1 - 1;
    } else
      start = start;
  } else
    start = receiver.length - 1;
  return $.stringLastIndexOfUnchecked(receiver, other, start);
},
 lastIndexOf$1: function($receiver, other) {
  return this.lastIndexOf$2($receiver, other, null);
},
 contains$2: function(receiver, other, startIndex) {
  $.checkNull(other);
  return $.stringContainsUnchecked(receiver, other, startIndex);
},
 contains$1: function($receiver, other) {
  return this.contains$2($receiver, other, 0);
},
 get$isEmpty: function(receiver) {
  return receiver.length === 0;
},
 toString$0: function(receiver) {
  return receiver;
},
 get$hashCode: function(receiver) {
  var i, hash, hash0, hash1;
  for (i = 0, hash = 0; i < receiver.length; ++i, hash = hash1) {
    hash0 = 536870911 & hash + receiver.charCodeAt(i);
    hash1 = 536870911 & hash0 + ((524287 & hash0) << 10 >>> 0);
    hash1 = hash1 ^ (hash1 >> 6);
  }
  hash0 = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash0 = hash0 ^ (hash0 >> 11);
  return 536870911 & hash0 + ((16383 & hash0) << 15 >>> 0);
},
 get$runtimeType: function(receiver) {
  return $.CONSTANT8;
},
 get$length: function(receiver) {
  return receiver.length;
},
 operator$index$1: function(receiver, index) {
  if (!(typeof index === 'number' && Math.floor(index) === index))
    throw $.$$throw($.ArgumentError$(index));
  if (index >= receiver.length || index < 0)
    throw $.$$throw($.RangeError$value(index));
  return receiver[index];
},
 is$String: true
};

$$.AbstractWorkerEvents = {'': function AbstractWorkerEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'Events'
};

$$.ApplicationCacheEvents = {'': function ApplicationCacheEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'Events'
};

$$.BatteryManagerEvents = {'': function BatteryManagerEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'Events'
};

$$.BodyElementEvents = {'': function BodyElementEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'ElementEvents',
 get$message: function() {
  return this.operator$index$1("message");
}
};

$$.DedicatedWorkerContextEvents = {'': function DedicatedWorkerContextEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'WorkerContextEvents',
 get$message: function() {
  return this.operator$index$1("message");
}
};

$$.DocumentEvents = {'': function DocumentEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'ElementEvents'
};

$$._ChildrenElementList = {'': function _ChildrenElementList(_liblib$_element, _childElements) {
  this._liblib$_element = _liblib$_element;
  this._childElements = _childElements;
},
 'super': 'Object',
 get$_liblib$_element: function() { return this._liblib$_element; },
 _toList$0: function() {
  var t1, t3, t4, output, len, i, t2;
  t1 = this._childElements;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this._toList$0$bailout(1, t1);
  t3 = $.getInterceptor$JSStringJSArray(t1);
  t4 = t1.length;
  output = $.List_List(t4);
  $.setRuntimeTypeInfo(output, []);
  len = t1.length;
  i = 0;
  for (; i < len; ++i) {
    t2 = t1[i];
    if (i >= t4)
      throw $.ioore(i);
    output[i] = t2;
  }
  return output;
},
 _toList$0$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      len = env3;
      output = env2;
      t3 = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this._childElements;
    case 1:
      state0 = 0;
      t3 = $.getInterceptor$JSStringJSArray(t1);
      output = $.List_List(t3.get$length(t1));
      $.setRuntimeTypeInfo(output, []);
      len = t3.get$length(t1);
    case 2:
      var t1, t3, output, len, i, t2;
      state0 = 0;
      i = 0;
      for (; $.ltB(i, len); ++i) {
        t2 = t3.operator$index$1(t1, i);
        if (i >= output.length)
          throw $.ioore(i);
        output[i] = t2;
      }
      return output;
  }
},
 contains$1: function(element) {
  var t1 = this._childElements;
  return $.getInterceptor$JSStringJSArray(t1).contains$1(t1, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this._childElements, t1 = $.getInterceptor$JSArray(t1).iterator$0(t1); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
},
 filter$1: function(f) {
  var output, t1, t2;
  output = [];
  t1 = new $._ChildrenElementList_filter_anon(output, f);
  for (t2 = this._childElements, t2 = $.getInterceptor$JSArray(t2).iterator$0(t2); t2.get$hasNext() === true;)
    t1.call$1(t2.next$0());
  return $._FrozenElementList$_wrap(output);
},
 map$1: function(f) {
  var out, t1;
  out = [];
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    out.push(f.call$1(t1.next$0()));
  return out;
},
 get$isEmpty: function() {
  return this._liblib$_element.firstElementChild == null;
},
 get$length: function() {
  var t1 = this._childElements;
  return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
},
 operator$index$1: function(index) {
  var t1 = this._childElements;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.operator$index$1$bailout0(1, t1, index);
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  return t1[index];
},
 operator$index$1$bailout0: function(state0, t1, index) {
  return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index);
},
 operator$indexSet$2: function(index, value) {
  var t1, t2;
  t1 = this._liblib$_element;
  t2 = this._childElements;
  t1.$$dom_replaceChild$2(value, $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, index));
},
 set$length: function(newLength) {
  throw $.$$throw($.UnsupportedError$(""));
},
 add$1: function(value) {
  this._liblib$_element.$$dom_appendChild$1(value);
  return value;
},
 addLast$1: function(value) {
  this._liblib$_element.$$dom_appendChild$1(value);
  return value;
},
 iterator$0: function() {
  var t1 = this._toList$0();
  return $.getInterceptor$JSArray(t1).iterator$0(t1);
},
 addAll$1: function(collection) {
  var t1, t2;
  for (t1 = $.getInterceptor$JSArray(collection).iterator$0(collection), t2 = this._liblib$_element; t1.get$hasNext() === true;)
    t2.$$dom_appendChild$1(t1.next$0());
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnimplementedError$(null));
},
 getRange$2: function(start, rangeLength) {
  return $._FrozenElementList$_wrap($.Lists_getRange(this, start, rangeLength, []));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 clear$0: function() {
  this._liblib$_element.textContent = "";
},
 removeLast$0: function() {
  var result = $.getInterceptor$JSArray(this).get$last(this);
  if (!(result == null))
    this._liblib$_element.$$dom_removeChild$1(result);
  return result;
},
 get$last: function() {
  return this._liblib$_element.lastElementChild;
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._FrozenElementList = {'': function _FrozenElementList(_nodeList) {
  this._nodeList = _nodeList;
},
 'super': 'Object',
 contains$1: function(element) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    if ($.eqB(t1.next$0(), element))
      return true;
  return false;
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
},
 map$1: function(f) {
  var out, t1;
  out = [];
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    out.push(f.call$1(t1.next$0()));
  return out;
},
 filter$1: function(f) {
  var out, t1, t2;
  out = [];
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (f.call$1(t2) === true)
      out.push(t2);
  }
  return out;
},
 get$isEmpty: function() {
  var t1 = this._nodeList;
  return $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1);
},
 get$length: function() {
  var t1 = this._nodeList;
  return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
},
 operator$index$1: function(index) {
  var t1 = this._nodeList;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.operator$index$1$bailout3(1, t1, index);
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  return t1[index];
},
 operator$index$1$bailout3: function(state0, t1, index) {
  return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index);
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$(""));
},
 set$length: function(newLength) {
  var t1 = this._nodeList;
  $.getInterceptor$JSArray(t1).set$length(t1, newLength);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$(""));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$(""));
},
 iterator$0: function() {
  return $._FrozenElementListIterator$(this);
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$(""));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$(""));
},
 getRange$2: function(start, rangeLength) {
  var t1 = this._nodeList;
  return $._FrozenElementList$_wrap($.getInterceptor$JSArray(t1).getRange$2(t1, start, rangeLength));
},
 indexOf$2: function(element, start) {
  var t1 = this._nodeList;
  return $.getInterceptor$JSStringJSArray(t1).indexOf$2(t1, element, start);
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  var t1 = this._nodeList;
  return $.getInterceptor$JSStringJSArray(t1).lastIndexOf$2(t1, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$(""));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$(""));
},
 get$last: function() {
  var t1 = this._nodeList;
  return $.getInterceptor$JSArray(t1).get$last(t1);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._FrozenElementListIterator = {'': function _FrozenElementListIterator(_liblib$_list, _index) {
  this._liblib$_list = _liblib$_list;
  this._index = _index;
},
 'super': 'Object',
 next$0: function() {
  var t1, t2;
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$("No more elements"));
  t1 = this._liblib$_list;
  t2 = this._index;
  if (typeof t2 !== 'number')
    return this.next$0$bailout1(1, t2, t1);
  this._index = t2 + 1;
  return t1.operator$index$1(t2);
},
 next$0$bailout1: function(state0, t2, t1) {
  this._index = $.add(t2, 1);
  return t1.operator$index$1(t2);
},
 get$hasNext: function() {
  var t1, t2;
  t1 = this._index;
  t2 = this._liblib$_list;
  return $.lt(t1, $.getInterceptor$JSStringJSArray(t2).get$length(t2));
}
};

$$.ElementEvents = {'': function ElementEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'Events',
 get$click: function() {
  return this.operator$index$1("click");
},
 get$reset: function() {
  return this.operator$index$1("reset");
},
 reset$0: function() {
  return this.get$reset().call$0();
}
};

$$.EventSourceEvents = {'': function EventSourceEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'Events',
 get$message: function() {
  return this.operator$index$1("message");
},
 get$open: function() {
  return this.operator$index$1("open");
},
 open$3: function(arg0, arg1, arg2) {
  return this.get$open().call$3(arg0, arg1, arg2);
}
};

$$.Events = {'': function Events(_ptr) {
  this._ptr = _ptr;
},
 'super': 'Object',
 operator$index$1: function(type) {
  return $.EventListenerList$(this._ptr, type);
}
};

$$.EventListenerList = {'': function EventListenerList(_ptr, _type) {
  this._ptr = _ptr;
  this._type = _type;
},
 'super': 'Object',
 add$2: function(listener, useCapture) {
  this._ptr.$$dom_addEventListener$3(this._type, listener, useCapture);
  return this;
},
 add$1: function(listener) {
  return this.add$2(listener, false);
},
 remove$2: function(listener, useCapture) {
  this._ptr.$$dom_removeEventListener$3(this._type, listener, useCapture);
  return this;
},
 remove$1: function(listener) {
  return this.remove$2(listener, false);
}
};

$$.FileReaderEvents = {'': function FileReaderEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'Events'
};

$$.FileWriterEvents = {'': function FileWriterEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'Events',
 get$write: function() {
  return this.operator$index$1("write");
},
 write$1: function(arg0) {
  return this.get$write().call$1(arg0);
},
 write$3: function(arg0, arg1, arg2) {
  return this.get$write().call$3(arg0, arg1, arg2);
}
};

$$.FrameSetElementEvents = {'': function FrameSetElementEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'ElementEvents',
 get$message: function() {
  return this.operator$index$1("message");
}
};

$$.HttpRequestEvents = {'': function HttpRequestEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'Events'
};

$$.HttpRequestUploadEvents = {'': function HttpRequestUploadEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'Events'
};

$$.InputElementEvents = {'': function InputElementEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'ElementEvents'
};

$$.LocalWindowEvents = {'': function LocalWindowEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'Events',
 get$click: function() {
  return this.operator$index$1("click");
},
 get$message: function() {
  return this.operator$index$1("message");
},
 get$reset: function() {
  return this.operator$index$1("reset");
},
 reset$0: function() {
  return this.get$reset().call$0();
}
};

$$.MediaElementEvents = {'': function MediaElementEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'ElementEvents'
};

$$.MediaStreamEvents = {'': function MediaStreamEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'Events'
};

$$.MediaStreamTrackEvents = {'': function MediaStreamTrackEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'Events'
};

$$.MediaStreamTrackListEvents = {'': function MediaStreamTrackListEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'Events'
};

$$.MessagePortEvents = {'': function MessagePortEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'Events',
 get$message: function() {
  return this.operator$index$1("message");
}
};

$$._ChildNodeListLazy = {'': function _ChildNodeListLazy(_this) {
  this._this = _this;
},
 'super': 'Object',
 get$last: function() {
  return this._this.lastChild;
},
 add$1: function(value) {
  this._this.$$dom_appendChild$1(value);
},
 addLast$1: function(value) {
  this._this.$$dom_appendChild$1(value);
},
 addAll$1: function(collection) {
  var t1, t2;
  for (t1 = $.getInterceptor$JSArray(collection).iterator$0(collection), t2 = this._this; t1.get$hasNext() === true;)
    t2.$$dom_appendChild$1(t1.next$0());
},
 removeLast$0: function() {
  var result = this.get$last();
  if (!(result == null))
    this._this.$$dom_removeChild$1(result);
  return result;
},
 clear$0: function() {
  this._this.textContent = "";
},
 operator$indexSet$2: function(index, value) {
  this._this.$$dom_replaceChild$2(value, this.operator$index$1(index));
},
 iterator$0: function() {
  var t1 = this._this.childNodes;
  return $.getInterceptor$JSArray(t1).iterator$0(t1);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, 0);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 get$length: function() {
  var t1 = this._this.childNodes;
  return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot set length on immutable List."));
},
 operator$index$1: function(index) {
  var t1 = this._this.childNodes;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.operator$index$1$bailout1(1, index, t1);
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  return t1[index];
},
 operator$index$1$bailout1: function(state0, index, t1) {
  return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$.NotificationEvents = {'': function NotificationEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'Events',
 get$click: function() {
  return this.operator$index$1("click");
},
 get$close: function() {
  return this.operator$index$1("close");
},
 close$0: function() {
  return this.get$close().call$0();
},
 close$2: function(arg0, arg1) {
  return this.get$close().call$2(arg0, arg1);
}
};

$$.PeerConnection00Events = {'': function PeerConnection00Events(_ptr) {
  this._ptr = _ptr;
},
 'super': 'Events',
 get$open: function() {
  return this.operator$index$1("open");
},
 open$3: function(arg0, arg1, arg2) {
  return this.get$open().call$3(arg0, arg1, arg2);
}
};

$$.RtcDataChannelEvents = {'': function RtcDataChannelEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'Events',
 get$close: function() {
  return this.operator$index$1("close");
},
 close$0: function() {
  return this.get$close().call$0();
},
 close$2: function(arg0, arg1) {
  return this.get$close().call$2(arg0, arg1);
},
 get$message: function() {
  return this.operator$index$1("message");
},
 get$open: function() {
  return this.operator$index$1("open");
},
 open$3: function(arg0, arg1, arg2) {
  return this.get$open().call$3(arg0, arg1, arg2);
}
};

$$.RtcPeerConnectionEvents = {'': function RtcPeerConnectionEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'Events',
 get$open: function() {
  return this.operator$index$1("open");
},
 open$3: function(arg0, arg1, arg2) {
  return this.get$open().call$3(arg0, arg1, arg2);
}
};

$$.SharedWorkerContextEvents = {'': function SharedWorkerContextEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'WorkerContextEvents'
};

$$.SpeechRecognitionEvents = {'': function SpeechRecognitionEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'Events'
};

$$.TextTrackEvents = {'': function TextTrackEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'Events'
};

$$.TextTrackCueEvents = {'': function TextTrackCueEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'Events'
};

$$.TextTrackListEvents = {'': function TextTrackListEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'Events'
};

$$.WebSocketEvents = {'': function WebSocketEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'Events',
 get$close: function() {
  return this.operator$index$1("close");
},
 close$0: function() {
  return this.get$close().call$0();
},
 close$2: function(arg0, arg1) {
  return this.get$close().call$2(arg0, arg1);
},
 get$message: function() {
  return this.operator$index$1("message");
},
 get$open: function() {
  return this.operator$index$1("open");
},
 open$3: function(arg0, arg1, arg2) {
  return this.get$open().call$3(arg0, arg1, arg2);
}
};

$$.WorkerEvents = {'': function WorkerEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'AbstractWorkerEvents',
 get$message: function() {
  return this.operator$index$1("message");
}
};

$$.WorkerContextEvents = {'': function WorkerContextEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'Events'
};

$$._AttributeMap = {'': function _AttributeMap(_liblib$_element) {
  this._liblib$_element = _liblib$_element;
},
 'super': 'Object',
 get$_liblib$_element: function() { return this._liblib$_element; },
 clear$0: function() {
  for (var t1 = this.get$keys(), t1 = $.getInterceptor$JSArray(t1).iterator$0(t1); t1.get$hasNext() === true;)
    this.remove$1(t1.next$0());
},
 forEach$1: function(f) {
  var t1, t2;
  for (t1 = this.get$keys(), t1 = $.getInterceptor$JSArray(t1).iterator$0(t1); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    f.call$2(t2, this.operator$index$1(t2));
  }
},
 get$keys: function() {
  var attributes, keys, t1, len, i;
  attributes = this._liblib$_element.attributes;
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.get$keys$bailout(1, attributes);
  keys = $.List_List(null, $.String);
  $.setRuntimeTypeInfo(keys, [$.String]);
  t1 = $.getInterceptor$JSStringJSArray(attributes);
  len = attributes.length;
  i = 0;
  for (; i < len; ++i) {
    if (i >= attributes.length)
      throw $.ioore(i);
    if (this._matches$1(attributes[i]) === true) {
      if (i >= attributes.length)
        throw $.ioore(i);
      keys.push(attributes[i].get$$$dom_localName());
    }
  }
  return keys;
},
 get$keys$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      attributes = env0;
      break;
    case 2:
      len = env3;
      t1 = env2;
      attributes = env1;
      keys = env0;
      break;
  }
  switch (state0) {
    case 0:
      attributes = this._liblib$_element.attributes;
    case 1:
      state0 = 0;
      keys = $.List_List(null, $.String);
      $.setRuntimeTypeInfo(keys, [$.String]);
      t1 = $.getInterceptor$JSStringJSArray(attributes);
      len = t1.get$length(attributes);
    case 2:
      var attributes, keys, t1, len, i;
      state0 = 0;
      i = 0;
      for (; $.ltB(i, len); ++i)
        if (this._matches$1(t1.operator$index$1(attributes, i)) === true)
          keys.push(t1.operator$index$1(attributes, i).get$$$dom_localName());
      return keys;
  }
},
 get$values: function() {
  var attributes, values, t1, len, i;
  attributes = this._liblib$_element.attributes;
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.get$values$bailout(1, attributes);
  values = $.List_List(null, $.String);
  $.setRuntimeTypeInfo(values, [$.String]);
  t1 = $.getInterceptor$JSStringJSArray(attributes);
  len = attributes.length;
  i = 0;
  for (; i < len; ++i) {
    if (i >= attributes.length)
      throw $.ioore(i);
    if (this._matches$1(attributes[i]) === true) {
      if (i >= attributes.length)
        throw $.ioore(i);
      values.push(attributes[i].get$value());
    }
  }
  return values;
},
 get$values$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      attributes = env0;
      break;
    case 2:
      len = env3;
      t1 = env2;
      attributes = env1;
      values = env0;
      break;
  }
  switch (state0) {
    case 0:
      attributes = this._liblib$_element.attributes;
    case 1:
      state0 = 0;
      values = $.List_List(null, $.String);
      $.setRuntimeTypeInfo(values, [$.String]);
      t1 = $.getInterceptor$JSStringJSArray(attributes);
      len = t1.get$length(attributes);
    case 2:
      var attributes, values, t1, len, i;
      state0 = 0;
      i = 0;
      for (; $.ltB(i, len); ++i)
        if (this._matches$1(t1.operator$index$1(attributes, i)) === true)
          values.push(t1.operator$index$1(attributes, i).get$value());
      return values;
  }
},
 get$isEmpty: function() {
  return $.eq(this.get$length(), 0);
},
 is$Map: function() { return true; }
};

$$._ElementAttributeMap = {'': function _ElementAttributeMap(_liblib$_element) {
  this._liblib$_element = _liblib$_element;
},
 'super': '_AttributeMap',
 containsKey$1: function(key) {
  return this._liblib$_element.$$dom_hasAttribute$1(key);
},
 operator$index$1: function(key) {
  return this._liblib$_element.$$dom_getAttribute$1(key);
},
 operator$indexSet$2: function(key, value) {
  this._liblib$_element.$$dom_setAttribute$2(key, $.S(value));
},
 remove$1: function(key) {
  var t1, value;
  t1 = this._liblib$_element;
  value = t1.$$dom_getAttribute$1(key);
  t1.$$dom_removeAttribute$1(key);
  return value;
},
 get$length: function() {
  var t1 = this.get$keys();
  return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
},
 _matches$1: function(node) {
  return node.get$$$dom_namespaceUri() == null;
}
};

$$._JsSerializer = {'': function _JsSerializer(_nextFreeRefId, _visited) {
  this._nextFreeRefId = _nextFreeRefId;
  this._visited = _visited;
},
 'super': '_Serializer',
 visitSendPortSync$1: function(x) {
  if (!!x.is$_JsSendPortSync)
    return ["sendport", "nativejs", x._id];
  if (!!x.is$_LocalSendPortSync)
    return this.visitLocalSendPortSync$1(x);
  if (!!x.is$_RemoteSendPortSync)
    return ["sendport", "dart", x._isolateId, x._portId];
  throw $.$$throw("Unknown port type " + $.S(x));
},
 visitLocalSendPortSync$1: function(x) {
  return ["sendport", "dart", $.ReceivePortSync__isolateId(), x._receivePort._portId];
},
 visitSendPort$1: function(x) {
  throw $.$$throw($.UnimplementedError$("Asynchronous send port not yet implemented."));
}
};

$$._JsDeserializer = {'': function _JsDeserializer(_deserialized) {
  this._deserialized = _deserialized;
},
 'super': '_Deserializer',
 deserializeSendPort$1: function(x) {
  var t1, tag;
  t1 = $.getInterceptor$JSStringJSArray(x);
  tag = t1.operator$index$1(x, 1);
  switch (tag) {
    case "nativejs":
      return $._JsSendPortSync$(t1.operator$index$1(x, 2));
    case "dart":
      return $.ReceivePortSync__lookup(t1.operator$index$1(x, 2), t1.operator$index$1(x, 3));
    default:
      throw $.$$throw("Illegal SendPortSync type: " + $.S(tag));
  }
}
};

$$._JsSendPortSync = {'': function _JsSendPortSync(_id) {
  this._id = _id;
},
 'super': 'Object',
 get$_id: function() { return this._id; },
 callSync$1: function(message) {
  var serialized, result;
  serialized = $._JsSerializer$().traverse$1(message);
  result = ReceivePortSync.dispatchCall(this._id, serialized);
  return $._JsDeserializer$().deserialize$1(result);
},
 is$_JsSendPortSync: true,
 is$SendPortSync: true
};

$$._RemoteSendPortSync = {'': function _RemoteSendPortSync(_isolateId, _portId) {
  this._isolateId = _isolateId;
  this._portId = _portId;
},
 'super': 'Object',
 get$_isolateId: function() { return this._isolateId; },
 get$_portId: function() { return this._portId; },
 callSync$1: function(message) {
  var serialized, result;
  serialized = $._JsSerializer$().traverse$1(message);
  result = $._RemoteSendPortSync__call(this._isolateId, this._portId, serialized);
  return $._JsDeserializer$().deserialize$1(result);
},
 is$_RemoteSendPortSync: true,
 is$SendPortSync: true
};

$$._LocalSendPortSync = {'': function _LocalSendPortSync(_receivePort) {
  this._receivePort = _receivePort;
},
 'super': 'Object',
 get$_receivePort: function() { return this._receivePort; },
 callSync$1: function(message) {
  var t1, copy, result;
  t1 = $._JsSerializer$().traverse$1(message);
  copy = $._JsDeserializer$().deserialize$1(t1);
  result = this._receivePort._callback$1(copy);
  t1 = $._JsSerializer$().traverse$1(result);
  return $._JsDeserializer$().deserialize$1(t1);
},
 is$_LocalSendPortSync: true,
 is$SendPortSync: true
};

$$.ReceivePortSync = {'': function ReceivePortSync(_portId, _callback, _listener) {
  this._portId = _portId;
  this._callback = _callback;
  this._listener = _listener;
},
 'super': 'Object',
 get$_portId: function() { return this._portId; },
 get$_callback: function() { return this._callback; },
 _callback$1: function(arg0) {
  return this._callback.call$1(arg0);
},
 _callback$2: function(arg0, arg1) {
  return this._callback.call$2(arg0, arg1);
},
 get$_listenerName: function() {
  return $.ReceivePortSync__getListenerName($.ReceivePortSync__isolateId(), this._portId);
},
 receive$1: function(callback) {
  var t1;
  this._callback = callback;
  if (this._listener == null) {
    this._listener = new $.ReceivePortSync_receive_anon(this);
    t1 = $.window().get$on();
    t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, this.get$_listenerName());
    $.getInterceptor$JSArray(t1).add$1(t1, this._listener);
  }
},
 close$0: function() {
  $.ReceivePortSync__portMap.remove$1(this._portId);
  if (!(this._listener == null)) {
    var t1 = $.window().get$on();
    $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, this.get$_listenerName()).remove$1(this._listener);
  }
},
 toSendPort$0: function() {
  return $._LocalSendPortSync$_internal(this);
},
 ReceivePortSync$0: function() {
  if ($.ReceivePortSync__portIdCount == null) {
    $.ReceivePortSync__portIdCount = 0;
    $.ReceivePortSync__portMap = $.Map_Map($.$int, $.ReceivePortSync);
  }
  var t1 = $.ReceivePortSync__portIdCount;
  $.ReceivePortSync__portIdCount = $.add(t1, 1);
  this._portId = t1;
  $.indexSet($.ReceivePortSync__portMap, this._portId, this);
}
};

$$._MessageTraverserVisitedMap = {'': function _MessageTraverserVisitedMap() {
},
 'super': 'Object',
 operator$index$1: function(object) {
  return;
},
 operator$indexSet$2: function(object, info) {
},
 reset$0: function() {
},
 cleanup$0: function() {
}
};

$$._MessageTraverser = {'': function _MessageTraverser() {
},
 'super': 'Object',
 traverse$1: function(x) {
  var t1, result;
  t1 = x;
  if (t1 == null || typeof t1 === 'string' || typeof t1 === 'number' || typeof t1 === 'boolean')
    return this.visitPrimitive$1(x);
  this._visited.reset$0();
  result = null;
  try {
    result = this._dispatch$1(x);
  } finally {
    this._visited.cleanup$0();
  }
  return result;
},
 _dispatch$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return this.visitPrimitive$1(x);
  if (typeof x === 'object' && x !== null && (x.constructor === Array || x.is$List()))
    return this.visitList$1(x);
  if (typeof x === 'object' && x !== null && x.is$Map())
    return this.visitMap$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPort)
    return this.visitSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPortSync)
    return this.visitSendPortSync$1(x);
  return this.visitObject$1(x);
},
 visitObject$1: function(x) {
  throw $.$$throw("Message serialization: Illegal value " + $.S(x) + " passed");
}
};

$$._Serializer = {'': function _Serializer() {
},
 'super': '_MessageTraverser',
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  var copyId, id;
  copyId = this._visited.operator$index$1(list);
  if (!(copyId == null))
    return ["ref", copyId];
  id = this._nextFreeRefId;
  this._nextFreeRefId = id + 1;
  this._visited.operator$indexSet$2(list, id);
  return ["list", id, this._serializeList$1(list)];
},
 visitMap$1: function(map) {
  var copyId, id;
  copyId = this._visited.operator$index$1(map);
  if (!(copyId == null))
    return ["ref", copyId];
  id = this._nextFreeRefId;
  this._nextFreeRefId = id + 1;
  this._visited.operator$indexSet$2(map, id);
  return ["map", id, this._serializeList$1(map.get$keys()), this._serializeList$1(map.get$values())];
},
 _serializeList$1: function(list) {
  var t1, len, result, i;
  if (typeof list !== 'string' && (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior()))
    return this._serializeList$1$bailout(1, list);
  t1 = $.getInterceptor$JSStringJSArray(list);
  len = list.length;
  result = $.List_List(len);
  $.setRuntimeTypeInfo(result, []);
  for (i = 0; i < len; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    result[i] = this._dispatch$1(list[i]);
  }
  return result;
},
 _serializeList$1$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      list = env0;
      break;
    case 2:
      len = env2;
      t1 = env1;
      list = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      t1 = $.getInterceptor$JSStringJSArray(list);
      len = t1.get$length(list);
    case 2:
      var list, t1, len, result, i, t2;
      state0 = 0;
      result = $.List_List(len);
      $.setRuntimeTypeInfo(result, []);
      for (i = 0; $.ltB(i, len); ++i) {
        t2 = this._dispatch$1(t1.operator$index$1(list, i));
        if (i >= result.length)
          throw $.ioore(i);
        result[i] = t2;
      }
      return result;
  }
}
};

$$._Deserializer = {'': function _Deserializer() {
},
 'super': 'Object',
 deserialize$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return x;
  this._deserialized = $.HashMap_HashMap();
  return this._deserializeHelper$1(x);
},
 _deserializeHelper$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return x;
  switch ($.getInterceptor$JSStringJSArray(x).operator$index$1(x, 0)) {
    case "ref":
      return this._deserializeRef$1(x);
    case "list":
      return this._deserializeList$1(x);
    case "map":
      return this._deserializeMap$1(x);
    case "sendport":
      return this.deserializeSendPort$1(x);
    default:
      return this.deserializeObject$1(x);
  }
},
 _deserializeRef$1: function(x) {
  var id, t1;
  id = $.getInterceptor$JSStringJSArray(x).operator$index$1(x, 1);
  t1 = this._deserialized;
  return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, id);
},
 _deserializeList$1: function(x) {
  var t1, id, dartList, len, i;
  t1 = $.getInterceptor$JSStringJSArray(x);
  id = t1.operator$index$1(x, 1);
  dartList = t1.operator$index$1(x, 2);
  if (typeof dartList !== 'object' || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.is$JavaScriptIndexingBehavior())
    return this._deserializeList$1$bailout(1, dartList, id);
  $.indexSet(this._deserialized, id, dartList);
  len = dartList.length;
  for (i = 0; i < len; ++i) {
    if (i >= dartList.length)
      throw $.ioore(i);
    t1 = this._deserializeHelper$1(dartList[i]);
    if (i >= dartList.length)
      throw $.ioore(i);
    dartList[i] = t1;
  }
  return dartList;
},
 _deserializeList$1$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      id = env1;
      dartList = env0;
      break;
    case 2:
      len = env2;
      t2 = env1;
      dartList = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = $.getInterceptor$JSStringJSArray(x);
      id = t1.operator$index$1(x, 1);
      dartList = t1.operator$index$1(x, 2);
    case 1:
      state0 = 0;
      $.indexSet(this._deserialized, id, dartList);
      t2 = $.getInterceptor$JSStringJSArray(dartList);
      len = t2.get$length(dartList);
    case 2:
      var t1, id, dartList, t2, len, i;
      state0 = 0;
      for (i = 0; $.ltB(i, len); ++i)
        $.indexSet(dartList, i, this._deserializeHelper$1(t2.operator$index$1(dartList, i)));
      return dartList;
  }
},
 _deserializeMap$1: function(x) {
  var result, t1, id, keys, values, t3, len, i, key;
  result = $.Map_Map();
  t1 = $.getInterceptor$JSStringJSArray(x);
  id = t1.operator$index$1(x, 1);
  $.indexSet(this._deserialized, id, result);
  keys = t1.operator$index$1(x, 2);
  if (typeof keys !== 'string' && (typeof keys !== 'object' || keys === null || keys.constructor !== Array && !keys.is$JavaScriptIndexingBehavior()))
    return this._deserializeMap$1$bailout(1, x, result, t1, keys);
  values = t1.operator$index$1(x, 3);
  if (typeof values !== 'string' && (typeof values !== 'object' || values === null || values.constructor !== Array && !values.is$JavaScriptIndexingBehavior()))
    return this._deserializeMap$1$bailout(2, values, result, keys);
  t3 = $.getInterceptor$JSStringJSArray(keys);
  len = keys.length;
  for (i = 0; i < len; ++i) {
    if (i >= keys.length)
      throw $.ioore(i);
    key = this._deserializeHelper$1(keys[i]);
    if (i >= values.length)
      throw $.ioore(i);
    $.indexSet(result, key, this._deserializeHelper$1(values[i]));
  }
  return result;
},
 _deserializeMap$1$bailout: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      keys = env3;
      t1 = env2;
      result = env1;
      x = env0;
      break;
    case 2:
      keys = env2;
      result = env1;
      values = env0;
      break;
    case 3:
      keys = env4;
      result = env3;
      len = env2;
      t3 = env1;
      values = env0;
      break;
  }
  switch (state0) {
    case 0:
      result = $.Map_Map();
      t1 = $.getInterceptor$JSStringJSArray(x);
      id = t1.operator$index$1(x, 1);
      $.indexSet(this._deserialized, id, result);
      keys = t1.operator$index$1(x, 2);
    case 1:
      state0 = 0;
      values = t1.operator$index$1(x, 3);
    case 2:
      state0 = 0;
      t3 = $.getInterceptor$JSStringJSArray(keys);
      len = t3.get$length(keys);
    case 3:
      var result, t1, id, keys, x, values, t3, len, i;
      state0 = 0;
      for (t1 = $.getInterceptor$JSStringJSArray(values), i = 0; $.ltB(i, len); ++i)
        $.indexSet(result, this._deserializeHelper$1(t3.operator$index$1(keys, i)), this._deserializeHelper$1(t1.operator$index$1(values, i)));
      return result;
  }
},
 deserializeObject$1: function(x) {
  throw $.$$throw("Unexpected serialized object");
}
};

$$._DOMWindowCrossFrame = {'': function _DOMWindowCrossFrame(_window) {
  this._window = _window;
},
 'super': 'Object',
 get$parent: function() {
  return $._DOMWindowCrossFrame__createSafe(this._window.parent);
},
 close$0: function() {
  return this._window.close();
}
};

$$.FixedSizeListIterator = {'': function FixedSizeListIterator(_liblib$_length, _array, _pos) {
  this._liblib$_length = _liblib$_length;
  this._array = _array;
  this._pos = _pos;
},
 'super': '_VariableSizeListIterator',
 get$hasNext: function() {
  return $.gt(this._liblib$_length, this._pos);
}
};

$$._VariableSizeListIterator = {'': function _VariableSizeListIterator() {
},
 'super': 'Object',
 get$hasNext: function() {
  var t1 = this._array;
  return $.gt($.getInterceptor$JSStringJSArray(t1).get$length(t1), this._pos);
},
 next$0: function() {
  var t1, t3, t4;
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$("No more elements"));
  t1 = this._array;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.next$0$bailout(1, t1);
  t3 = $.getInterceptor$JSStringJSArray(t1);
  t4 = this._pos;
  if (typeof t4 !== 'number')
    return this.next$0$bailout(2, t4, t3, t1);
  this._pos = t4 + 1;
  if (t4 !== (t4 | 0))
    throw $.iae(t4);
  if (t4 < 0 || t4 >= t1.length)
    throw $.ioore(t4);
  return t1[t4];
},
 next$0$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env2;
      t3 = env1;
      t4 = env0;
      break;
  }
  switch (state0) {
    case 0:
      if (this.get$hasNext() !== true)
        throw $.$$throw($.StateError$("No more elements"));
      t1 = this._array;
    case 1:
      state0 = 0;
      t3 = $.getInterceptor$JSStringJSArray(t1);
      t4 = this._pos;
    case 2:
      var t1, t3, t4;
      state0 = 0;
      this._pos = $.add(t4, 1);
      return t3.operator$index$1(t1, t4);
  }
}
};

$$.FilteredElementList = {'': function FilteredElementList(_node, _childNodes) {
  this._node = _node;
  this._childNodes = _childNodes;
},
 'super': 'Object',
 get$_filtered: function() {
  var t1, t2;
  t1 = this._childNodes;
  t2 = $.List_List$from($.getInterceptor$JSArray(t1).filter$1(t1, new $.FilteredElementList__filtered_anon()));
  $.setRuntimeTypeInfo(t2, []);
  return t2;
},
 forEach$1: function(f) {
  var t1 = this.get$_filtered();
  $.getInterceptor$JSArray(t1).forEach$1(t1, f);
},
 operator$indexSet$2: function(index, value) {
  this.operator$index$1(index).replaceWith$1(value);
},
 set$length: function(newLength) {
  var len = $.getInterceptor$JSStringJSArray(this).get$length(this);
  if ($.geB(newLength, len))
    return;
  else if ($.ltB(newLength, 0))
    throw $.$$throw($.ArgumentError$("Invalid list length"));
  this.removeRange$2(newLength, $.sub(len, newLength));
},
 add$1: function(value) {
  var t1 = this._childNodes;
  $.getInterceptor$JSArray(t1).add$1(t1, value);
},
 get$add: function() {
  return new $.BoundClosure0(this, 'add$1');
},
 addAll$1: function(collection) {
  $.getInterceptor$JSArray(collection).forEach$1(collection, this.get$add());
},
 addLast$1: function(value) {
  var t1 = this._childNodes;
  $.getInterceptor$JSArray(t1).add$1(t1, value);
},
 contains$1: function(element) {
  var t1, t2;
  if (typeof element === 'object' && element !== null && element.is$Element()) {
    t1 = this._childNodes;
    t2 = $.getInterceptor$JSStringJSArray(t1).contains$1(t1, element) === true;
    t1 = t2;
  } else
    t1 = false;
  return t1;
},
 removeRange$2: function(start, rangeLength) {
  var t1 = this.get$_filtered();
  t1 = $.getInterceptor$JSArray(t1).getRange$2(t1, start, rangeLength);
  $.getInterceptor$JSArray(t1).forEach$1(t1, new $.FilteredElementList_removeRange_anon());
},
 clear$0: function() {
  var t1 = this._childNodes;
  $.getInterceptor$JSArray(t1).clear$0(t1);
},
 removeLast$0: function() {
  var result = $.getInterceptor$JSArray(this).get$last(this);
  if (!(result == null))
    result.remove$0();
  return result;
},
 map$1: function(f) {
  var t1 = this.get$_filtered();
  return $.getInterceptor$JSArray(t1).map$1(t1, f);
},
 filter$1: function(f) {
  var t1 = this.get$_filtered();
  return $.getInterceptor$JSArray(t1).filter$1(t1, f);
},
 get$isEmpty: function() {
  var t1 = this.get$_filtered();
  return $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1);
},
 get$length: function() {
  var t1 = this.get$_filtered();
  return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
},
 operator$index$1: function(index) {
  var t1 = this.get$_filtered();
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.operator$index$1$bailout4(1, index, t1);
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  return t1[index];
},
 operator$index$1$bailout4: function(state0, index, t1) {
  return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index);
},
 iterator$0: function() {
  var t1 = this.get$_filtered();
  return $.getInterceptor$JSArray(t1).iterator$0(t1);
},
 getRange$2: function(start, rangeLength) {
  var t1 = this.get$_filtered();
  return $.getInterceptor$JSArray(t1).getRange$2(t1, start, rangeLength);
},
 indexOf$2: function(element, start) {
  var t1 = this.get$_filtered();
  return $.getInterceptor$JSStringJSArray(t1).indexOf$2(t1, element, start);
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  var t1;
  if (start == null)
    start = $.sub(this.get$length(), 1);
  t1 = this.get$_filtered();
  return $.getInterceptor$JSStringJSArray(t1).lastIndexOf$2(t1, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  var t1 = this.get$_filtered();
  return $.getInterceptor$JSArray(t1).get$last(t1);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$.DatabaseEvents = {'': function DatabaseEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'Events'
};

$$.OpenDBRequestEvents = {'': function OpenDBRequestEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'RequestEvents'
};

$$.RequestEvents = {'': function RequestEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'Events'
};

$$.TransactionEvents = {'': function TransactionEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'Events',
 get$complete: function() {
  return this.operator$index$1("complete");
},
 complete$1: function(arg0) {
  return this.get$complete().call$1(arg0);
}
};

$$.VersionChangeRequestEvents = {'': function VersionChangeRequestEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'RequestEvents'
};

$$.JsonUnsupportedObjectError = {'': function JsonUnsupportedObjectError(unsupportedObject, cause) {
  this.unsupportedObject = unsupportedObject;
  this.cause = cause;
},
 'super': 'Object',
 toString$0: function() {
  if (!(this.cause == null))
    return "Calling toJson method on object failed.";
  else
    return "Object toJson method returns non-serializable value.";
}
};

$$._JsonParser = {'': function _JsonParser(json, length, position) {
  this.json = json;
  this.length = length;
  this.position = position;
},
 'super': 'Object',
 get$length: function() { return this.length; },
 parseToplevel$0: function() {
  var result = this.parseValue$0();
  if (!(this.token$0() == null))
    this.error$1("Junk at the end of JSON input");
  return result;
},
 parseValue$0: function() {
  var token = this.token$0();
  if (token == null)
    this.error$1("Nothing to parse");
  switch (token) {
    case 34:
      return this.parseString$0();
    case 45:
      return this.parseNumber$0();
    case 110:
      return this.expectKeyword$2("null", null);
    case 102:
      return this.expectKeyword$2("false", false);
    case 116:
      return this.expectKeyword$2("true", true);
    case 123:
      return this.parseObject$0();
    case 91:
      return this.parseList$0();
    default:
      this.error$1("Unexpected token");
  }
},
 expectKeyword$2: function(word, value) {
  var i;
  for (i = 0; i < word.length; ++i) {
    if (!$.eqB(this.char$0(), $.CONSTANT0.charCodeAt$1(word, i)))
      this.error$1("Expected keyword '" + word + "'");
    this.position = $.add(this.position, 1);
  }
  return value;
},
 parseObject$0: function() {
  var object, key, t1;
  object = $.makeLiteralMap([]);
  if (typeof object !== 'object' || object === null || (object.constructor !== Array || !!object.immutable$list) && !object.is$JavaScriptIndexingBehavior())
    return this.parseObject$0$bailout(1, object);
  this.position = $.add(this.position, 1);
  if (!$.eqB(this.token$0(), 125)) {
    for (; true;) {
      key = this.parseString$0();
      if (!$.eqB(this.token$0(), 58))
        this.error$1("Expected ':' when parsing object");
      this.position = $.add(this.position, 1);
      t1 = this.parseValue$0();
      if (key !== (key | 0))
        throw $.iae(key);
      if (key < 0 || key >= object.length)
        throw $.ioore(key);
      object[key] = t1;
      if (!$.eqB(this.token$0(), 44))
        break;
      this.position = $.add(this.position, 1);
    }
    if (!$.eqB(this.token$0(), 125))
      this.error$1("Expected '}' at end of object");
  }
  this.position = $.add(this.position, 1);
  return object;
},
 parseObject$0$bailout: function(state0, object) {
  var key;
  this.position = $.add(this.position, 1);
  if (!$.eqB(this.token$0(), 125)) {
    for (; true;) {
      key = this.parseString$0();
      if (!$.eqB(this.token$0(), 58))
        this.error$1("Expected ':' when parsing object");
      this.position = $.add(this.position, 1);
      $.indexSet(object, key, this.parseValue$0());
      if (!$.eqB(this.token$0(), 44))
        break;
      this.position = $.add(this.position, 1);
    }
    if (!$.eqB(this.token$0(), 125))
      this.error$1("Expected '}' at end of object");
  }
  this.position = $.add(this.position, 1);
  return object;
},
 parseList$0: function() {
  var list = [];
  this.position = $.add(this.position, 1);
  if (!$.eqB(this.token$0(), 93)) {
    for (; true;) {
      list.push(this.parseValue$0());
      if (!$.eqB(this.token$0(), 44))
        break;
      this.position = $.add(this.position, 1);
    }
    if (!$.eqB(this.token$0(), 93))
      this.error$1("Expected ']' at end of list");
  }
  this.position = $.add(this.position, 1);
  return list;
},
 parseString$0: function(exception) {
  var charCodes, t1, t2, t3, c, codeString;
  if (!$.eqB(this.token$0(), 34))
    this.error$1("Expected string literal");
  this.position = $.add(this.position, 1);
  charCodes = $.List_List(null, $.$int);
  $.setRuntimeTypeInfo(charCodes, [$.$int]);
  for (t1 = this.length, t2 = this.json, t3 = $.getInterceptor$JSString(t2); true;) {
    c = this.char$0();
    if ($.eqB(c, 34)) {
      this.position = $.add(this.position, 1);
      break;
    }
    if ($.eqB(c, 92)) {
      this.position = $.add(this.position, 1);
      if ($.eqB(this.position, t1))
        this.error$1("\\ at the end of input");
      switch (this.char$0()) {
        case 34:
          c = 34;
          break;
        case 92:
          c = 92;
          break;
        case 47:
          c = 47;
          break;
        case 98:
          c = 8;
          break;
        case 110:
          c = 10;
          break;
        case 114:
          c = 13;
          break;
        case 102:
          c = 12;
          break;
        case 116:
          c = 9;
          break;
        case 117:
          if ($.gtB($.add(this.position, 5), t1))
            this.error$1("Invalid unicode esacape sequence");
          codeString = t3.substring$2(t2, $.add(this.position, 1), $.add(this.position, 5));
          try {
            c = $.int_parse("0x" + $.S(codeString));
          } catch (exception) {
            $.unwrapException(exception);
            this.error$1("Invalid unicode esacape sequence");
          }

          this.position = $.add(this.position, 4);
          break;
        default:
          this.error$1("Invalid esacape sequence in string literal");
      }
    }
    charCodes.push(c);
    this.position = $.add(this.position, 1);
  }
  return $.String_String$fromCharCodes(charCodes);
},
 parseNumber$0: function() {
  var startPos, char$, isInt, t1, number;
  if (!$.eqB(this.token$0(), 45))
    this.error$1("Expected number literal");
  startPos = this.position;
  char$ = this.char$0();
  if (char$ === 45)
    char$ = this.nextChar$0();
  if (char$ === 48)
    char$ = this.nextChar$0();
  else if ($.geB(char$, 48) && $.leB(char$, 57)) {
    char$ = this.nextChar$0();
    if (typeof char$ !== 'number')
      return this.parseNumber$0$bailout(1, startPos, char$);
    while (true) {
      if (!($.geB(char$, 48) && $.leB(char$, 57)))
        break;
      char$ = this.nextChar$0();
    }
  } else
    this.error$1("Expected digit when parsing number");
  if (char$ === 46) {
    char$ = this.nextChar$0();
    if ($.geB(char$, 48) && $.leB(char$, 57)) {
      char$ = this.nextChar$0();
      if (typeof char$ !== 'number')
        return this.parseNumber$0$bailout(2, startPos, char$);
      while (true) {
        if (!($.geB(char$, 48) && $.leB(char$, 57)))
          break;
        char$ = this.nextChar$0();
      }
      isInt = false;
    } else {
      this.error$1("Expected digit following comma");
      isInt = true;
    }
  } else
    isInt = true;
  if (char$ === 101 || char$ === 69) {
    char$ = this.nextChar$0();
    if (char$ === 45 || char$ === 43)
      char$ = this.nextChar$0();
    if ($.geB(char$, 48) && $.leB(char$, 57)) {
      char$ = this.nextChar$0();
      if (typeof char$ !== 'number')
        return this.parseNumber$0$bailout(3, char$, startPos);
      while (true) {
        if (!($.geB(char$, 48) && $.leB(char$, 57)))
          break;
        char$ = this.nextChar$0();
      }
      isInt = false;
    } else
      this.error$1("Expected digit following 'e' or 'E'");
  }
  t1 = this.json;
  number = $.getInterceptor$JSString(t1).substring$2(t1, startPos, this.position);
  if (isInt)
    return $.int_parse(number);
  else
    return $.double_parse(number);
},
 parseNumber$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      char$ = env1;
      startPos = env0;
      break;
    case 2:
      char$ = env1;
      startPos = env0;
      break;
    case 3:
      startPos = env1;
      char$ = env0;
      break;
  }
  switch (state0) {
    case 0:
      if (!$.eqB(this.token$0(), 45))
        this.error$1("Expected number literal");
      startPos = this.position;
      char$ = this.char$0();
      if (char$ === 45)
        char$ = this.nextChar$0();
    case 1:
      if (state0 === 0 && char$ === 48)
        char$ = this.nextChar$0();
      else
        switch (state0) {
          case 0:
          case 1:
            if (state0 === 1 || state0 === 0 && $.geB(char$, 48) && $.leB(char$, 57))
              switch (state0) {
                case 0:
                  char$ = this.nextChar$0();
                case 1:
                  state0 = 0;
                  while (true) {
                    if (!($.geB(char$, 48) && $.leB(char$, 57)))
                      break;
                    char$ = this.nextChar$0();
                  }
              }
            else
              this.error$1("Expected digit when parsing number");
        }
    case 2:
      if (state0 === 2 || state0 === 0 && char$ === 46)
        switch (state0) {
          case 0:
            char$ = this.nextChar$0();
          case 2:
            if (state0 === 2 || state0 === 0 && $.geB(char$, 48) && $.leB(char$, 57))
              switch (state0) {
                case 0:
                  char$ = this.nextChar$0();
                case 2:
                  state0 = 0;
                  while (true) {
                    if (!($.geB(char$, 48) && $.leB(char$, 57)))
                      break;
                    char$ = this.nextChar$0();
                  }
                  isInt = false;
              }
            else {
              this.error$1("Expected digit following comma");
              isInt = true;
            }
        }
      else
        isInt = true;
    case 3:
      var startPos, char$, isInt, t1, number;
      if (state0 === 3 || state0 === 0 && (char$ === 101 || char$ === 69))
        switch (state0) {
          case 0:
            char$ = this.nextChar$0();
            if (char$ === 45 || char$ === 43)
              char$ = this.nextChar$0();
          case 3:
            if (state0 === 3 || state0 === 0 && $.geB(char$, 48) && $.leB(char$, 57))
              switch (state0) {
                case 0:
                  char$ = this.nextChar$0();
                case 3:
                  state0 = 0;
                  while (true) {
                    if (!($.geB(char$, 48) && $.leB(char$, 57)))
                      break;
                    char$ = this.nextChar$0();
                  }
                  isInt = false;
              }
            else
              this.error$1("Expected digit following 'e' or 'E'");
        }
      t1 = this.json;
      number = $.getInterceptor$JSString(t1).substring$2(t1, startPos, this.position);
      if (isInt)
        return $.int_parse(number);
      else
        return $.double_parse(number);
  }
},
 char$0: function() {
  var t1, t3;
  t1 = this.position;
  if (typeof t1 !== 'number')
    return this.char$0$bailout(1, t1);
  t3 = this.length;
  if (typeof t3 !== 'number')
    return this.char$0$bailout(2, t1, t3);
  if (t1 >= t3)
    this.error$1("Unexpected end of JSON stream");
  t1 = this.json;
  return $.getInterceptor$JSString(t1).charCodeAt$1(t1, this.position);
},
 char$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t3 = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.position;
    case 1:
      state0 = 0;
      t3 = this.length;
    case 2:
      var t1, t3;
      state0 = 0;
      if ($.geB(t1, t3))
        this.error$1("Unexpected end of JSON stream");
      t1 = this.json;
      return $.getInterceptor$JSString(t1).charCodeAt$1(t1, this.position);
  }
},
 nextChar$0: function() {
  var t1, t3, t2;
  t1 = this.position;
  if (typeof t1 !== 'number')
    return this.nextChar$0$bailout(1, t1);
  this.position = t1 + 1;
  t1 = this.position;
  if (typeof t1 !== 'number')
    return this.nextChar$0$bailout(2, t1);
  t3 = this.length;
  if (typeof t3 !== 'number')
    return this.nextChar$0$bailout(3, t1, t3);
  if (t1 >= t3)
    return 0;
  t2 = this.json;
  return $.getInterceptor$JSString(t2).charCodeAt$1(t2, t1);
},
 nextChar$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env0;
      break;
    case 3:
      t3 = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.position;
    case 1:
      state0 = 0;
      this.position = $.add(t1, 1);
      t1 = this.position;
    case 2:
      state0 = 0;
      t3 = this.length;
    case 3:
      var t1, t3;
      state0 = 0;
      if ($.geB(t1, t3))
        return 0;
      t1 = this.json;
      return $.getInterceptor$JSString(t1).charCodeAt$1(t1, this.position);
  }
},
 token$0: function() {
  var t1, t2, t3, t4, char$, token;
  t1 = this.json;
  t2 = $.getInterceptor$JSString(t1);
  t3 = this.length;
  if (typeof t3 !== 'number')
    return this.token$0$bailout(1, t2, t3, t1);
  for (; true;) {
    t4 = this.position;
    if (typeof t4 !== 'number')
      return this.token$0$bailout(2, t4, t2, t3, t1);
    if (t4 >= t3)
      return;
    char$ = t2.charCodeAt$1(t1, t4);
    t4 = $._JsonParser_tokens;
    if (typeof t4 !== 'string' && (typeof t4 !== 'object' || t4 === null || t4.constructor !== Array && !t4.is$JavaScriptIndexingBehavior()))
      return this.token$0$bailout(3, t2, t3, char$, t4, t1);
    if (char$ !== (char$ | 0))
      throw $.iae(char$);
    if (char$ < 0 || char$ >= t4.length)
      throw $.ioore(char$);
    token = t4[char$];
    if (token === 32) {
      t4 = this.position;
      if (typeof t4 !== 'number')
        return this.token$0$bailout(4, t2, t3, t1, t4);
      this.position = t4 + 1;
      continue;
    }
    if (token == null)
      return 0;
    return token;
  }
},
 token$0$bailout: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      t1 = env2;
      t3 = env1;
      t2 = env0;
      break;
    case 2:
      t1 = env3;
      t3 = env2;
      t2 = env1;
      t4 = env0;
      break;
    case 3:
      t1 = env4;
      t4 = env3;
      char$ = env2;
      t3 = env1;
      t2 = env0;
      break;
    case 4:
      t4 = env3;
      t1 = env2;
      t3 = env1;
      t2 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.json;
      t2 = $.getInterceptor$JSString(t1);
      t3 = this.length;
    case 1:
      state0 = 0;
    default:
      var t1, t2, t3, t4, char$, token;
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!true)
                break L0;
            default:
              c$0: {
                switch (state0) {
                  case 0:
                    t4 = this.position;
                  case 2:
                    state0 = 0;
                    if ($.geB(t4, t3))
                      return;
                    char$ = t2.charCodeAt$1(t1, this.position);
                    t4 = $._JsonParser_tokens;
                  case 3:
                    state0 = 0;
                    token = $.getInterceptor$JSStringJSArray(t4).operator$index$1(t4, char$);
                  case 4:
                    if (state0 === 4 || state0 === 0 && token === 32)
                      switch (state0) {
                        case 0:
                          t4 = this.position;
                        case 4:
                          state0 = 0;
                          this.position = $.add(t4, 1);
                          break c$0;
                      }
                    if (token == null)
                      return 0;
                    return token;
                }
              }
          }
  }
},
 error$1: function(message) {
  throw $.$$throw(message);
},
 _JsonParser$1: function(json) {
  var t1;
  if (!($._JsonParser_tokens == null))
    return;
  t1 = $.List_List(126, $.$int);
  $.setRuntimeTypeInfo(t1, [$.$int]);
  $._JsonParser_tokens = t1;
  $.indexSet($._JsonParser_tokens, 9, 32);
  $.indexSet($._JsonParser_tokens, 10, 32);
  $.indexSet($._JsonParser_tokens, 13, 32);
  $.indexSet($._JsonParser_tokens, 32, 32);
  $.indexSet($._JsonParser_tokens, 48, 45);
  $.indexSet($._JsonParser_tokens, 49, 45);
  $.indexSet($._JsonParser_tokens, 50, 45);
  $.indexSet($._JsonParser_tokens, 51, 45);
  $.indexSet($._JsonParser_tokens, 52, 45);
  $.indexSet($._JsonParser_tokens, 53, 45);
  $.indexSet($._JsonParser_tokens, 54, 45);
  $.indexSet($._JsonParser_tokens, 55, 45);
  $.indexSet($._JsonParser_tokens, 56, 45);
  $.indexSet($._JsonParser_tokens, 57, 45);
  $.indexSet($._JsonParser_tokens, 45, 45);
  $.indexSet($._JsonParser_tokens, 123, 123);
  $.indexSet($._JsonParser_tokens, 125, 125);
  $.indexSet($._JsonParser_tokens, 91, 91);
  $.indexSet($._JsonParser_tokens, 93, 93);
  $.indexSet($._JsonParser_tokens, 34, 34);
  $.indexSet($._JsonParser_tokens, 58, 58);
  $.indexSet($._JsonParser_tokens, 44, 44);
  $.indexSet($._JsonParser_tokens, 110, 110);
  $.indexSet($._JsonParser_tokens, 116, 116);
  $.indexSet($._JsonParser_tokens, 102, 102);
}
};

$$._JsonStringifier = {'': function _JsonStringifier(sb, seen) {
  this.sb = sb;
  this.seen = seen;
},
 'super': 'Object',
 get$sb: function() { return this.sb; },
 checkCycle$1: function(object) {
  var t1, t2, i, t3;
  for (t1 = this.seen, t2 = t1.length, i = 0; i < t2; ++i) {
    t3 = t1[i];
    if (t3 == null ? object == null : t3 === object)
      throw $.$$throw("Cyclic structure");
  }
  t1.push(object);
},
 stringifyValue$1: function(object, exception) {
  var customJson, t1, e;
  if (this.stringifyJsonValue$1(object) !== true) {
    this.checkCycle$1(object);
    try {
      customJson = object.toJson$0();
      if (this.stringifyJsonValue$1(customJson) !== true)
        throw $.$$throw($.JsonUnsupportedObjectError$(object));
      t1 = this.seen;
      if (0 >= t1.length)
        throw $.ioore(0);
      t1.pop();
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      throw $.$$throw($.JsonUnsupportedObjectError$withCause(object, e));
    }

  }
},
 stringifyJsonValue$1: function(object) {
  var t1, t2, t3, i;
  t1 = {};
  if (typeof object === 'number') {
    t1 = this.sb;
    $.getInterceptor$JSArray(t1).add$1(t1, $.CONSTANT5.toString$0(object));
    return true;
  } else if (object === true) {
    t1 = this.sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "true");
    return true;
  } else if (object === false) {
    t1 = this.sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "false");
    return true;
  } else if (object == null) {
    t1 = this.sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "null");
    return true;
  } else if (typeof object === 'string') {
    t1 = this.sb;
    t2 = $.getInterceptor$JSArray(t1);
    t2.add$1(t1, "\"");
    $._JsonStringifier_escape(t1, object);
    t2.add$1(t1, "\"");
    return true;
  } else if (typeof object === 'object' && object !== null && (object.constructor === Array || object.is$List())) {
    if (typeof object !== 'object' || object === null || object.constructor !== Array && !object.is$JavaScriptIndexingBehavior())
      return this.stringifyJsonValue$1$bailout(1, object);
    this.checkCycle$1(object);
    t2 = this.sb;
    t3 = $.getInterceptor$JSArray(t2);
    t3.add$1(t2, "[");
    if (object.length > 0) {
      this.stringifyValue$1(object[0]);
      for (i = 1; i < object.length; ++i) {
        t3.add$1(t2, ",");
        if (i >= object.length)
          throw $.ioore(i);
        this.stringifyValue$1(object[i]);
      }
    }
    t3.add$1(t2, "]");
    t1 = this.seen;
    if (0 >= t1.length)
      throw $.ioore(0);
    t1.pop();
    return true;
  } else if (typeof object === 'object' && object !== null && object.is$Map()) {
    this.checkCycle$1(object);
    t2 = this.sb;
    t3 = $.getInterceptor$JSArray(t2);
    t3.add$1(t2, "{");
    t1.first_0 = true;
    object.forEach$1(new $._JsonStringifier_stringifyJsonValue_anon(t1, this));
    t3.add$1(t2, "}");
    t2 = this.seen;
    if (0 >= t2.length)
      throw $.ioore(0);
    t2.pop();
    return true;
  } else
    return false;
},
 stringifyJsonValue$1$bailout: function(state0, env0) {
  switch (state0) {
    case 1:
      object = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = {};
    case 1:
      var t1, t2, object, t3, i;
      if (state0 === 0 && typeof object === 'number') {
        t1 = this.sb;
        $.getInterceptor$JSArray(t1).add$1(t1, $.CONSTANT5.toString$0(object));
        return true;
      } else
        switch (state0) {
          case 0:
          case 1:
            if (state0 === 0 && object === true) {
              t1 = this.sb;
              $.getInterceptor$JSArray(t1).add$1(t1, "true");
              return true;
            } else
              switch (state0) {
                case 0:
                case 1:
                  if (state0 === 0 && object === false) {
                    t1 = this.sb;
                    $.getInterceptor$JSArray(t1).add$1(t1, "false");
                    return true;
                  } else
                    switch (state0) {
                      case 0:
                      case 1:
                        if (state0 === 0 && object == null) {
                          t1 = this.sb;
                          $.getInterceptor$JSArray(t1).add$1(t1, "null");
                          return true;
                        } else
                          switch (state0) {
                            case 0:
                            case 1:
                              if (state0 === 0 && typeof object === 'string') {
                                t1 = this.sb;
                                t2 = $.getInterceptor$JSArray(t1);
                                t2.add$1(t1, "\"");
                                $._JsonStringifier_escape(t1, object);
                                t2.add$1(t1, "\"");
                                return true;
                              } else
                                switch (state0) {
                                  case 0:
                                  case 1:
                                    if (state0 === 1 || state0 === 0 && typeof object === 'object' && object !== null && (object.constructor === Array || object.is$List()))
                                      switch (state0) {
                                        case 0:
                                        case 1:
                                          state0 = 0;
                                          this.checkCycle$1(object);
                                          t2 = this.sb;
                                          t3 = $.getInterceptor$JSArray(t2);
                                          t3.add$1(t2, "[");
                                          t1 = $.getInterceptor$JSStringJSArray(object);
                                          if ($.gtB(t1.get$length(object), 0)) {
                                            this.stringifyValue$1(t1.operator$index$1(object, 0));
                                            for (i = 1; $.ltB(i, t1.get$length(object)); ++i) {
                                              t3.add$1(t2, ",");
                                              this.stringifyValue$1(t1.operator$index$1(object, i));
                                            }
                                          }
                                          t3.add$1(t2, "]");
                                          t1 = this.seen;
                                          if (0 >= t1.length)
                                            throw $.ioore(0);
                                          t1.pop();
                                          return true;
                                      }
                                    else if (typeof object === 'object' && object !== null && object.is$Map()) {
                                      this.checkCycle$1(object);
                                      t2 = this.sb;
                                      t3 = $.getInterceptor$JSArray(t2);
                                      t3.add$1(t2, "{");
                                      t1.first_0 = true;
                                      object.forEach$1(new $._JsonStringifier_stringifyJsonValue_anon(t1, this));
                                      t3.add$1(t2, "}");
                                      t2 = this.seen;
                                      if (0 >= t2.length)
                                        throw $.ioore(0);
                                      t2.pop();
                                      return true;
                                    } else
                                      return false;
                                }
                          }
                    }
              }
        }
  }
}
};

$$.ElementInstanceEvents = {'': function ElementInstanceEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'Events',
 get$click: function() {
  return this.operator$index$1("click");
},
 get$reset: function() {
  return this.operator$index$1("reset");
},
 reset$0: function() {
  return this.get$reset().call$0();
}
};

$$.AudioContextEvents = {'': function AudioContextEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'Events',
 get$complete: function() {
  return this.operator$index$1("complete");
},
 complete$1: function(arg0) {
  return this.get$complete().call$1(arg0);
}
};

$$.ScriptProcessorNodeEvents = {'': function ScriptProcessorNodeEvents(_ptr) {
  this._ptr = _ptr;
},
 'super': 'Events'
};

$$.OpenInfo = {'': function OpenInfo(connectionId) {
  this.connectionId = connectionId;
},
 'super': 'Object',
 get$connectionId: function() { return this.connectionId; }
};

$$.WriteInfo = {'': function WriteInfo(bytesWritten) {
  this.bytesWritten = bytesWritten;
},
 'super': 'Object',
 get$bytesWritten: function() { return this.bytesWritten; }
};

$$.Serial = {'': function Serial(openInfo, logger, onWrite, dataRead, onRead) {
  this.openInfo = openInfo;
  this.logger = logger;
  this.onWrite = onWrite;
  this.dataRead = dataRead;
  this.onRead = onRead;
},
 'super': 'Object',
 get$openInfo: function() { return this.openInfo; },
 set$openInfo: function(v) { this.openInfo = v; },
 get$logger: function() { return this.logger; },
 get$onWrite: function() { return this.onWrite; },
 get$dataRead: function() { return this.dataRead; },
 set$dataRead: function(v) { this.dataRead = v; },
 get$onRead: function() { return this.onRead; },
 set$onRead: function(v) { this.onRead = v; },
 openPort$1: function(serialPort) {
  var completer = $.Completer_Completer();
  $.scoped(new $.Serial_openPort_anon(completer, this, serialPort));
  return completer.get$future();
},
 close$0: function() {
  var completer = $.Completer_Completer();
  if (!(this.openInfo == null))
    $.scoped(new $.Serial_close_anon(completer, this));
  else
    completer.completeException$1("openInfo is null");
  return completer.get$future();
},
 get$isConnected: function() {
  var t1 = this.openInfo;
  return !(t1 == null) && $.geB(t1.get$connectionId(), 0);
},
 onWrite$1: function(arg0) {
  return this.onWrite.call$1(arg0);
},
 write$1: function(data) {
  var completer = $.Completer_Completer();
  if (this.get$isConnected() === true)
    $.scoped(new $.Serial_write_anon(completer, data, this));
  else
    completer.completeException$1("serial not connected");
  return completer.get$future();
},
 onRead$1: function(arg0) {
  return this.onRead.call$1(arg0);
},
 startListening$0: function() {
  if (this.get$isConnected() === true) {
    this.dataRead = "";
    this.onCharRead$0();
  }
  this.dataRead = "";
},
 onCharRead$0: function() {
  if (this.get$isConnected() === true)
    $.scoped(new $.Serial_onCharRead_anon(this));
  else
    return;
}
};

$$.Callback = {'': function Callback(_manualDispose, _liblib1$_id, _liblib1$_callback) {
  this._manualDispose = _manualDispose;
  this._liblib1$_id = _liblib1$_id;
  this._liblib1$_callback = _liblib1$_callback;
},
 'super': 'Object',
 get$_liblib1$_id: function() { return this._liblib1$_id; },
 get$_liblib1$_callback: function() { return this._liblib1$_callback; },
 _liblib1$_callback$1: function(arg0) {
  return this._liblib1$_callback.call$1(arg0);
},
 _liblib1$_callback$2: function(arg0, arg1) {
  return this._liblib1$_callback.call$2(arg0, arg1);
},
 get$_serialized: function() {
  return ["funcref", this._liblib1$_id, $.get$_proxiedObjectTable().get$sendPort()];
},
 _initialize$1: function(manualDispose) {
  var t1;
  this._manualDispose = manualDispose;
  t1 = $.get$_proxiedObjectTable();
  this._liblib1$_id = $.getInterceptor$JSArray(t1).add$1(t1, this._liblib1$_callback);
  $.get$_proxiedObjectTable().globalize$1(this._liblib1$_id);
},
 Callback$many$1: function(f) {
  this._liblib1$_callback = f;
  this._initialize$1(true);
},
 Callback$once$1: function(f) {
  this._liblib1$_callback = new $.anon1(f, this);
  this._initialize$1(false);
},
 is$Callback: true
};

$$.Proxy = {'': function Proxy(_port, _liblib1$_id) {
  this._port = _port;
  this._liblib1$_id = _liblib1$_id;
},
 'super': 'Object',
 get$_port: function() { return this._port; },
 get$_liblib1$_id: function() { return this._liblib1$_id; },
 operator$index$1: function(arg) {
  return $.Proxy__forward(this, "[]", "method", [arg]);
},
 operator$indexSet$2: function(key, value) {
  return $.Proxy__forward(this, "[]=", "method", [key, value]);
},
 operator$eq$1: function(other) {
  var t1;
  if (this === other)
    t1 = true;
  else
    t1 = typeof other === 'object' && other !== null && !!other.is$Proxy && $._jsPortEquals.callSync$1([$._serialize(this), $._serialize(other)]) === true;
  return t1;
},
 noSuchMethod$1: function(invocation) {
  var member, args, t1, kind;
  member = invocation.get$memberName();
  args = invocation.get$positionalArguments();
  if (args == null)
    args = [];
  if (invocation.get$isGetter() === true) {
    t1 = $.getInterceptor$JSString(member);
    if (t1.startsWith$1(member, "get:") === true)
      member = t1.substring$1(member, 4);
    kind = "get";
  } else if (invocation.get$isSetter() === true) {
    t1 = $.getInterceptor$JSString(member);
    if (t1.endsWith$1(member, "=") === true)
      member = t1.substring$2(member, 0, $.sub(t1.get$length(member), 1));
    t1 = $.getInterceptor$JSString(member);
    if (t1.startsWith$1(member, "set:") === true)
      member = t1.substring$1(member, 4);
    kind = "set";
  } else {
    t1 = $.getInterceptor$JSString(member);
    if (t1.startsWith$1(member, "get:") === true) {
      member = t1.substring$1(member, 4);
      kind = "get";
    } else if (t1.startsWith$1(member, "set:") === true) {
      member = t1.substring$1(member, 4);
      kind = "set";
    } else
      kind = "method";
  }
  return $.Proxy__forward(this, member, kind, args);
},
 is$Proxy: true
};

$$._FunctionProxy = {'': function _FunctionProxy(_call, _port, _liblib1$_id) {
  this._call = _call;
  this._port = _port;
  this._liblib1$_id = _liblib1$_id;
},
 'super': 'Proxy',
 _FunctionProxy$_internal$2: function(port, id) {
  this._call = new $.anon0(port, id);
  $.indexSet($.get$_FunctionProxy__map(), this._call, this);
}
};

$$._ProxiedObjectTable = {'': function _ProxiedObjectTable(_name, _nextId, _deletedCount, _registry, _port, _globalIds, _handleStack, _scopeIndices) {
  this._name = _name;
  this._nextId = _nextId;
  this._deletedCount = _deletedCount;
  this._registry = _registry;
  this._port = _port;
  this._globalIds = _globalIds;
  this._handleStack = _handleStack;
  this._scopeIndices = _scopeIndices;
},
 'super': 'Object',
 get$_registry: function() { return this._registry; },
 get$_port: function() { return this._port; },
 get$_scopeIndices: function() { return this._scopeIndices; },
 enterScope$0: function() {
  $.CONSTANT2.addLast$1(this._scopeIndices, this._handleStack.length);
},
 exitScope$0: function() {
  var t1, start, t2, t3, t4, i, t5;
  t1 = this._scopeIndices;
  if (0 >= t1.length)
    throw $.ioore(0);
  start = t1.pop();
  if (start !== (start | 0))
    return this.exitScope$0$bailout(1, start);
  for (t1 = this._registry, t2 = this._handleStack, t3 = this._globalIds, t4 = $.getInterceptor$JSStringJSArray(t3), i = start; t5 = t2.length, i < t5; ++i) {
    if (i < 0)
      throw $.ioore(i);
    if (t4.contains$1(t3, t2[i]) !== true) {
      if (i >= t2.length)
        throw $.ioore(i);
      t1.remove$1(t2[i]);
      this._deletedCount = this._deletedCount + 1;
    }
  }
  $.CONSTANT2.removeRange$2(t2, start, t5 - start);
},
 exitScope$0$bailout: function(state0, start) {
  var t1, t2, t3, t4, i, t5, t6;
  for (t1 = this._registry, t2 = this._handleStack, t3 = this._globalIds, t4 = $.getInterceptor$JSStringJSArray(t3), i = start; t5 = $.ltB(i, t2.length), t6 = t2.length, t5; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t6)
      throw $.ioore(i);
    if (t4.contains$1(t3, t2[i]) !== true) {
      if (i >= t2.length)
        throw $.ioore(i);
      t1.remove$1(t2[i]);
      this._deletedCount = this._deletedCount + 1;
    }
  }
  if (typeof start !== 'number')
    throw $.iae(start);
  $.CONSTANT2.removeRange$2(t2, start, t6 - start);
},
 globalize$1: function(id) {
  var t1 = this._globalIds;
  return $.getInterceptor$JSArray(t1).add$1(t1, id);
},
 invalidate$1: function(id) {
  var t1, old;
  t1 = this._registry;
  old = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, id);
  this._globalIds.remove$1(id);
  t1.remove$1(id);
  this._deletedCount = this._deletedCount + 1;
  return old;
},
 add$1: function(x) {
  var t1, t2, id;
  if (this._scopeIndices.length === 0)
    throw $.$$throw("Must be inside scope to allocate.");
  t1 = this._name + "-";
  t2 = this._nextId;
  if (typeof t2 !== 'number')
    return this.add$1$bailout0(1, x, t2, t1);
  this._nextId = t2 + 1;
  id = t1 + $.S(t2);
  $.indexSet(this._registry, id, x);
  $.CONSTANT2.addLast$1(this._handleStack, id);
  return id;
},
 add$1$bailout0: function(state0, x, t2, t1) {
  var id;
  this._nextId = $.add(t2, 1);
  id = t1 + $.S(t2);
  $.indexSet(this._registry, id, x);
  $.CONSTANT2.addLast$1(this._handleStack, id);
  return id;
},
 get$1: function(id) {
  var t1 = this._registry;
  return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, id);
},
 get$sendPort: function() {
  return this._port.toSendPort$0();
},
 _ProxiedObjectTable$0: function() {
  this._port.receive$1(new $.anon(this));
}
};

$$.Logger = {'': function Logger(name, parent, _level, children, _handlers) {
  this.name = name;
  this.parent = parent;
  this._level = _level;
  this.children = children;
  this._handlers = _handlers;
},
 'super': 'Object',
 get$name: function() { return this.name; },
 get$parent: function() { return this.parent; },
 get$children: function() { return this.children; },
 get$fullName: function() {
  var t1, t2, t3;
  t1 = this.parent;
  t2 = t1 == null || $.eqB(t1.get$name(), "");
  t3 = this.name;
  return t2 ? t3 : $.S(t1.get$fullName()) + "." + $.S(t3);
},
 get$level: function() {
  if ($.hierarchicalLoggingEnabled === true) {
    var t1 = this._level;
    if (!(t1 == null))
      return t1;
    t1 = this.parent;
    if (!(t1 == null))
      return t1.get$level();
  }
  return $._rootLevel;
},
 set$level: function(value) {
  if ($.hierarchicalLoggingEnabled === true && !(this.parent == null))
    this._level = value;
  else {
    if (!(this.parent == null))
      throw $.$$throw($.UnsupportedError$("Please set \"hierarchicalLoggingEnabled\" to true if you want to change the level on a non-root logger."));
    $._rootLevel = value;
  }
},
 get$on: function() {
  return $.LoggerEvents$(this);
},
 _addHandler$1: function(handler) {
  var t1;
  if ($.hierarchicalLoggingEnabled === true || this.parent == null) {
    if (this._handlers == null) {
      t1 = $.List_List(null, $.LoggerHandler);
      $.setRuntimeTypeInfo(t1, [$.LoggerHandler]);
      this._handlers = t1;
    }
    t1 = this._handlers;
    $.getInterceptor$JSArray(t1).add$1(t1, handler);
  } else
    $.Logger_root()._addHandler$1(handler);
},
 _removeHandler$1: function(handler) {
  var t1, index;
  if ($.hierarchicalLoggingEnabled === true || this.parent == null) {
    t1 = this._handlers;
    if (t1 == null)
      return;
    index = $.getInterceptor$JSStringJSArray(t1).indexOf$1(t1, handler);
    if (!$.eqB(index, -1)) {
      t1 = this._handlers;
      $.getInterceptor$JSArray(t1).removeRange$2(t1, index, 1);
    }
  } else
    $.Logger_root()._removeHandler$1(handler);
},
 _clearHandlers$0: function() {
  if ($.hierarchicalLoggingEnabled === true || this.parent == null)
    this._handlers = null;
  else
    $.Logger_root()._clearHandlers$0();
},
 log$2: function(logLevel, message) {
  var record, target;
  if (logLevel.operator$ge$1(this.get$level()) === true) {
    record = $.LogRecord$(logLevel, message, this.get$fullName(), null, null, null);
    if ($.hierarchicalLoggingEnabled === true)
      for (target = this; !(target == null);) {
        target._publish$1(record);
        target = target.get$parent();
      }
    else
      $.Logger_root()._publish$1(record);
  }
},
 fine$1: function(message) {
  return this.log$2($.CONSTANT7, message);
},
 _publish$1: function(record) {
  var t1 = this._handlers;
  if (!(t1 == null))
    $.getInterceptor$JSArray(t1).forEach$1(t1, new $.Logger__publish_anon(record));
},
 Logger$_internal$2: function(name$, parent$) {
  var t1 = this.parent;
  if (!(t1 == null))
    $.indexSet(t1.get$children(), this.name, this);
}
};

$$.LoggerEvents = {'': function LoggerEvents(_logger) {
  this._logger = _logger;
},
 'super': 'Object',
 get$record: function() {
  return $.LoggerHandlerList$(this._logger);
}
};

$$.LoggerHandlerList = {'': function LoggerHandlerList(_logger) {
  this._logger = _logger;
},
 'super': 'Object',
 add$1: function(handler) {
  return this._logger._addHandler$1(handler);
},
 remove$1: function(handler) {
  return this._logger._removeHandler$1(handler);
},
 clear$0: function() {
  return this._logger._clearHandlers$0();
}
};

$$.Level = {'': function Level(name, value) {
  this.name = name;
  this.value = value;
},
 'super': 'Object',
 get$name: function() { return this.name; },
 get$value: function() { return this.value; },
 operator$eq$1: function(other) {
  return !(other == null) && $.eqB(this.value, other.get$value());
},
 operator$lt$1: function(other) {
  return $.lt(this.value, other.get$value());
},
 operator$le$1: function(other) {
  return $.le(this.value, other.get$value());
},
 operator$gt$1: function(other) {
  return $.gt(this.value, other.get$value());
},
 operator$ge$1: function(other) {
  return $.ge(this.value, other.get$value());
},
 get$hashCode: function() {
  return this.value;
},
 toString$0: function() {
  return this.name;
}
};

$$.LogRecord = {'': function LogRecord(level, message, loggerName, time, sequenceNumber, exception, exceptionText) {
  this.level = level;
  this.message = message;
  this.loggerName = loggerName;
  this.time = time;
  this.sequenceNumber = sequenceNumber;
  this.exception = exception;
  this.exceptionText = exceptionText;
},
 'super': 'Object',
 get$level: function() { return this.level; },
 get$message: function() { return this.message; }
};

$$._Manager = {'': function _Manager(nextIsolateId, currentManagerId, nextManagerId, currentContext, rootContext, topEventLoop, fromCommandLine, isWorker, supportsWorkers, isolates, mainManager, managers) {
  this.nextIsolateId = nextIsolateId;
  this.currentManagerId = currentManagerId;
  this.nextManagerId = nextManagerId;
  this.currentContext = currentContext;
  this.rootContext = rootContext;
  this.topEventLoop = topEventLoop;
  this.fromCommandLine = fromCommandLine;
  this.isWorker = isWorker;
  this.supportsWorkers = supportsWorkers;
  this.isolates = isolates;
  this.mainManager = mainManager;
  this.managers = managers;
},
 'super': 'Object',
 get$nextIsolateId: function() { return this.nextIsolateId; },
 set$nextIsolateId: function(v) { this.nextIsolateId = v; },
 get$currentManagerId: function() { return this.currentManagerId; },
 get$currentContext: function() { return this.currentContext; },
 set$currentContext: function(v) { this.currentContext = v; },
 get$rootContext: function() { return this.rootContext; },
 set$rootContext: function(v) { this.rootContext = v; },
 get$topEventLoop: function() { return this.topEventLoop; },
 get$fromCommandLine: function() { return this.fromCommandLine; },
 get$isWorker: function() { return this.isWorker; },
 get$isolates: function() { return this.isolates; },
 get$mainManager: function() { return this.mainManager; },
 get$managers: function() { return this.managers; },
 get$useWorkers: function() {
  return this.supportsWorkers;
},
 get$needSerialization: function() {
  return this.get$useWorkers();
},
 _nativeDetectEnvironment$0: function() {
  this.isWorker = $isWorker;
  this.supportsWorkers = $supportsWorkers;
  this.fromCommandLine = typeof(window) == 'undefined';
},
 _nativeInitWorkerMessageHandler$0: function() {
  $globalThis.onmessage = function (e) {
  IsolateNatives._processWorkerMessage(this.mainManager, e);
};
},
 maybeCloseWorker$0: function() {
  var t1 = this.isolates;
  if ($.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) === true)
    this.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "close"])));
},
 _Manager$0: function() {
  this._nativeDetectEnvironment$0();
  this.topEventLoop = $._EventLoop$();
  this.isolates = $.Map_Map($.$int, $._IsolateContext);
  this.managers = $.Map_Map($.$int, $._ManagerStub);
  if (this.isWorker === true) {
    this.mainManager = $._MainManagerStub$();
    this._nativeInitWorkerMessageHandler$0();
  }
}
};

$$._IsolateContext = {'': function _IsolateContext(id, ports, isolateStatics) {
  this.id = id;
  this.ports = ports;
  this.isolateStatics = isolateStatics;
},
 'super': 'Object',
 get$id: function() { return this.id; },
 get$ports: function() { return this.ports; },
 initGlobals$0: function() {
  $initGlobals(this);
},
 eval$1: function(code) {
  var old, result, t1;
  old = $._globalState().get$currentContext();
  $._globalState().set$currentContext(this);
  this._setGlobals$0();
  result = null;
  try {
    result = code.call$0();
  } finally {
    t1 = old;
    $._globalState().set$currentContext(t1);
    if (!(old == null))
      old._setGlobals$0();
  }
  return result;
},
 _setGlobals$0: function() {
  $setGlobals(this);
},
 lookup$1: function(portId) {
  var t1 = this.ports;
  return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, portId);
},
 register$2: function(portId, port) {
  if (this.ports.containsKey$1(portId) === true)
    throw $.$$throw($.Exception_Exception("Registry: ports must be registered only once."));
  $.indexSet(this.ports, portId, port);
  $.indexSet($._globalState().get$isolates(), this.id, this);
},
 unregister$1: function(portId) {
  var t1;
  this.ports.remove$1(portId);
  t1 = this.ports;
  if ($.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) === true)
    $._globalState().get$isolates().remove$1(this.id);
},
 _IsolateContext$0: function() {
  var t1, t2;
  t1 = $._globalState();
  t2 = t1.get$nextIsolateId();
  t1.set$nextIsolateId($.add(t2, 1));
  this.id = t2;
  this.ports = $.Map_Map($.$int, $.ReceivePort);
  this.initGlobals$0();
}
};

$$._EventLoop = {'': function _EventLoop(events) {
  this.events = events;
},
 'super': 'Object',
 enqueue$3: function(isolate, fn, msg) {
  var t1 = this.events;
  $.getInterceptor$JSArray(t1).addLast$1(t1, $._IsolateEvent$(isolate, fn, msg));
},
 dequeue$0: function() {
  var t1 = this.events;
  if ($.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) === true)
    return;
  return t1.removeFirst$0();
},
 runIteration$0: function() {
  var event$, t1, t2;
  event$ = this.dequeue$0();
  if (event$ == null) {
    if ($._globalState().get$isWorker() === true)
      $._globalState().maybeCloseWorker$0();
    else {
      if (!($._globalState().get$rootContext() == null))
        if ($._globalState().get$isolates().containsKey$1($._globalState().get$rootContext().get$id()) === true)
          if ($._globalState().get$fromCommandLine() === true) {
            t1 = $._globalState().get$rootContext().get$ports();
            t2 = $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) === true;
            t1 = t2;
          } else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      if (t1)
        throw $.$$throw($.Exception_Exception("Program exited with open ReceivePorts."));
    }
    return false;
  }
  event$.process$0();
  return true;
},
 _runHelper$0: function() {
  if (!($._window() == null))
    new $._EventLoop__runHelper_next(this).call$0();
  else
    for (; this.runIteration$0() === true;)
      ;
},
 run$0: function(exception) {
  var t1, e, trace;
  if ($._globalState().get$isWorker() !== true)
    this._runHelper$0();
  else
    try {
      this._runHelper$0();
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $._globalState().get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)])));
    }

}
};

$$._IsolateEvent = {'': function _IsolateEvent(isolate, fn, message) {
  this.isolate = isolate;
  this.fn = fn;
  this.message = message;
},
 'super': 'Object',
 get$message: function() { return this.message; },
 process$0: function() {
  this.isolate.eval$1(this.fn);
}
};

$$._MainManagerStub = {'': function _MainManagerStub() {
},
 'super': 'Object',
 get$id: function() {
  return 0;
},
 postMessage$1: function(msg) {
  $globalThis.postMessage(msg);
}
};

$$._BaseSendPort = {'': function _BaseSendPort(_liblib2$_isolateId) {
  this._liblib2$_isolateId = _liblib2$_isolateId;
},
 'super': 'Object',
 get$_liblib2$_isolateId: function() { return this._liblib2$_isolateId; },
 _checkReplyTo$1: function(replyTo) {
  if (!(replyTo == null) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_NativeJsSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_WorkerSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_BufferingSendPort))
    throw $.$$throw($.Exception_Exception("SendPort.send: Illegal replyTo port type"));
},
 call$1: function(message) {
  var completer, port;
  completer = $.Completer_Completer();
  port = $.ReceivePortImpl$();
  this.send$2(message, port.toSendPort$0());
  port.receive$1(new $._BaseSendPort_call_anon(port, completer));
  return completer.get$future();
},
 is$Function: true,
 is$SendPort: true
};

$$._NativeJsSendPort = {'': function _NativeJsSendPort(_liblib2$_receivePort, _liblib2$_isolateId) {
  this._liblib2$_receivePort = _liblib2$_receivePort;
  this._liblib2$_isolateId = _liblib2$_isolateId;
},
 'super': '_BaseSendPort',
 get$_liblib2$_receivePort: function() { return this._liblib2$_receivePort; },
 send$2: function(message, replyTo) {
  $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, message, replyTo));
},
 operator$eq$1: function(other) {
  return typeof other === 'object' && other !== null && !!other.is$_NativeJsSendPort && $.eqB(this._liblib2$_receivePort, other._liblib2$_receivePort);
},
 get$hashCode: function() {
  return this._liblib2$_receivePort.get$_liblib2$_id();
},
 is$_NativeJsSendPort: true,
 is$SendPort: true
};

$$._WorkerSendPort = {'': function _WorkerSendPort(_workerId, _receivePortId, _liblib2$_isolateId) {
  this._workerId = _workerId;
  this._receivePortId = _receivePortId;
  this._liblib2$_isolateId = _liblib2$_isolateId;
},
 'super': '_BaseSendPort',
 get$_workerId: function() { return this._workerId; },
 send$2: function(message, replyTo) {
  $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(message, replyTo, this));
},
 operator$eq$1: function(other) {
  var t1;
  if (typeof other === 'object' && other !== null && !!other.is$_WorkerSendPort)
    t1 = $.eqB(this._workerId, other._workerId) && $.eqB(this._liblib2$_isolateId, other._liblib2$_isolateId) && $.eqB(this._receivePortId, other._receivePortId);
  else
    t1 = false;
  return t1;
},
 get$hashCode: function() {
  return $.xor($.xor($.shl(this._workerId, 16), $.shl(this._liblib2$_isolateId, 8)), this._receivePortId);
},
 is$_WorkerSendPort: true,
 is$SendPort: true
};

$$.ReceivePortImpl = {'': function ReceivePortImpl(_liblib2$_id, _liblib2$_callback) {
  this._liblib2$_id = _liblib2$_id;
  this._liblib2$_callback = _liblib2$_callback;
},
 'super': 'Object',
 get$_liblib2$_id: function() { return this._liblib2$_id; },
 get$_liblib2$_callback: function() { return this._liblib2$_callback; },
 _liblib2$_callback$1: function(arg0) {
  return this._liblib2$_callback.call$1(arg0);
},
 _liblib2$_callback$2: function(arg0, arg1) {
  return this._liblib2$_callback.call$2(arg0, arg1);
},
 receive$1: function(onMessage) {
  this._liblib2$_callback = onMessage;
},
 close$0: function() {
  this._liblib2$_callback = null;
  $._globalState().get$currentContext().unregister$1(this._liblib2$_id);
},
 toSendPort$0: function() {
  return $._NativeJsSendPort$(this, $._globalState().get$currentContext().get$id());
},
 ReceivePortImpl$0: function() {
  $._globalState().get$currentContext().register$2(this._liblib2$_id, this);
}
};

$$._PendingSendPortFinder = {'': function _PendingSendPortFinder(ports, _liblib2$_visited) {
  this.ports = ports;
  this._liblib2$_visited = _liblib2$_visited;
},
 'super': '_MessageTraverser0',
 get$ports: function() { return this.ports; },
 visitPrimitive$1: function(x) {
},
 visitList$1: function(list) {
  var t1 = this._liblib2$_visited;
  if (!($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, list) == null))
    return;
  $.indexSet(this._liblib2$_visited, list, true);
  $.getInterceptor$JSArray(list).forEach$1(list, new $._PendingSendPortFinder_visitList_anon(this));
},
 visitMap$1: function(map) {
  var t1 = this._liblib2$_visited;
  if (!($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, map) == null))
    return;
  $.indexSet(this._liblib2$_visited, map, true);
  t1 = map.get$values();
  $.getInterceptor$JSArray(t1).forEach$1(t1, new $._PendingSendPortFinder_visitMap_anon(this));
},
 visitSendPort$1: function(port) {
  if (!!port.is$_BufferingSendPort && port._liblib2$_port == null)
    this.ports.push(port.get$_futurePort());
},
 _PendingSendPortFinder$0: function() {
  this._liblib2$_visited = $._JsVisitedMap$();
}
};

$$._JsSerializer0 = {'': function _JsSerializer(_liblib2$_nextFreeRefId, _liblib2$_visited) {
  this._liblib2$_nextFreeRefId = _liblib2$_nextFreeRefId;
  this._liblib2$_visited = _liblib2$_visited;
},
 'super': '_Serializer0',
 visitSendPort$1: function(x) {
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return ["sendport", x._workerId, x._liblib2$_isolateId, x._receivePortId];
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw("Illegal underlying port " + $.S(x));
},
 visitNativeJsSendPort$1: function(port) {
  return ["sendport", $._globalState().get$currentManagerId(), port._liblib2$_isolateId, port._liblib2$_receivePort.get$_liblib2$_id()];
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._liblib2$_port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
},
 _JsSerializer$0: function() {
  this._liblib2$_visited = $._JsVisitedMap$();
}
};

$$._JsCopier = {'': function _JsCopier(_liblib2$_visited) {
  this._liblib2$_visited = _liblib2$_visited;
},
 'super': '_Copier',
 visitSendPort$1: function(x) {
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return this.visitWorkerSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw("Illegal underlying port " + $.S(this.get$p()));
},
 visitNativeJsSendPort$1: function(port) {
  return $._NativeJsSendPort$(port._liblib2$_receivePort, port._liblib2$_isolateId);
},
 visitWorkerSendPort$1: function(port) {
  return $._WorkerSendPort$(port._workerId, port._liblib2$_isolateId, port._receivePortId);
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._liblib2$_port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
},
 _JsCopier$0: function() {
  this._liblib2$_visited = $._JsVisitedMap$();
}
};

$$._JsDeserializer0 = {'': function _JsDeserializer(_liblib2$_deserialized) {
  this._liblib2$_deserialized = _liblib2$_deserialized;
},
 'super': '_Deserializer0',
 deserializeSendPort$1: function(x) {
  var t1, managerId, isolateId, receivePortId, isolate;
  t1 = $.getInterceptor$JSStringJSArray(x);
  managerId = t1.operator$index$1(x, 1);
  isolateId = t1.operator$index$1(x, 2);
  receivePortId = t1.operator$index$1(x, 3);
  if ($.eqB(managerId, $._globalState().get$currentManagerId())) {
    t1 = $._globalState().get$isolates();
    isolate = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, isolateId);
    if (isolate == null)
      return;
    return $._NativeJsSendPort$(isolate.lookup$1(receivePortId), isolateId);
  } else
    return $._WorkerSendPort$(managerId, isolateId, receivePortId);
}
};

$$._JsVisitedMap = {'': function _JsVisitedMap(tagged) {
  this.tagged = tagged;
},
 'super': 'Object',
 operator$index$1: function(object) {
  return object['__MessageTraverser__attached_info__'];
},
 operator$indexSet$2: function(object, info) {
  var t1 = this.tagged;
  $.getInterceptor$JSArray(t1).add$1(t1, object);
  object['__MessageTraverser__attached_info__'] = info;
},
 reset$0: function() {
  var t1 = $.List_List(null);
  $.setRuntimeTypeInfo(t1, []);
  this.tagged = t1;
},
 cleanup$0: function() {
  var t1, length$, i;
  t1 = this.tagged;
  length$ = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  if (typeof length$ !== 'number')
    return this.cleanup$0$bailout(1, length$);
  i = 0;
  for (; i < length$; ++i) {
    t1 = this.tagged;
    $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i)['__MessageTraverser__attached_info__'] = null;
  }
  this.tagged = null;
},
 cleanup$0$bailout: function(state0, length$) {
  var i, t1;
  i = 0;
  for (; $.ltB(i, length$); ++i) {
    t1 = this.tagged;
    $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i)['__MessageTraverser__attached_info__'] = null;
  }
  this.tagged = null;
}
};

$$._MessageTraverserVisitedMap0 = {'': function _MessageTraverserVisitedMap() {
},
 'super': 'Object',
 operator$index$1: function(object) {
  return;
},
 operator$indexSet$2: function(object, info) {
},
 reset$0: function() {
},
 cleanup$0: function() {
}
};

$$._MessageTraverser0 = {'': function _MessageTraverser() {
},
 'super': 'Object',
 traverse$1: function(x) {
  var t1, result;
  t1 = x;
  if (t1 == null || typeof t1 === 'string' || typeof t1 === 'number' || typeof t1 === 'boolean')
    return this.visitPrimitive$1(x);
  this._liblib2$_visited.reset$0();
  result = null;
  try {
    result = this._liblib2$_dispatch$1(x);
  } finally {
    this._liblib2$_visited.cleanup$0();
  }
  return result;
},
 _liblib2$_dispatch$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return this.visitPrimitive$1(x);
  if (typeof x === 'object' && x !== null && (x.constructor === Array || x.is$List()))
    return this.visitList$1(x);
  if (typeof x === 'object' && x !== null && x.is$Map())
    return this.visitMap$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPort)
    return this.visitSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPortSync)
    return this.visitSendPortSync$1(x);
  return this.visitObject$1(x);
},
 visitObject$1: function(x) {
  throw $.$$throw("Message serialization: Illegal value " + $.S(x) + " passed");
}
};

$$._Copier = {'': function _Copier() {
},
 'super': '_MessageTraverser0',
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  var t1, copy, len, i;
  if (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior())
    return this.visitList$1$bailout(1, list);
  t1 = this._liblib2$_visited;
  copy = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, list);
  if (!(copy == null))
    return copy;
  len = list.length;
  copy = $.List_List(len);
  $.setRuntimeTypeInfo(copy, []);
  $.indexSet(this._liblib2$_visited, list, copy);
  for (i = 0; i < len; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    copy[i] = this._liblib2$_dispatch$1(list[i]);
  }
  return copy;
},
 visitList$1$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      list = env0;
      break;
    case 2:
      len = env2;
      list = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      t1 = this._liblib2$_visited;
      copy = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, list);
      if (!(copy == null))
        return copy;
      t1 = $.getInterceptor$JSStringJSArray(list);
      len = t1.get$length(list);
    case 2:
      var list, t1, copy, len, i, t2;
      state0 = 0;
      copy = $.List_List(len);
      $.setRuntimeTypeInfo(copy, []);
      $.indexSet(this._liblib2$_visited, list, copy);
      for (i = 0; $.ltB(i, len); ++i) {
        t2 = this._liblib2$_dispatch$1(t1.operator$index$1(list, i));
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t2;
      }
      return copy;
  }
},
 visitMap$1: function(map) {
  var t1, t2;
  t1 = {};
  t2 = this._liblib2$_visited;
  t1.copy_0 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, map);
  t2 = t1.copy_0;
  if (!(t2 == null))
    return t2;
  t1.copy_0 = $.Map_Map();
  $.indexSet(this._liblib2$_visited, map, t1.copy_0);
  map.forEach$1(new $._Copier_visitMap_anon(t1, this));
  return t1.copy_0;
}
};

$$._Serializer0 = {'': function _Serializer() {
},
 'super': '_MessageTraverser0',
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  var t1, copyId, id;
  t1 = this._liblib2$_visited;
  copyId = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, list);
  if (!(copyId == null))
    return ["ref", copyId];
  id = this._liblib2$_nextFreeRefId;
  this._liblib2$_nextFreeRefId = id + 1;
  $.indexSet(this._liblib2$_visited, list, id);
  return ["list", id, this._liblib2$_serializeList$1(list)];
},
 visitMap$1: function(map) {
  var t1, copyId, id;
  t1 = this._liblib2$_visited;
  copyId = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, map);
  if (!(copyId == null))
    return ["ref", copyId];
  id = this._liblib2$_nextFreeRefId;
  this._liblib2$_nextFreeRefId = id + 1;
  $.indexSet(this._liblib2$_visited, map, id);
  return ["map", id, this._liblib2$_serializeList$1(map.get$keys()), this._liblib2$_serializeList$1(map.get$values())];
},
 _liblib2$_serializeList$1: function(list) {
  var t1, len, result, i;
  if (typeof list !== 'string' && (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior()))
    return this._liblib2$_serializeList$1$bailout(1, list);
  t1 = $.getInterceptor$JSStringJSArray(list);
  len = list.length;
  result = $.List_List(len);
  $.setRuntimeTypeInfo(result, []);
  for (i = 0; i < len; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    result[i] = this._liblib2$_dispatch$1(list[i]);
  }
  return result;
},
 _liblib2$_serializeList$1$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      list = env0;
      break;
    case 2:
      len = env2;
      t1 = env1;
      list = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      t1 = $.getInterceptor$JSStringJSArray(list);
      len = t1.get$length(list);
    case 2:
      var list, t1, len, result, i, t2;
      state0 = 0;
      result = $.List_List(len);
      $.setRuntimeTypeInfo(result, []);
      for (i = 0; $.ltB(i, len); ++i) {
        t2 = this._liblib2$_dispatch$1(t1.operator$index$1(list, i));
        if (i >= result.length)
          throw $.ioore(i);
        result[i] = t2;
      }
      return result;
  }
}
};

$$._Deserializer0 = {'': function _Deserializer() {
},
 'super': 'Object',
 deserialize$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return x;
  this._liblib2$_deserialized = $.HashMap_HashMap();
  return this._liblib2$_deserializeHelper$1(x);
},
 _liblib2$_deserializeHelper$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return x;
  switch ($.getInterceptor$JSStringJSArray(x).operator$index$1(x, 0)) {
    case "ref":
      return this._liblib2$_deserializeRef$1(x);
    case "list":
      return this._liblib2$_deserializeList$1(x);
    case "map":
      return this._liblib2$_deserializeMap$1(x);
    case "sendport":
      return this.deserializeSendPort$1(x);
    default:
      return this.deserializeObject$1(x);
  }
},
 _liblib2$_deserializeRef$1: function(x) {
  var id, t1;
  id = $.getInterceptor$JSStringJSArray(x).operator$index$1(x, 1);
  t1 = this._liblib2$_deserialized;
  return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, id);
},
 _liblib2$_deserializeList$1: function(x) {
  var t1, id, dartList, len, i;
  t1 = $.getInterceptor$JSStringJSArray(x);
  id = t1.operator$index$1(x, 1);
  dartList = t1.operator$index$1(x, 2);
  if (typeof dartList !== 'object' || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.is$JavaScriptIndexingBehavior())
    return this._liblib2$_deserializeList$1$bailout(1, dartList, id);
  $.indexSet(this._liblib2$_deserialized, id, dartList);
  len = dartList.length;
  for (i = 0; i < len; ++i) {
    if (i >= dartList.length)
      throw $.ioore(i);
    t1 = this._liblib2$_deserializeHelper$1(dartList[i]);
    if (i >= dartList.length)
      throw $.ioore(i);
    dartList[i] = t1;
  }
  return dartList;
},
 _liblib2$_deserializeList$1$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      id = env1;
      dartList = env0;
      break;
    case 2:
      len = env2;
      t2 = env1;
      dartList = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = $.getInterceptor$JSStringJSArray(x);
      id = t1.operator$index$1(x, 1);
      dartList = t1.operator$index$1(x, 2);
    case 1:
      state0 = 0;
      $.indexSet(this._liblib2$_deserialized, id, dartList);
      t2 = $.getInterceptor$JSStringJSArray(dartList);
      len = t2.get$length(dartList);
    case 2:
      var t1, id, dartList, t2, len, i;
      state0 = 0;
      for (i = 0; $.ltB(i, len); ++i)
        $.indexSet(dartList, i, this._liblib2$_deserializeHelper$1(t2.operator$index$1(dartList, i)));
      return dartList;
  }
},
 _liblib2$_deserializeMap$1: function(x) {
  var result, t1, id, keys, values, t3, len, i, key;
  result = $.Map_Map();
  t1 = $.getInterceptor$JSStringJSArray(x);
  id = t1.operator$index$1(x, 1);
  $.indexSet(this._liblib2$_deserialized, id, result);
  keys = t1.operator$index$1(x, 2);
  if (typeof keys !== 'string' && (typeof keys !== 'object' || keys === null || keys.constructor !== Array && !keys.is$JavaScriptIndexingBehavior()))
    return this._liblib2$_deserializeMap$1$bailout(1, x, result, t1, keys);
  values = t1.operator$index$1(x, 3);
  if (typeof values !== 'string' && (typeof values !== 'object' || values === null || values.constructor !== Array && !values.is$JavaScriptIndexingBehavior()))
    return this._liblib2$_deserializeMap$1$bailout(2, values, result, keys);
  t3 = $.getInterceptor$JSStringJSArray(keys);
  len = keys.length;
  for (i = 0; i < len; ++i) {
    if (i >= keys.length)
      throw $.ioore(i);
    key = this._liblib2$_deserializeHelper$1(keys[i]);
    if (i >= values.length)
      throw $.ioore(i);
    $.indexSet(result, key, this._liblib2$_deserializeHelper$1(values[i]));
  }
  return result;
},
 _liblib2$_deserializeMap$1$bailout: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      keys = env3;
      t1 = env2;
      result = env1;
      x = env0;
      break;
    case 2:
      keys = env2;
      result = env1;
      values = env0;
      break;
    case 3:
      keys = env4;
      result = env3;
      len = env2;
      t3 = env1;
      values = env0;
      break;
  }
  switch (state0) {
    case 0:
      result = $.Map_Map();
      t1 = $.getInterceptor$JSStringJSArray(x);
      id = t1.operator$index$1(x, 1);
      $.indexSet(this._liblib2$_deserialized, id, result);
      keys = t1.operator$index$1(x, 2);
    case 1:
      state0 = 0;
      values = t1.operator$index$1(x, 3);
    case 2:
      state0 = 0;
      t3 = $.getInterceptor$JSStringJSArray(keys);
      len = t3.get$length(keys);
    case 3:
      var result, t1, id, keys, x, values, t3, len, i;
      state0 = 0;
      for (t1 = $.getInterceptor$JSStringJSArray(values), i = 0; $.ltB(i, len); ++i)
        $.indexSet(result, this._liblib2$_deserializeHelper$1(t3.operator$index$1(keys, i)), this._liblib2$_deserializeHelper$1(t1.operator$index$1(values, i)));
      return result;
  }
},
 deserializeObject$1: function(x) {
  throw $.$$throw("Unexpected serialized object");
}
};

$$.main_anon = {'': function main_anon() {
},
 'super': 'Closure',
 call$1: function(r) {
  var t1 = r.get$message();
  return $.print($.getInterceptor(t1).toString$0(t1));
},
 is$Function: true
};

$$.main_anon0 = {'': function main_anon(logger_0, selectElement_1) {
  this.logger_0 = logger_0;
  this.selectElement_1 = selectElement_1;
},
 'super': 'Closure',
 call$1: function(result) {
  var t1, t2;
  t1 = this.logger_0;
  t1.fine$1("getPorts = " + $.S(result));
  t2 = $.getInterceptor(result);
  t1.fine$1("getPorts = " + $.S(t2.get$runtimeType(result)));
  t2.forEach$1(result, new $.main__anon1(t1, this.selectElement_1));
},
 is$Function: true
};

$$.main__anon1 = {'': function main__anon(logger_2, selectElement_3) {
  this.logger_2 = logger_2;
  this.selectElement_3 = selectElement_3;
},
 'super': 'Closure',
 call$1: function(port) {
  var optionElement;
  this.logger_2.fine$1("port = " + $.S(port) + " , " + $.S($.getInterceptor(port).get$runtimeType(port)));
  optionElement = $.OptionElement_OptionElement($, $, $, $);
  optionElement.set$value(port);
  optionElement.set$text(port);
  this.selectElement_3.append$1(optionElement);
},
 is$Function: true
};

$$.main_anon1 = {'': function main_anon(selectElement_4, serial_5) {
  this.selectElement_4 = selectElement_4;
  this.serial_5 = serial_5;
},
 'super': 'Closure',
 call$1: function(event$) {
  var t1 = this.serial_5;
  t1.openPort$1(this.selectElement_4.get$value()).then$1(new $.main__anon0(t1));
},
 is$Function: true
};

$$.main__anon0 = {'': function main__anon(serial_6) {
  this.serial_6 = serial_6;
},
 'super': 'Closure',
 call$1: function(result) {
  var t1, t2;
  t1 = new $.main___anon();
  t2 = this.serial_6;
  t2.set$onRead(t1);
  t2.startListening$0();
},
 is$Function: true
};

$$.main___anon = {'': function main___anon() {
},
 'super': 'Closure',
 call$1: function(str) {
  var p, container, t1;
  p = $.ParagraphElement_ParagraphElement();
  p.set$text(str);
  container = $.query("#container");
  t1 = container.get$children();
  $.getInterceptor$JSArray(t1).add$1(t1, p);
  container.set$scrollTop(container.get$scrollHeight());
},
 is$Function: true
};

$$.main_anon2 = {'': function main_anon(logger_7, serial_8) {
  this.logger_7 = logger_7;
  this.serial_8 = serial_8;
},
 'super': 'Closure',
 call$1: function(event$) {
  var data, t1;
  data = $.query("#pingData").get$value();
  t1 = this.logger_7;
  t1.fine$1("data " + $.S(data));
  this.serial_8.write$1($.S(data) + "\n").then$1(new $.main__anon(t1));
},
 is$Function: true
};

$$.main__anon = {'': function main__anon(logger_9) {
  this.logger_9 = logger_9;
},
 'super': 'Closure',
 call$1: function(result) {
  this.logger_9.fine$1("serial.write " + $.S(result.get$bytesWritten()));
},
 is$Function: true
};

$$.Maps__emitMap_anon = {'': function Maps__emitMap_anon(box_0, result_1, visiting_2) {
  this.box_0 = box_0;
  this.result_1 = result_1;
  this.visiting_2 = visiting_2;
},
 'super': 'Closure',
 call$2: function(k, v) {
  var t1, t2;
  t1 = this.box_0;
  if (t1.first_0 !== true) {
    t2 = this.result_1;
    $.getInterceptor$JSArray(t2).add$1(t2, ", ");
  }
  t1.first_0 = false;
  t1 = this.result_1;
  t2 = this.visiting_2;
  $.Collections__emitObject(k, t1, t2);
  $.getInterceptor$JSArray(t1).add$1(t1, ": ");
  $.Collections__emitObject(v, t1, t2);
},
 is$Function: true
};

$$._LinkedHashMapImpl_forEach_anon = {'': function _LinkedHashMapImpl_forEach_anon(f_0) {
  this.f_0 = f_0;
},
 'super': 'Closure',
 call$1: function(entry) {
  this.f_0.call$2(entry.get$key(), entry.get$value());
},
 is$Function: true
};

$$.DoubleLinkedQueue_length_anon = {'': function DoubleLinkedQueue_length_anon(box_0) {
  this.box_0 = box_0;
},
 'super': 'Closure',
 call$1: function(element) {
  var t1 = this.box_0;
  t1.counter_0 = $.add(t1.counter_0, 1);
},
 is$Function: true
};

$$.NoSuchMethodError_toString_anon = {'': function NoSuchMethodError_toString_anon(box_0) {
  this.box_0 = box_0;
},
 'super': 'Closure',
 call$2: function(key, value) {
  var t1, t2;
  t1 = this.box_0;
  if ($.gtB(t1.i_1, 0)) {
    t2 = t1.sb_0;
    $.getInterceptor$JSArray(t2).add$1(t2, ", ");
  }
  t2 = t1.sb_0;
  $.getInterceptor$JSArray(t2).add$1(t2, key);
  t2 = t1.sb_0;
  $.getInterceptor$JSArray(t2).add$1(t2, ": ");
  t2 = t1.sb_0;
  $.getInterceptor$JSArray(t2).add$1(t2, $.Error_safeToString(value));
  t1.i_1 = $.add(t1.i_1, 1);
},
 is$Function: true
};

$$.FilteredElementList__filtered_anon = {'': function FilteredElementList__filtered_anon() {
},
 'super': 'Closure',
 call$1: function(n) {
  return typeof n === 'object' && n !== null && n.is$Element();
},
 is$Function: true
};

$$._ChildrenElementList_filter_anon = {'': function _ChildrenElementList_filter_anon(output_0, f_1) {
  this.output_0 = output_0;
  this.f_1 = f_1;
},
 'super': 'Closure',
 call$1: function(element) {
  var t1;
  if (this.f_1.call$1(element) === true) {
    t1 = this.output_0;
    $.getInterceptor$JSArray(t1).add$1(t1, element);
  }
},
 is$Function: true
};

$$.FilteredElementList_removeRange_anon = {'': function FilteredElementList_removeRange_anon() {
},
 'super': 'Closure',
 call$1: function(el) {
  return el.remove$0();
},
 is$Function: true
};

$$.Serial_getPorts_anon = {'': function Serial_getPorts_anon(completer_0) {
  this.completer_0 = completer_0;
},
 'super': 'Closure',
 call$0: function() {
  var t1 = $.Callback$once(new $.Serial_getPorts__callback(this.completer_0));
  $.context().set$callback(t1);
  $.context().get$chrome().get$serial().getPorts$1($.context().get$callback());
},
 is$Function: true
};

$$.Serial_getPorts__callback = {'': function Serial_getPorts__callback(completer_1) {
  this.completer_1 = completer_1;
},
 'super': 'Closure',
 call$1: function(result) {
  var list, i;
  if (typeof result !== 'string' && (typeof result !== 'object' || result === null || result.constructor !== Array && !result.is$JavaScriptIndexingBehavior()))
    return this.call$1$bailout(1, result);
  list = $.List_List(null);
  $.setRuntimeTypeInfo(list, []);
  for (i = 0; i < result.length; ++i)
    list.push(result[i]);
  this.completer_1.complete$1(list);
},
 call$1$bailout: function(state0, result) {
  var list, t1, i;
  list = $.List_List(null);
  $.setRuntimeTypeInfo(list, []);
  for (t1 = $.getInterceptor$JSStringJSArray(result), i = 0; $.ltB(i, t1.get$length(result)); ++i)
    list.push(t1.operator$index$1(result, i));
  this.completer_1.complete$1(list);
},
 is$Function: true
};

$$.invokeClosure_anon = {'': function invokeClosure_anon(closure_0) {
  this.closure_0 = closure_0;
},
 'super': 'Closure',
 call$0: function() {
  return this.closure_0.call$0();
},
 is$Function: true
};

$$.invokeClosure_anon0 = {'': function invokeClosure_anon(arg1_1, closure_2) {
  this.arg1_1 = arg1_1;
  this.closure_2 = closure_2;
},
 'super': 'Closure',
 call$0: function() {
  return this.closure_2.call$1(this.arg1_1);
},
 is$Function: true
};

$$.invokeClosure_anon1 = {'': function invokeClosure_anon(arg1_3, closure_4, arg2_5) {
  this.arg1_3 = arg1_3;
  this.closure_4 = closure_4;
  this.arg2_5 = arg2_5;
},
 'super': 'Closure',
 call$0: function() {
  return this.closure_4.call$2(this.arg1_3, this.arg2_5);
},
 is$Function: true
};

$$.anon = {'': function anon(this_0) {
  this.this_0 = this_0;
},
 'super': 'Closure',
 call$1: function(msg, exception) {
  var t1, t2, t3, receiver, t4, method, t5, args, result, e;
  try {
    t1 = this.this_0.get$_registry();
    t2 = $.getInterceptor$JSStringJSArray(t1);
    t3 = msg;
    receiver = t2.operator$index$1(t1, $.getInterceptor$JSStringJSArray(t3).operator$index$1(t3, 0));
    t4 = msg;
    method = $.getInterceptor$JSStringJSArray(t4).operator$index$1(t4, 1);
    t5 = msg;
    t5 = $.getInterceptor$JSStringJSArray(t5).operator$index$1(t5, 2);
    args = $.getInterceptor$JSArray(t5).map$1(t5, $._deserialize);
    if ($.eqB(method, "#call")) {
      result = null;
      t1 = args;
      switch ($.getInterceptor$JSStringJSArray(t1).get$length(t1)) {
        case 0:
          result = $._serialize(receiver.call$0());
          break;
        case 1:
          t1 = receiver;
          t2 = args;
          result = $._serialize(t1.call$1($.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, 0)));
          break;
        case 2:
          t1 = receiver;
          t2 = args;
          t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, 0);
          t3 = args;
          result = $._serialize(t1.call$2(t2, $.getInterceptor$JSStringJSArray(t3).operator$index$1(t3, 1)));
          break;
        case 3:
          t1 = receiver;
          t2 = args;
          t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, 0);
          t3 = args;
          t3 = $.getInterceptor$JSStringJSArray(t3).operator$index$1(t3, 1);
          t4 = args;
          result = $._serialize(t1.call$3(t2, t3, $.getInterceptor$JSStringJSArray(t4).operator$index$1(t4, 2)));
          break;
        case 4:
          t1 = receiver;
          t2 = args;
          t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, 0);
          t3 = args;
          t3 = $.getInterceptor$JSStringJSArray(t3).operator$index$1(t3, 1);
          t4 = args;
          t4 = $.getInterceptor$JSStringJSArray(t4).operator$index$1(t4, 2);
          t5 = args;
          result = $._serialize(t1.call$4(t2, t3, t4, $.getInterceptor$JSStringJSArray(t5).operator$index$1(t5, 3)));
          break;
        default:
          throw $.$$throw("Unsupported number of arguments.");
      }
      t1 = ["return", result];
      return t1;
    } else
      throw $.$$throw("Invocation unsupported on non-function Dart proxies");
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    return ["throws", $.S(e)];
  }

},
 is$Function: true
};

$$._HashSetImpl_filter_anon = {'': function _HashSetImpl_filter_anon(f_0, result_1) {
  this.f_0 = f_0;
  this.result_1 = result_1;
},
 'super': 'Closure',
 call$2: function(key, value) {
  var t1;
  if (this.f_0.call$1(key) === true) {
    t1 = this.result_1;
    $.getInterceptor$JSArray(t1).add$1(t1, key);
  }
},
 is$Function: true
};

$$._HashSetImpl_forEach_anon = {'': function _HashSetImpl_forEach_anon(f_0) {
  this.f_0 = f_0;
},
 'super': 'Closure',
 call$2: function(key, value) {
  this.f_0.call$1(key);
},
 is$Function: true
};

$$.ReceivePortSync_receive_anon = {'': function ReceivePortSync_receive_anon(this_0) {
  this.this_0 = this_0;
},
 'super': 'Closure',
 call$1: function(e) {
  var data, t1, replyTo, message, result;
  data = $.JSON_parse(e.get$detail());
  t1 = $.getInterceptor$JSStringJSArray(data);
  replyTo = t1.operator$index$1(data, 0);
  t1 = t1.operator$index$1(data, 1);
  message = $._JsDeserializer$().deserialize$1(t1);
  result = this.this_0._callback$1(message);
  $._dispatchEvent(replyTo, $._JsSerializer$().traverse$1(result));
},
 is$Function: true
};

$$.Storage_values_anon = {'': function Storage_values_anon(values_0) {
  this.values_0 = values_0;
},
 'super': 'Closure',
 call$2: function(k, v) {
  var t1 = this.values_0;
  return $.getInterceptor$JSArray(t1).add$1(t1, v);
},
 is$Function: true
};

$$._LinkedHashMapImpl_values_anon = {'': function _LinkedHashMapImpl_values_anon(box_0, list_1) {
  this.box_0 = box_0;
  this.list_1 = list_1;
},
 'super': 'Closure',
 call$1: function(entry) {
  var t1, t2, t3;
  t1 = this.list_1;
  t2 = this.box_0;
  t3 = t2.index_0;
  t2.index_0 = $.add(t3, 1);
  $.indexSet(t1, t3, entry.get$value());
},
 is$Function: true
};

$$._HashMapImpl_values_anon = {'': function _HashMapImpl_values_anon(box_0, list_1) {
  this.box_0 = box_0;
  this.list_1 = list_1;
},
 'super': 'Closure',
 call$2: function(key, value) {
  var t1, t2, t3;
  t1 = this.list_1;
  t2 = this.box_0;
  t3 = t2.i_0;
  t2.i_0 = $.add(t3, 1);
  $.indexSet(t1, t3, value);
},
 is$Function: true
};

$$.Storage_keys_anon = {'': function Storage_keys_anon(keys_0) {
  this.keys_0 = keys_0;
},
 'super': 'Closure',
 call$2: function(k, v) {
  var t1 = this.keys_0;
  return $.getInterceptor$JSArray(t1).add$1(t1, k);
},
 is$Function: true
};

$$._LinkedHashMapImpl_keys_anon = {'': function _LinkedHashMapImpl_keys_anon(box_0, list_1) {
  this.box_0 = box_0;
  this.list_1 = list_1;
},
 'super': 'Closure',
 call$1: function(entry) {
  var t1, t2, t3;
  t1 = this.list_1;
  t2 = this.box_0;
  t3 = t2.index_0;
  t2.index_0 = $.add(t3, 1);
  $.indexSet(t1, t3, entry.get$key());
},
 is$Function: true
};

$$._HashMapImpl_keys_anon = {'': function _HashMapImpl_keys_anon(box_0, list_1) {
  this.box_0 = box_0;
  this.list_1 = list_1;
},
 'super': 'Closure',
 call$2: function(key, value) {
  var t1, t2, t3;
  t1 = this.list_1;
  t2 = this.box_0;
  t3 = t2.i_0;
  t2.i_0 = $.add(t3, 1);
  $.indexSet(t1, t3, key);
},
 is$Function: true
};

$$._RemoteSendPortSync__call_anon = {'': function _RemoteSendPortSync__call_anon(box_0) {
  this.box_0 = box_0;
},
 'super': 'Closure',
 call$1: function(e) {
  var result = $.JSON_parse(e.get$detail());
  this.box_0.result_0 = result;
},
 is$Function: true
};

$$._JsonStringifier_stringifyJsonValue_anon = {'': function _JsonStringifier_stringifyJsonValue_anon(box_0, this_1) {
  this.box_0 = box_0;
  this.this_1 = this_1;
},
 'super': 'Closure',
 call$2: function(key, value) {
  var t1, t2, t3;
  t1 = this.box_0;
  t2 = t1.first_0 !== true;
  t3 = this.this_1;
  if (t2) {
    t2 = t3.get$sb();
    $.getInterceptor$JSArray(t2).add$1(t2, ",\"");
  } else {
    t2 = t3.get$sb();
    $.getInterceptor$JSArray(t2).add$1(t2, "\"");
  }
  t2 = this.this_1;
  $._JsonStringifier_escape(t2.get$sb(), key);
  t3 = t2.get$sb();
  $.getInterceptor$JSArray(t3).add$1(t3, "\":");
  t2.stringifyValue$1(value);
  t1.first_0 = false;
},
 is$Function: true
};

$$._deserialize_deserializeFunction = {'': function _deserialize_deserializeFunction() {
},
 'super': 'Closure',
 call$1: function(message) {
  var t1, id, port;
  t1 = $.getInterceptor$JSStringJSArray(message);
  id = t1.operator$index$1(message, 1);
  port = t1.operator$index$1(message, 2);
  if ($.eqB(port, $.get$_proxiedObjectTable().get$sendPort()))
    return $.get$_proxiedObjectTable().get$1(id);
  else
    return $._FunctionProxy$_internal(port, id)._call;
},
 is$Function: true
};

$$._deserialize_deserializeObject = {'': function _deserialize_deserializeObject() {
},
 'super': 'Closure',
 call$1: function(message) {
  var t1, id, port;
  t1 = $.getInterceptor$JSStringJSArray(message);
  id = t1.operator$index$1(message, 1);
  port = t1.operator$index$1(message, 2);
  if ($.eqB(port, $.get$_proxiedObjectTable().get$sendPort()))
    return $.get$_proxiedObjectTable().get$1(id);
  else
    return $.Proxy$_internal(port, id);
},
 is$Function: true
};

$$.ConstantMap_values_anon = {'': function ConstantMap_values_anon(this_0, result_1) {
  this.this_0 = this_0;
  this.result_1 = result_1;
},
 'super': 'Closure',
 call$1: function(key) {
  var t1, t2, t3;
  t1 = this.result_1;
  t2 = $.getInterceptor$JSArray(t1);
  t3 = this.this_0;
  return t2.add$1(t1, $.getInterceptor$JSStringJSArray(t3).operator$index$1(t3, key));
},
 is$Function: true
};

$$.ConstantMap_forEach_anon = {'': function ConstantMap_forEach_anon(this_0, f_1) {
  this.this_0 = this_0;
  this.f_1 = f_1;
},
 'super': 'Closure',
 call$1: function(key) {
  var t1, t2;
  t1 = this.f_1;
  t2 = this.this_0;
  return t1.call$2(key, $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, key));
},
 is$Function: true
};

$$.anon0 = {'': function anon(port_0, id_1) {
  this.port_0 = port_0;
  this.id_1 = id_1;
},
 'super': 'Closure',
 call$4: function(arg0, arg1, arg2, arg3) {
  var t1, t2, t3, t4, args, message, result;
  t1 = $ === arg0;
  if (t1)
    arg0 = null;
  t1 = !t1;
  t2 = $ === arg1;
  if (t2)
    arg1 = null;
  t2 = !t2;
  t3 = $ === arg2;
  if (t3)
    arg2 = null;
  t3 = !t3;
  t4 = $ === arg3;
  if (t4)
    arg3 = null;
  if (!t4)
    args = [arg0, arg1, arg2, arg3];
  else if (t3)
    args = [arg0, arg1, arg2];
  else if (t2)
    args = [arg0, arg1];
  else
    args = t1 ? [arg0] : [];
  message = [this.id_1, "", "apply", $.CONSTANT2.map$1(args, $._serialize)];
  result = this.port_0.callSync$1(message);
  t1 = $.getInterceptor$JSStringJSArray(result);
  if ($.eqB(t1.operator$index$1(result, 0), "throws"))
    throw $.$$throw(t1.operator$index$1(result, 1));
  return $._deserialize(t1.operator$index$1(result, 1));
},
 call$0: function() {
  return this.call$4($, $, $, $);
},
 call$1: function(arg0) {
  return this.call$4(arg0, $, $, $);
},
 call$2: function(arg0, arg1) {
  return this.call$4(arg0, arg1, $, $);
},
 call$3: function(arg0, arg1, arg2) {
  return this.call$4(arg0, arg1, arg2, $);
},
 is$Function: true
};

$$._HashSetImpl_map_anon = {'': function _HashSetImpl_map_anon(result_0, f_1) {
  this.result_0 = result_0;
  this.f_1 = f_1;
},
 'super': 'Closure',
 call$2: function(key, value) {
  var t1 = this.result_0;
  $.getInterceptor$JSArray(t1).add$1(t1, this.f_1.call$1(key));
},
 is$Function: true
};

$$._initialize_anon = {'': function _initialize_anon() {
},
 'super': 'Closure',
 call$1: function(_) {
  return $._enterScope();
},
 is$Function: true
};

$$._initialize_anon0 = {'': function _initialize_anon() {
},
 'super': 'Closure',
 call$1: function(args) {
  return $._exitScope($.getInterceptor$JSStringJSArray(args).operator$index$1(args, 0));
},
 is$Function: true
};

$$._HashSetImpl_addAll_anon = {'': function _HashSetImpl_addAll_anon(this_0) {
  this.this_0 = this_0;
},
 'super': 'Closure',
 call$1: function(value) {
  $.indexSet(this.this_0.get$_backingMap(), value, value);
},
 is$Function: true
};

$$.anon1 = {'': function anon(f_0, this_1) {
  this.f_0 = f_0;
  this.this_1 = this_1;
},
 'super': 'Closure',
 call$4: function(arg1, arg2, arg3, arg4) {
  var t1, arg1_check, t2, arg2_check, arg3_check, arg4_check;
  t1 = $ === arg1;
  if (t1)
    arg1 = null;
  arg1_check = !t1;
  t2 = $ === arg2;
  if (t2)
    arg2 = null;
  arg2_check = !t2;
  t1 = $ === arg3;
  if (t1)
    arg3 = null;
  arg3_check = !t1;
  t2 = $ === arg4;
  if (t2)
    arg4 = null;
  arg4_check = !t2;
  try {
    if (arg1_check !== true) {
      t1 = this.f_0.call$0();
      return t1;
    } else if (arg2_check !== true) {
      t1 = this.f_0.call$1(arg1);
      return t1;
    } else if (arg3_check !== true) {
      t1 = this.f_0.call$2(arg1, arg2);
      return t1;
    } else {
      t1 = arg4_check !== true;
      t2 = this.f_0;
      if (t1) {
        t1 = t2.call$3(arg1, arg2, arg3);
        return t1;
      } else {
        t1 = t2.call$4(arg1, arg2, arg3, arg4);
        return t1;
      }
    }
  } finally {
    $.get$_proxiedObjectTable().invalidate$1(this.this_1.get$_liblib1$_id());
  }
},
 call$0: function() {
  return this.call$4($, $, $, $);
},
 call$1: function(arg1) {
  return this.call$4(arg1, $, $, $);
},
 call$2: function(arg1, arg2) {
  return this.call$4(arg1, arg2, $, $);
},
 call$3: function(arg1, arg2, arg3) {
  return this.call$4(arg1, arg2, arg3, $);
},
 is$Function: true
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {'': function _convertDartToNative_PrepareForStructuredClone_findSlot(values_1, copies_2) {
  this.values_1 = values_1;
  this.copies_2 = copies_2;
},
 'super': 'Closure',
 call$1: function(value) {
  var t1, t3, length$, i, t2;
  t1 = this.values_1;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.call$1$bailout1(1, value, t1);
  t3 = $.getInterceptor$JSStringJSArray(t1);
  length$ = t1.length;
  for (i = 0; i < length$; ++i) {
    t2 = t1[i];
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  t3.add$1(t1, value);
  t1 = this.copies_2;
  $.getInterceptor$JSArray(t1).add$1(t1, null);
  return length$;
},
 call$1$bailout1: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      t1 = env1;
      value = env0;
      break;
    case 2:
      length$ = env3;
      t3 = env2;
      t1 = env1;
      value = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.values_1;
    case 1:
      state0 = 0;
      t3 = $.getInterceptor$JSStringJSArray(t1);
      length$ = t3.get$length(t1);
    case 2:
      var t1, value, t3, length$, i, t2;
      state0 = 0;
      for (i = 0; $.ltB(i, length$); ++i) {
        t2 = t3.operator$index$1(t1, i);
        if (t2 == null ? value == null : t2 === value)
          return i;
      }
      $.getInterceptor$JSArray(t1).add$1(t1, value);
      t1 = this.copies_2;
      $.getInterceptor$JSArray(t1).add$1(t1, null);
      return length$;
  }
},
 is$Function: true
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {'': function _convertDartToNative_PrepareForStructuredClone_readSlot(copies_3) {
  this.copies_3 = copies_3;
},
 'super': 'Closure',
 call$1: function(i) {
  var t1 = this.copies_3;
  return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i);
},
 is$Function: true
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {'': function _convertDartToNative_PrepareForStructuredClone_writeSlot(copies_4) {
  this.copies_4 = copies_4;
},
 'super': 'Closure',
 call$2: function(i, x) {
  $.indexSet(this.copies_4, i, x);
},
 is$Function: true
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {'': function _convertDartToNative_PrepareForStructuredClone_cleanupSlots() {
},
 'super': 'Closure',
 call$0: function() {
},
 is$Function: true
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {'': function _convertDartToNative_PrepareForStructuredClone_walk(readSlot_5, writeSlot_6, findSlot_7) {
  this.readSlot_5 = readSlot_5;
  this.writeSlot_6 = writeSlot_6;
  this.findSlot_7 = findSlot_7;
},
 'super': 'Closure',
 call$1: function(e) {
  var t1, slot, t2, length$, copy, t3, i, element, elementCopy, copy0, j, t4;
  t1 = {};
  if (e == null)
    return e;
  if (typeof e === 'boolean')
    return e;
  if (typeof e === 'number')
    return e;
  if (typeof e === 'string')
    return e;
  if (typeof e === 'object' && e !== null && !!e.is$Date)
    throw $.$$throw($.UnimplementedError$("structured clone of Date"));
  if (typeof e === 'object' && e !== null && !!e.is$RegExp)
    throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
  if (typeof e === 'object' && e !== null && e.is$File())
    return e;
  if (typeof e === 'object' && e !== null && e.is$Blob())
    return e;
  if (typeof e === 'object' && e !== null && e.is$FileList())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ImageData())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
    return e;
  if (typeof e === 'object' && e !== null && e.is$Map()) {
    slot = this.findSlot_7.call$1(e);
    t1.copy_0 = this.readSlot_5.call$1(slot);
    t2 = t1.copy_0;
    if (!(t2 == null))
      return t2;
    t1.copy_0 = {};
    this.writeSlot_6.call$2(slot, t1.copy_0);
    e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
    return t1.copy_0;
  }
  if (typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List())) {
    if (typeof e !== 'object' || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout0(1, e);
    length$ = e.length;
    slot = this.findSlot_7.call$1(e);
    t2 = this.readSlot_5;
    copy = t2.call$1(slot);
    if (!(copy == null)) {
      if (true === copy) {
        copy = new Array(length$);
        this.writeSlot_6.call$2(slot, copy);
      }
      return copy;
    }
    t1 = e instanceof Array && !!!(e.immutable$list);
    t3 = this.writeSlot_6;
    if (t1) {
      t3.call$2(slot, true);
      for (i = 0; i < length$; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        element = e[i];
        elementCopy = this.call$1(element);
        if (!(elementCopy == null ? element == null : elementCopy === element)) {
          copy0 = t2.call$1(slot);
          if (true === copy0) {
            copy0 = new Array(length$);
            t3.call$2(slot, copy0);
          }
          if (typeof copy0 !== 'object' || copy0 === null || (copy0.constructor !== Array || !!copy0.immutable$list) && !copy0.is$JavaScriptIndexingBehavior())
            return this.call$1$bailout0(3, e, t3, elementCopy, $.CONSTANT2, length$, copy0, slot, t2, i, copy);
          for (t1 = e.length, t2 = copy0.length, j = 0; j < i; ++j) {
            if (j >= t1)
              throw $.ioore(j);
            t4 = e[j];
            if (j >= t2)
              throw $.ioore(j);
            copy0[j] = t4;
          }
          if (i >= t2)
            throw $.ioore(i);
          copy0[i] = elementCopy;
          ++i;
          copy = copy0;
          break;
        }
      }
      if (copy == null) {
        t3.call$2(slot, e);
        copy = e;
      }
    } else {
      copy = new Array(length$);
      t3.call$2(slot, copy);
      i = 0;
    }
    if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout0(4, e, length$, copy, i, $.CONSTANT2);
    for (; i < length$; ++i) {
      if (i >= e.length)
        throw $.ioore(i);
      t1 = this.call$1(e[i]);
      if (i >= copy.length)
        throw $.ioore(i);
      copy[i] = t1;
    }
    return copy;
  }
  throw $.$$throw($.UnimplementedError$("structured clone of other type"));
},
 call$1$bailout0: function(state0, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9) {
  switch (state0) {
    case 1:
      e = env0;
      break;
    case 2:
      t2 = env2;
      length$ = env1;
      e = env0;
      break;
    case 3:
      copy = env9;
      i = env8;
      t4 = env7;
      slot = env6;
      copy0 = env5;
      length$ = env4;
      t2 = env3;
      elementCopy = env2;
      t3 = env1;
      e = env0;
      break;
    case 4:
      t2 = env4;
      i = env3;
      copy = env2;
      length$ = env1;
      e = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = {};
      if (e == null)
        return e;
      if (typeof e === 'boolean')
        return e;
      if (typeof e === 'number')
        return e;
      if (typeof e === 'string')
        return e;
      if (typeof e === 'object' && e !== null && !!e.is$Date)
        throw $.$$throw($.UnimplementedError$("structured clone of Date"));
      if (typeof e === 'object' && e !== null && !!e.is$RegExp)
        throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
      if (typeof e === 'object' && e !== null && e.is$File())
        return e;
      if (typeof e === 'object' && e !== null && e.is$Blob())
        return e;
      if (typeof e === 'object' && e !== null && e.is$FileList())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ImageData())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
        return e;
      if (typeof e === 'object' && e !== null && e.is$Map()) {
        slot = this.findSlot_7.call$1(e);
        t1.copy_0 = this.readSlot_5.call$1(slot);
        t2 = t1.copy_0;
        if (!(t2 == null))
          return t2;
        t1.copy_0 = {};
        this.writeSlot_6.call$2(slot, t1.copy_0);
        e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
        return t1.copy_0;
      }
    default:
      var t1, slot, t2, e, length$, t4, copy, t3, i, element, elementCopy, copy0, j;
      if (state0 === 4 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List()))
        switch (state0) {
          case 0:
          case 1:
            state0 = 0;
            t2 = $.getInterceptor$JSStringJSArray(e);
            length$ = t2.get$length(e);
          case 2:
            state0 = 0;
            slot = this.findSlot_7.call$1(e);
            t4 = this.readSlot_5;
            copy = t4.call$1(slot);
            if (!(copy == null)) {
              if (true === copy) {
                copy = new Array(length$);
                this.writeSlot_6.call$2(slot, copy);
              }
              return copy;
            }
            t1 = e instanceof Array && !!!(e.immutable$list);
            t3 = this.writeSlot_6;
          case 3:
            if (state0 === 3 || state0 === 0 && t1)
              switch (state0) {
                case 0:
                  t3.call$2(slot, true);
                  i = 0;
                case 3:
                  L0:
                    while (true)
                      switch (state0) {
                        case 0:
                          if (!$.ltB(i, length$))
                            break L0;
                          element = t2.operator$index$1(e, i);
                          elementCopy = this.call$1(element);
                        case 3:
                          if (state0 === 3 || state0 === 0 && !(elementCopy == null ? element == null : elementCopy === element))
                            switch (state0) {
                              case 0:
                                copy0 = t4.call$1(slot);
                                if (true === copy0) {
                                  copy0 = new Array(length$);
                                  t3.call$2(slot, copy0);
                                }
                              case 3:
                                state0 = 0;
                                for (j = 0; j < i; ++j)
                                  $.indexSet(copy0, j, t2.operator$index$1(e, j));
                                $.indexSet(copy0, i, elementCopy);
                                ++i;
                                copy = copy0;
                                break L0;
                            }
                          ++i;
                      }
                  if (copy == null) {
                    t3.call$2(slot, e);
                    copy = e;
                  }
              }
            else {
              copy = new Array(length$);
              t3.call$2(slot, copy);
              i = 0;
            }
          case 4:
            state0 = 0;
            for (; $.ltB(i, length$); ++i)
              $.indexSet(copy, i, this.call$1(t2.operator$index$1(e, i)));
            return copy;
        }
      throw $.$$throw($.UnimplementedError$("structured clone of other type"));
  }
},
 is$Function: true
};

$$._convertDartToNative_PrepareForStructuredClone_walk_anon = {'': function _convertDartToNative_PrepareForStructuredClone_walk_anon(box_0, walk_8) {
  this.box_0 = box_0;
  this.walk_8 = walk_8;
},
 'super': 'Closure',
 call$2: function(key, value) {
  this.box_0.copy_0[key] = this.walk_8.call$1(value);
},
 is$Function: true
};

$$.Serial_write_anon = {'': function Serial_write_anon(completer_0, data_1, this_2) {
  this.completer_0 = completer_0;
  this.data_1 = data_1;
  this.this_2 = this_2;
},
 'super': 'Closure',
 call$0: function() {
  var chrome, t1, t2, t3, t4, t5, t6, buf, bufView, i;
  chrome = $.context().get$chrome();
  t1 = this.completer_0;
  t2 = this.this_2;
  t3 = $.Callback$once(new $.Serial_write__writeCallback(t1, t2));
  $.context().set$writeCallback(t3);
  t3 = $.context();
  t4 = this.data_1;
  t5 = $.getInterceptor$JSString(t4);
  t6 = t5.get$charCodes(t4);
  buf = t3.xArrayBuffer$1($.getInterceptor$JSStringJSArray(t6).get$length(t6));
  bufView = $.context().xUint8Array$1(buf);
  if (typeof bufView !== 'object' || bufView === null || (bufView.constructor !== Array || !!bufView.immutable$list) && !bufView.is$JavaScriptIndexingBehavior())
    return this.call$0$bailout(1, t5, chrome, buf, t2, bufView, t4);
  for (i = 0; t1 = t5.get$charCodes(t4), $.ltB(i, $.getInterceptor$JSStringJSArray(t1).get$length(t1)); ++i) {
    t1 = t5.charCodeAt$1(t4, i);
    if (i >= bufView.length)
      throw $.ioore(i);
    bufView[i] = t1;
  }
  chrome.get$serial().write$3(t2.get$openInfo().get$connectionId(), buf, $.context().get$writeCallback());
},
 call$0$bailout: function(state0, t5, chrome, buf, t2, bufView, t4) {
  var i, t1;
  for (i = 0; t1 = t5.get$charCodes(t4), $.ltB(i, $.getInterceptor$JSStringJSArray(t1).get$length(t1)); ++i)
    $.indexSet(bufView, i, t5.charCodeAt$1(t4, i));
  chrome.get$serial().write$3(t2.get$openInfo().get$connectionId(), buf, $.context().get$writeCallback());
},
 is$Function: true
};

$$.Serial_write__writeCallback = {'': function Serial_write__writeCallback(completer_3, this_4) {
  this.completer_3 = completer_3;
  this.this_4 = this_4;
},
 'super': 'Closure',
 call$1: function(result) {
  var writeInfo, t1;
  writeInfo = $.WriteInfo$(result.get$bytesWritten());
  t1 = this.this_4;
  t1.get$logger().fine$1("writeInfo " + $.S(writeInfo.bytesWritten));
  if (!(t1.get$onWrite() == null))
    t1.onWrite$1(writeInfo);
  this.completer_3.complete$1(writeInfo);
},
 is$Function: true
};

$$.Logger__publish_anon = {'': function Logger__publish_anon(record_0) {
  this.record_0 = record_0;
},
 'super': 'Closure',
 call$1: function(h) {
  return h.call$1(this.record_0);
},
 is$Function: true
};

$$._DateImpl_toString_fourDigits = {'': function _DateImpl_toString_fourDigits() {
},
 'super': 'Closure',
 call$1: function(n) {
  var absN, sign;
  absN = $.getInterceptor$JSNumber(n).abs$0(n);
  sign = $.ltB(n, 0) ? "-" : "";
  if ($.geB(absN, 1000))
    return $.S(n);
  if ($.geB(absN, 100))
    return sign + "0" + $.S(absN);
  if ($.geB(absN, 10))
    return sign + "00" + $.S(absN);
  return sign + "000" + $.S(absN);
},
 is$Function: true
};

$$._DateImpl_toString_threeDigits = {'': function _DateImpl_toString_threeDigits() {
},
 'super': 'Closure',
 call$1: function(n) {
  if ($.geB(n, 100))
    return $.S(n);
  if ($.geB(n, 10))
    return "0" + $.S(n);
  return "00" + $.S(n);
},
 is$Function: true
};

$$._DateImpl_toString_twoDigits = {'': function _DateImpl_toString_twoDigits() {
},
 'super': 'Closure',
 call$1: function(n) {
  if ($.geB(n, 10))
    return $.S(n);
  return "0" + $.S(n);
},
 is$Function: true
};

$$.Serial_openPort_anon = {'': function Serial_openPort_anon(completer_0, this_1, serialPort_2) {
  this.completer_0 = completer_0;
  this.this_1 = this_1;
  this.serialPort_2 = serialPort_2;
},
 'super': 'Closure',
 call$0: function() {
  var chrome, t1, openOptions;
  chrome = $.context().get$chrome();
  t1 = $.Callback$once(new $.Serial_openPort__openInfoCallback(this.completer_0, this.this_1));
  $.context().set$openInfoCallback(t1);
  openOptions = $.map($.makeLiteralMap(["bitrate", 9600]));
  chrome.get$serial().open$3(this.serialPort_2, openOptions, $.context().get$openInfoCallback());
},
 is$Function: true
};

$$.Serial_openPort__openInfoCallback = {'': function Serial_openPort__openInfoCallback(completer_3, this_4) {
  this.completer_3 = completer_3;
  this.this_4 = this_4;
},
 'super': 'Closure',
 call$1: function(openInfo) {
  var t1, t2, t3;
  t1 = this.this_4;
  t1.get$logger().fine$1("openInfo = " + $.S(openInfo));
  t2 = !(openInfo == null);
  t3 = this.completer_3;
  if (t2) {
    t1.get$logger().fine$1("openInfo.connectionId = " + $.S(openInfo.get$connectionId()));
    t1.set$openInfo($.OpenInfo$(openInfo.get$connectionId()));
    t3.complete$1(openInfo.get$connectionId());
  } else
    t3.completeException$1("openInfo == null");
},
 is$Function: true
};

$$.Proxy__serializeDataTree_anon = {'': function Proxy__serializeDataTree_anon() {
},
 'super': 'Closure',
 call$1: function(e) {
  return $.Proxy__serializeDataTree(e);
},
 is$Function: true
};

$$.Serial_onCharRead_anon = {'': function Serial_onCharRead_anon(this_0) {
  this.this_0 = this_0;
},
 'super': 'Closure',
 call$0: function() {
  var chrome, t1, t2;
  chrome = $.context().get$chrome();
  t1 = this.this_0;
  t2 = $.Callback$many(new $.Serial_onCharRead___onCharRead(t1));
  $.context().set$_onCharRead(t2);
  chrome.get$serial().read$3(t1.get$openInfo().get$connectionId(), 1, $.context().get$_onCharRead());
},
 is$Function: true
};

$$.Serial_onCharRead___onCharRead = {'': function Serial_onCharRead___onCharRead(this_1) {
  this.this_1 = this_1;
},
 'super': 'Closure',
 call$1: function(readInfo) {
  var chrome, bufView, chars, i, str, t1, t2, t3, t4;
  chrome = $.context().get$chrome();
  if (!(readInfo == null) && $.gtB(readInfo.get$bytesRead(), 0) && !(readInfo.get$data() == null)) {
    bufView = $.context().xUint8Array$1(readInfo.get$data());
    if (typeof bufView !== 'string' && (typeof bufView !== 'object' || bufView === null || bufView.constructor !== Array && !bufView.is$JavaScriptIndexingBehavior()))
      return this.call$1$bailout2(1, bufView, chrome);
    chars = [];
    for (i = 0; i < bufView.length; ++i)
      chars.push(bufView[i]);
    str = $.String_String$fromCharCodes(chars);
    t1 = $.getInterceptor$JSString(str);
    t2 = t1.endsWith$1(str, "\n") === true;
    t3 = this.this_1;
    t4 = t3.get$dataRead();
    if (t2) {
      t3.set$dataRead($.S(t4) + $.S(t1.substring$2(str, 0, $.sub(t1.get$length(str), 1))));
      if (!(t3.get$onRead() == null))
        t3.onRead$1(t3.get$dataRead());
      t3.set$dataRead("");
    } else
      t3.set$dataRead($.S(t4) + $.S(str));
  }
  chrome.get$serial().read$3(this.this_1.get$openInfo().get$connectionId(), 1, $.context().get$_onCharRead());
},
 call$1$bailout2: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      chrome = env1;
      bufView = env0;
      break;
  }
  switch (state0) {
    case 0:
      chrome = $.context().get$chrome();
    case 1:
      var chrome, bufView, chars, t1, i, str, t2, t3;
      if (state0 === 1 || state0 === 0 && !(readInfo == null) && $.gtB(readInfo.get$bytesRead(), 0) && !(readInfo.get$data() == null))
        switch (state0) {
          case 0:
            bufView = $.context().xUint8Array$1(readInfo.get$data());
          case 1:
            state0 = 0;
            chars = [];
            for (t1 = $.getInterceptor$JSStringJSArray(bufView), i = 0; $.ltB(i, t1.get$length(bufView)); ++i)
              chars.push(t1.operator$index$1(bufView, i));
            str = $.String_String$fromCharCodes(chars);
            t1 = $.getInterceptor$JSString(str);
            t2 = t1.endsWith$1(str, "\n") === true;
            t3 = this.this_1;
            if (t2) {
              t3.set$dataRead($.S(t3.get$dataRead()) + $.S(t1.substring$2(str, 0, $.sub(t1.get$length(str), 1))));
              if (!(t3.get$onRead() == null))
                t3.onRead$1(t3.get$dataRead());
              t3.set$dataRead("");
            } else
              t3.set$dataRead($.S(t3.get$dataRead()) + $.S(str));
        }
      chrome.get$serial().read$3(this.this_1.get$openInfo().get$connectionId(), 1, $.context().get$_onCharRead());
  }
},
 is$Function: true
};

$$.convertNativeToDart_AcceptStructuredClone_findSlot = {'': function convertNativeToDart_AcceptStructuredClone_findSlot(copies_0, values_1) {
  this.copies_0 = copies_0;
  this.values_1 = values_1;
},
 'super': 'Closure',
 call$1: function(value) {
  var t1, t3, length$, i, t2;
  t1 = this.values_1;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.call$1$bailout4(1, value, t1);
  t3 = $.getInterceptor$JSStringJSArray(t1);
  length$ = t1.length;
  for (i = 0; i < length$; ++i) {
    t2 = t1[i];
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  t3.add$1(t1, value);
  t1 = this.copies_0;
  $.getInterceptor$JSArray(t1).add$1(t1, null);
  return length$;
},
 call$1$bailout4: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      t1 = env1;
      value = env0;
      break;
    case 2:
      length$ = env3;
      t3 = env2;
      t1 = env1;
      value = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.values_1;
    case 1:
      state0 = 0;
      t3 = $.getInterceptor$JSStringJSArray(t1);
      length$ = t3.get$length(t1);
    case 2:
      var t1, value, t3, length$, i, t2;
      state0 = 0;
      for (i = 0; $.ltB(i, length$); ++i) {
        t2 = t3.operator$index$1(t1, i);
        if (t2 == null ? value == null : t2 === value)
          return i;
      }
      $.getInterceptor$JSArray(t1).add$1(t1, value);
      t1 = this.copies_0;
      $.getInterceptor$JSArray(t1).add$1(t1, null);
      return length$;
  }
},
 is$Function: true
};

$$.convertNativeToDart_AcceptStructuredClone_readSlot = {'': function convertNativeToDart_AcceptStructuredClone_readSlot(copies_2) {
  this.copies_2 = copies_2;
},
 'super': 'Closure',
 call$1: function(i) {
  var t1 = this.copies_2;
  return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i);
},
 is$Function: true
};

$$.convertNativeToDart_AcceptStructuredClone_writeSlot = {'': function convertNativeToDart_AcceptStructuredClone_writeSlot(copies_3) {
  this.copies_3 = copies_3;
},
 'super': 'Closure',
 call$2: function(i, x) {
  $.indexSet(this.copies_3, i, x);
},
 is$Function: true
};

$$.convertNativeToDart_AcceptStructuredClone_walk = {'': function convertNativeToDart_AcceptStructuredClone_walk(findSlot_4, readSlot_5, writeSlot_6, mustCopy_7) {
  this.findSlot_4 = findSlot_4;
  this.readSlot_5 = readSlot_5;
  this.writeSlot_6 = writeSlot_6;
  this.mustCopy_7 = mustCopy_7;
},
 'super': 'Closure',
 call$1: function(e) {
  var slot, copy, t1, t2, t3, length$, i;
  if (typeof e !== 'object' || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.is$JavaScriptIndexingBehavior())
    return this.call$1$bailout3(1, e);
  if (e instanceof Date)
    throw $.$$throw($.UnimplementedError$("structured clone of Date"));
  if (e instanceof RegExp)
    throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
  if (Object.getPrototypeOf(e) === Object.prototype) {
    slot = this.findSlot_4.call$1(e);
    copy = this.readSlot_5.call$1(slot);
    if (!(copy == null))
      return copy;
    copy = $.makeLiteralMap([]);
    if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout3(2, e, copy, slot);
    this.writeSlot_6.call$2(slot, copy);
    for (t1 = $.CONSTANT2.iterator$0(Object.keys(e)); t1.get$hasNext() === true;) {
      t2 = t1.next$0();
      t3 = this.call$1(e[t2]);
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= copy.length)
        throw $.ioore(t2);
      copy[t2] = t3;
    }
    return copy;
  }
  if (e instanceof Array) {
    slot = this.findSlot_4.call$1(e);
    copy = this.readSlot_5.call$1(slot);
    if (!(copy == null))
      return copy;
    length$ = e.length;
    if (this.mustCopy_7 === true)
      copy = new Array(length$);
    else
      copy = e;
    if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout3(4, e, $.CONSTANT2, length$, copy, slot);
    this.writeSlot_6.call$2(slot, copy);
    for (i = 0; i < length$; ++i) {
      if (i >= e.length)
        throw $.ioore(i);
      t1 = this.call$1(e[i]);
      if (i >= copy.length)
        throw $.ioore(i);
      copy[i] = t1;
    }
    return copy;
  }
  return e;
},
 call$1$bailout3: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      e = env0;
      break;
    case 2:
      slot = env2;
      copy = env1;
      e = env0;
      break;
    case 3:
      slot = env3;
      length$ = env2;
      t1 = env1;
      e = env0;
      break;
    case 4:
      slot = env4;
      copy = env3;
      length$ = env2;
      t1 = env1;
      e = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      if (e == null)
        return e;
      if (typeof e === 'boolean')
        return e;
      if (typeof e === 'number')
        return e;
      if (typeof e === 'string')
        return e;
      if (e instanceof Date)
        throw $.$$throw($.UnimplementedError$("structured clone of Date"));
      if (e instanceof RegExp)
        throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
    case 2:
      if (state0 === 2 || state0 === 0 && Object.getPrototypeOf(e) === Object.prototype)
        switch (state0) {
          case 0:
            slot = this.findSlot_4.call$1(e);
            copy = this.readSlot_5.call$1(slot);
            if (!(copy == null))
              return copy;
            copy = $.makeLiteralMap([]);
          case 2:
            state0 = 0;
            this.writeSlot_6.call$2(slot, copy);
            for (t1 = $.CONSTANT2.iterator$0(Object.keys(e)); t1.get$hasNext() === true;) {
              t2 = t1.next$0();
              $.indexSet(copy, t2, this.call$1(e[t2]));
            }
            return copy;
        }
    default:
      var e, slot, copy, t1, t2, length$, i;
      if (state0 === 4 || state0 === 3 || state0 === 0 && e instanceof Array)
        switch (state0) {
          case 0:
            slot = this.findSlot_4.call$1(e);
            copy = this.readSlot_5.call$1(slot);
            if (!(copy == null))
              return copy;
            t1 = $.getInterceptor$JSStringJSArray(e);
            length$ = t1.get$length(e);
          case 3:
            state0 = 0;
            copy = this.mustCopy_7 === true ? new Array(length$) : e;
          case 4:
            state0 = 0;
            this.writeSlot_6.call$2(slot, copy);
            for (i = 0; $.ltB(i, length$); ++i)
              $.indexSet(copy, i, this.call$1(t1.operator$index$1(e, i)));
            return copy;
        }
      return e;
  }
},
 is$Function: true
};

$$._BaseSendPort_call_anon = {'': function _BaseSendPort_call_anon(port_0, completer_1) {
  this.port_0 = port_0;
  this.completer_1 = completer_1;
},
 'super': 'Closure',
 call$2: function(value, ignoreReplyTo) {
  var t1, t2;
  this.port_0.close$0();
  t1 = typeof value === 'object' && value !== null && !!value.is$Exception;
  t2 = this.completer_1;
  if (t1)
    t2.completeException$1(value);
  else
    t2.complete$1(value);
},
 is$Function: true
};

$$._WorkerSendPort_send_anon = {'': function _WorkerSendPort_send_anon(message_0, replyTo_1, this_2) {
  this.message_0 = message_0;
  this.replyTo_1 = replyTo_1;
  this.this_2 = this_2;
},
 'super': 'Closure',
 call$0: function() {
  var t1, t2, workerMessage, t3;
  t1 = this.this_2;
  t2 = this.replyTo_1;
  t1._checkReplyTo$1(t2);
  workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_0, "replyTo", t2]));
  t2 = $._globalState().get$isWorker() === true;
  t3 = $._globalState;
  if (t2)
    t3().get$mainManager().postMessage$1(workerMessage);
  else {
    t2 = t3().get$managers();
    $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, t1.get$_workerId()).postMessage$1(workerMessage);
  }
},
 is$Function: true
};

$$._waitForPendingPorts_anon = {'': function _waitForPendingPorts_anon(callback_0) {
  this.callback_0 = callback_0;
},
 'super': 'Closure',
 call$1: function(_) {
  return this.callback_0.call$0();
},
 is$Function: true
};

$$.Futures_wait_anon = {'': function Futures_wait_anon(box_0, result_1, pos_2, values_3, completer_4) {
  this.box_0 = box_0;
  this.result_1 = result_1;
  this.pos_2 = pos_2;
  this.values_3 = values_3;
  this.completer_4 = completer_4;
},
 'super': 'Closure',
 call$1: function(value) {
  var t1, t2, remaining;
  t1 = this.values_3;
  $.indexSet(t1, this.pos_2, value);
  t2 = this.box_0;
  remaining = $.sub(t2.remaining_0, 1);
  t2.remaining_0 = remaining;
  if ($.eqB(remaining, 0) && this.result_1.get$isComplete() !== true)
    this.completer_4.complete$1(t1);
},
 is$Function: true
};

$$.Futures_wait_anon0 = {'': function Futures_wait_anon(result_5, future_6, completer_7) {
  this.result_5 = result_5;
  this.future_6 = future_6;
  this.completer_7 = completer_7;
},
 'super': 'Closure',
 call$1: function(exception) {
  if (this.result_5.get$isComplete() !== true)
    this.completer_7.completeException$2(exception, this.future_6.get$stackTrace());
  return true;
},
 is$Function: true
};

$$._PendingSendPortFinder_visitMap_anon = {'': function _PendingSendPortFinder_visitMap_anon(this_0) {
  this.this_0 = this_0;
},
 'super': 'Closure',
 call$1: function(e) {
  return this.this_0._liblib2$_dispatch$1(e);
},
 is$Function: true
};

$$._PendingSendPortFinder_visitList_anon = {'': function _PendingSendPortFinder_visitList_anon(this_0) {
  this.this_0 = this_0;
},
 'super': 'Closure',
 call$1: function(e) {
  return this.this_0._liblib2$_dispatch$1(e);
},
 is$Function: true
};

$$._NativeJsSendPort_send_anon = {'': function _NativeJsSendPort_send_anon(this_1, message_2, replyTo_3) {
  this.this_1 = this_1;
  this.message_2 = message_2;
  this.replyTo_3 = replyTo_3;
},
 'super': 'Closure',
 call$0: function() {
  var t1, t2, t3, t4, isolate, shouldSerialize, msg;
  t1 = {};
  t2 = this.this_1;
  t3 = this.replyTo_3;
  t2._checkReplyTo$1(t3);
  t4 = $._globalState().get$isolates();
  isolate = $.getInterceptor$JSStringJSArray(t4).operator$index$1(t4, t2.get$_liblib2$_isolateId());
  if (isolate == null)
    return;
  if (t2.get$_liblib2$_receivePort().get$_liblib2$_callback() == null)
    return;
  shouldSerialize = !($._globalState().get$currentContext() == null) && !$.eqB($._globalState().get$currentContext().get$id(), t2.get$_liblib2$_isolateId());
  msg = this.message_2;
  t1.msg_0 = msg;
  t1.reply_1 = t3;
  if (shouldSerialize) {
    t1.msg_0 = $._serializeMessage(t1.msg_0);
    t1.reply_1 = $._serializeMessage(t1.reply_1);
  }
  $._globalState().get$topEventLoop().enqueue$3(isolate, new $._NativeJsSendPort_send__anon(t1, t2, shouldSerialize), "receive " + $.S(msg));
},
 is$Function: true
};

$$._NativeJsSendPort_send__anon = {'': function _NativeJsSendPort_send__anon(box_0, this_4, shouldSerialize_5) {
  this.box_0 = box_0;
  this.this_4 = this_4;
  this.shouldSerialize_5 = shouldSerialize_5;
},
 'super': 'Closure',
 call$0: function() {
  var t1, t2;
  t1 = this.this_4;
  if (!(t1.get$_liblib2$_receivePort().get$_liblib2$_callback() == null)) {
    if (this.shouldSerialize_5 === true) {
      t2 = this.box_0;
      t2.msg_0 = $._deserializeMessage(t2.msg_0);
      t2.reply_1 = $._deserializeMessage(t2.reply_1);
    }
    t1 = t1.get$_liblib2$_receivePort();
    t2 = this.box_0;
    t1._liblib2$_callback$2(t2.msg_0, t2.reply_1);
  }
},
 is$Function: true
};

$$.Serial_close_anon = {'': function Serial_close_anon(completer_0, this_1) {
  this.completer_0 = completer_0;
  this.this_1 = this_1;
},
 'super': 'Closure',
 call$0: function() {
  var chrome, t1, t2, t3;
  chrome = $.context().get$chrome();
  t1 = this.completer_0;
  t2 = this.this_1;
  t3 = $.Callback$once(new $.Serial_close__closeCallback(t1, t2));
  $.context().set$closeCallback(t3);
  chrome.get$serial().close$2(t2.get$openInfo().get$connectionId(), $.context().get$closeCallback());
},
 is$Function: true
};

$$.Serial_close__closeCallback = {'': function Serial_close__closeCallback(completer_2, this_3) {
  this.completer_2 = completer_2;
  this.this_3 = this_3;
},
 'super': 'Closure',
 call$1: function(result) {
  var t1 = this.this_3;
  t1.get$logger().fine$1("closeCallback = " + $.S(result));
  t1.set$openInfo(null);
  this.completer_2.complete$1(result);
},
 is$Function: true
};

$$._Copier_visitMap_anon = {'': function _Copier_visitMap_anon(box_0, this_1) {
  this.box_0 = box_0;
  this.this_1 = this_1;
},
 'super': 'Closure',
 call$2: function(key, val) {
  var t1, t2;
  t1 = this.box_0.copy_0;
  t2 = this.this_1;
  $.indexSet(t1, t2._liblib2$_dispatch$1(key), t2._liblib2$_dispatch$1(val));
},
 is$Function: true
};

$$._EventLoop__runHelper_next = {'': function _EventLoop__runHelper_next(this_0) {
  this.this_0 = this_0;
},
 'super': 'Closure',
 call$0: function() {
  if (this.this_0.runIteration$0() !== true)
    return;
  $._window().setTimeout$2(this, 0);
},
 is$Function: true
};

$$.Closure = {'': function Closure() {
},
 'super': 'Object',
 toString$0: function() {
  return "Closure";
},
 is$Function: true
};

$$.BoundClosure = {'': function BoundClosure(self, target) {
  this.self = self;
  this.target = target;
},
 'super': 'Closure',
 call$0: function() {
  return this.self[this.target]();
}
};
$$.BoundClosure0 = {'': function BoundClosure0(self, target) {
  this.self = self;
  this.target = target;
},
 'super': 'Closure',
 call$1: function(p0) {
  return this.self[this.target](p0);
}
};
$.add = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a + b : $.add$slow(a, b);
};

$.sub = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a - b : $.sub$slow(a, b);
};

$.mul = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a * b : $.mul$slow(a, b);
};

$.gt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b);
};

$.ge = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a >= b : $.ge$slow(a, b);
};

$.lt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b);
};

$.le = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a <= b : $.le$slow(a, b);
};

$.gtB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b) === true;
};

$.geB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a >= b : $.ge$slow(a, b) === true;
};

$.ltB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b) === true;
};

$.leB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a <= b : $.le$slow(a, b) === true;
};

$.indexSet = function(a, index, value) {
  var key;
  if (a.constructor === Array && !a.immutable$list) {
    key = index >>> 0;
    if (key === index && key < a.length) {
      a[key] = value;
      return;
    }
  }
  $.indexSet$slow(a, index, value);
};

$.checkNumbers = function(a, b) {
  if (typeof a === 'number')
    if (typeof b === 'number')
      return true;
    else
      throw $.$$throw($.ArgumentError$(b));
  return false;
};

$.isJsArray = function(value) {
  return !(value == null) && value.constructor === Array;
};

$.add$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a + b;
  return a.operator$add$1(b);
};

$.mul$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a * b;
  return a.operator$mul$1(b);
};

$.sub$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a - b;
  return a.operator$sub$1(b);
};

$.tdiv = function(a, b) {
  if ($.checkNumbers(a, b))
    return $.CONSTANT5.truncate$0(a / b);
  return a.operator$tdiv$1(b);
};

$.eq = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b);
  return a === b;
};

$.eqB = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b) === true;
  return a === b;
};

$.gt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a > b;
  return a.operator$gt$1(b);
};

$.ge$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a >= b;
  return a.operator$ge$1(b);
};

$.lt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a < b;
  return a.operator$lt$1(b);
};

$.le$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a <= b;
  return a.operator$le$1(b);
};

$.shr = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.ArgumentError$(b));
    if (a > 0) {
      if (b > 31)
        return 0;
      return a >>> b;
    }
    if (b > 31)
      b = 31;
    return (a >> b) >>> 0;
  }
  return a.operator$shr$1(b);
};

$.and = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a & b) >>> 0;
  return a.operator$and$1(b);
};

$.indexSet$slow = function(a, index, value) {
  if (!(a == null) && a.constructor === Array) {
    if (!(typeof index === 'number' && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index < 0 || $.geB(index, $.getInterceptor$JSStringJSArray(a).get$length(a)))
      throw $.$$throw($.RangeError$value(index));
    $.checkMutable(a, "indexed set");
    a[index] = value;
    return;
  }
  a.operator$indexSet$2(index, value);
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res = $.getInterceptor(value).toString$0(value);
  if (!(typeof res === 'string'))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.createInvocationMirror = function(name$, internalName, type, arguments$, argumentNames) {
  return $.JSInvocationMirror$(name$, internalName, type, arguments$, argumentNames);
};

$.xor = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a ^ b) >>> 0;
  return a.operator$xor$1(b);
};

$.shl = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.ArgumentError$(b));
    if (b > 31)
      return 0;
    return (a << b) >>> 0;
  }
  return a.operator$shl$1(b);
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.stringLastIndexOfUnchecked = function(receiver, element, start) {
  return receiver.lastIndexOf(element, start);
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.ArgumentError$(null));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === 'number'))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.checkString = function(value) {
  if (!(typeof value === 'string'))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.$$throw = function(ex) {
  var jsError;
  if (ex == null)
    ex = $.CONSTANT1;
  jsError = new Error();
  jsError.name = ex;
  jsError.description = ex;
  jsError.dartException = ex;
  jsError.toString = $.toStringWrapper.call$0;
  throw jsError;
};

$.toStringWrapper = function() {
  var t1 = this.dartException;
  return $.getInterceptor(t1).toString$0(t1);
};

$.unwrapException = function(ex) {
  var message, type, name$, ieErrorCode, ieFacilityNumber, t1;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    name$ = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") !== -1 || $.eqB(type, "property_not_function") || $.eqB(type, "called_non_callable") || $.eqB(type, "non_object_property_call") || $.eqB(type, "non_object_property_load"))
      return $.NoSuchMethodError$(null, name$, [], $.makeLiteralMap([]), null);
    else if ($.eqB(type, "undefined_method"))
      return $.NoSuchMethodError$("", name$, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    if (typeof message === 'string')
      if ($.CONSTANT0.endsWith$1(message, "is null") === true || $.CONSTANT0.endsWith$1(message, "is undefined") === true || $.CONSTANT0.endsWith$1(message, "is null or undefined") === true)
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" is not a function") === -1)
          t1 = ieErrorCode === 438 && ieFacilityNumber === 10;
        else
          t1 = true;
        if (t1)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    return $.Exception_Exception(typeof message === 'string' ? message : "");
  }
  if (ex instanceof RangeError) {
    if (typeof message === 'string' && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if (typeof message === 'string' && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result;
  iterator = $.CONSTANT2.iterator$0(keyValuePairs);
  result = $.LinkedHashMap_LinkedHashMap();
  for (; iterator.get$hasNext() === true;)
    $.indexSet(result, iterator.next$0(), iterator.next$0());
  return result;
};

$.convertDartClosureToJS = function(closure, arity) {
  var function$;
  if (closure == null)
    return;
  function$ = closure.$identity;
  if (!!function$)
    return function$;
  function$ = function() {
    return $.invokeClosure.call$5(closure, $._currentIsolate(), arity, arguments[0], arguments[1]);
  };
  closure.$identity = function$;
  return function$;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  if ($.eqB(numberOfArguments, 0))
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if ($.eqB(numberOfArguments, 1))
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(arg1, closure));
  else if ($.eqB(numberOfArguments, 2))
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(arg1, closure, arg2));
  else
    throw $.$$throw($.Exception_Exception("Unsupported number of arguments for wrapped closure"));
};

$.setRuntimeTypeInfo = function(target, typeInfo) {
  if (!(target == null))
    target.builtin$typeInfo = typeInfo;
};

$.getRuntimeTypeInfo = function(target) {
  var res;
  if (target == null)
    return;
  res = target.builtin$typeInfo;
  return res == null ? {} : res;
};

$.Queue_Queue = function(E) {
  return $.DoubleLinkedQueue$(E);
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$.getTypeArgumentAsString = function(runtimeType) {
  var t1, className;
  t1 = $.getInterceptor$JSStringJSArray(runtimeType);
  className = t1.operator$index$1(runtimeType, 0).builtin$cls;
  if ($.eqB(t1.get$length(runtimeType), 1))
    return className;
  return className + "<" + $.S($.joinArguments(runtimeType, 1)) + ">";
};

$.runtimeTypeToString = function(type) {
  var t1 = type == null;
  if (t1)
    return "dynamic";
  else if (!t1 && type.constructor === Array)
    return $.getTypeArgumentAsString(type);
  else
    return type.builtin$cls;
};

$.joinArguments = function(types, startIndex) {
  var buffer, t1, index, firstArgument;
  if (typeof types !== 'string' && (typeof types !== 'object' || types === null || types.constructor !== Array && !types.is$JavaScriptIndexingBehavior()))
    return $.joinArguments$bailout(1, types, startIndex);
  buffer = $.StringBuffer_StringBuffer("");
  for (t1 = $.getInterceptor$JSArray(buffer), index = startIndex, firstArgument = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      t1.add$1(buffer, ", ");
    if (index < 0 || index >= types.length)
      throw $.ioore(index);
    t1.add$1(buffer, $.runtimeTypeToString(types[index]));
  }
  return t1.toString$0(buffer);
};

$.getRuntimeTypeString = function(object) {
  var className, typeInfo;
  className = !(object == null) && object.constructor === Array ? "List" : object.constructor.builtin$cls;
  typeInfo = object.builtin$typeInfo;
  if (typeInfo == null)
    return className;
  return className + "<" + $.S($.joinArguments(typeInfo, 0)) + ">";
};

$.createRuntimeType = function(name$) {
  return $.TypeImpl$(name$);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$.typeNameInSafari = function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
};

$.typeNameInWebKitCommon = function(tag) {
  var name$ = tag;
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name$ === "WebKitMutationObserver")
    return "MutationObserver";
  if (name$ === "AudioChannelMerger")
    return "ChannelMergerNode";
  if (name$ === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if (name$ === "AudioGainNode")
    return "GainNode";
  if (name$ === "AudioPannerNode")
    return "PannerNode";
  if (name$ === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if (name$ === "Oscillator")
    return "OscillatorNode";
  if (name$ === "RealtimeAnalyserNode")
    return "AnalyserNode";
  return name$;
};

$.typeNameInOpera = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  return name$;
};

$.typeNameInFirefox = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "CSS2Properties")
    return "CSSStyleDeclaration";
  if (name$ === "DataTransfer")
    return "Clipboard";
  if (name$ === "DragEvent")
    return "MouseEvent";
  if (name$ === "GeoGeolocation")
    return "Geolocation";
  if (name$ === "MouseScrollEvent")
    return "WheelEvent";
  if (name$ === "OfflineResourceList")
    return "DOMApplicationCache";
  if (name$ === "WorkerMessageEvent")
    return "MessageEvent";
  if (name$ === "XMLDocument")
    return "Document";
  return name$;
};

$.typeNameInIE = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if (name$ === "ApplicationCache")
    return "DOMApplicationCache";
  if (name$ === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name$ === "DataTransfer")
    return "Clipboard";
  if (name$ === "DragEvent")
    return "MouseEvent";
  if (name$ === "HTMLDDElement")
    return "HTMLElement";
  if (name$ === "HTMLDTElement")
    return "HTMLElement";
  if (name$ === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if (name$ === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if (name$ === "HTMLPhraseElement")
    return "HTMLElement";
  if (name$ === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if (name$ === "MouseWheelEvent")
    return "WheelEvent";
  if (name$ === "Position")
    return "Geoposition";
  return name$;
};

$.constructorNameFallback = function(object) {
  var constructor$, name$, t1, string;
  if (object == null)
    return "Null";
  constructor$ = object.constructor;
  if (typeof(constructor$) === "function") {
    name$ = constructor$.name;
    if (typeof name$ === 'string')
      t1 = !(name$ === "") && !(name$ === "Object") && !(name$ === "Function.prototype");
    else
      t1 = false;
    if (t1)
      return name$;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.callHasOwnProperty = function(function$, object, property) {
  return function$.call(object, property);
};

$.getFunctionForTypeNameOf = function() {
  if (!(typeof(navigator) === "object"))
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.Logger_Logger = function(name$) {
  var t1, dot, parent$, thisName, res;
  t1 = $.getInterceptor$JSString(name$);
  if (t1.startsWith$1(name$, ".") === true)
    throw $.$$throw($.ArgumentError$("name shouldn't start with a '.'"));
  if ($.Logger__loggers == null)
    $.Logger__loggers = $.makeLiteralMap([]);
  if ($.Logger__loggers.containsKey$1(name$) === true) {
    t1 = $.Logger__loggers;
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, name$);
  }
  dot = t1.lastIndexOf$1(name$, ".");
  if ($.eqB(dot, -1)) {
    parent$ = !$.eqB(name$, "") ? $.Logger_Logger("") : null;
    thisName = name$;
  } else {
    parent$ = $.Logger_Logger(t1.substring$2(name$, 0, dot));
    thisName = t1.substring$1(name$, $.add(dot, 1));
  }
  res = $.Logger$_internal(thisName, parent$);
  $.indexSet($.Logger__loggers, name$, res);
  return res;
};

$.Logger$_internal = function(name$, parent$) {
  var t1 = new $.Logger(name$, parent$, null, $.Map_Map($.String, $.Logger), null);
  t1.Logger$_internal$2(name$, parent$);
  return t1;
};

$.toStringForNativeObject = function(obj) {
  return "Instance of " + $.getTypeNameOf(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.regExpExec = function(regExp, str) {
  var result = $.regExpGetNative(regExp).exec(str);
  if (result == null)
    return;
  return result;
};

$.regExpTest = function(regExp, str) {
  return $.regExpGetNative(regExp).test(str);
};

$.regExpGetNative = function(regExp) {
  var r = regExp._re;
  return r == null ? regExp._re = $.regExpMakeNative(regExp, false) : r;
};

$.regExpMakeNative = function(regExp, global, exception) {
  var pattern, multiLine, ignoreCase, sb, t1, t2, e;
  pattern = regExp.get$pattern();
  multiLine = regExp.get$multiLine();
  ignoreCase = regExp.get$ignoreCase();
  $.checkString(pattern);
  sb = $.StringBuffer_StringBuffer("");
  if (multiLine === true) {
    t1 = sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "m");
  }
  if (ignoreCase === true) {
    t1 = sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "i");
  }
  if (global === true) {
    t1 = sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "g");
  }
  try {
    t1 = pattern;
    t2 = sb;
    t1 = new RegExp(t1, $.getInterceptor(t2).toString$0(t2));
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.$$throw($.IllegalJSRegExpException$(pattern, String(e)));
  }

};

$.Logger_root = function() {
  return $.Logger_Logger("");
};

$.lookupDynamicClass = function(hasOwnPropertyFunction, methods, className) {
  return $.callHasOwnProperty(hasOwnPropertyFunction, methods, className) ? methods[className] : null;
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = tags.split("|");
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$._JsSerializer$0 = function() {
  var t1 = new $._JsSerializer0(0, $._MessageTraverserVisitedMap$0());
  t1._JsSerializer$0();
  return t1;
};

$.dynamicBind = function(obj, name$, methods, arguments$) {
  var tag, hasOwnPropertyFunction, method, secondTag, proto;
  tag = $.getTypeNameOf(obj);
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  method = $.dynamicBindLookup(hasOwnPropertyFunction, tag, methods);
  if (method == null) {
    secondTag = $.alternateTag(obj, tag);
    if (!(secondTag == null))
      method = $.dynamicBindLookup(hasOwnPropertyFunction, secondTag, methods);
  }
  if (method == null)
    method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, $.getTypeNameOf($.CONSTANT12));
  proto = Object.getPrototypeOf(obj);
  if (method == null)
    method = function () {if (Object.getPrototypeOf(this) === proto) {throw new TypeError(name$ + " is not a function");} else {return Object.prototype[name$].apply(this, arguments);}};
  if (!$.callHasOwnProperty(hasOwnPropertyFunction, proto, name$))
    $.defineProperty(proto, name$, method);
  return method.apply(obj, arguments$);
};

$.allMatchesInStringUnchecked = function(needle, haystack) {
  var result, t1, length$, patternLength, startIndex, position, endIndex;
  result = $.List_List(null, $.Match);
  $.setRuntimeTypeInfo(result, [$.Match]);
  t1 = $.getInterceptor$JSStringJSArray(haystack);
  length$ = t1.get$length(haystack);
  patternLength = needle.length;
  for (startIndex = 0; true;) {
    position = t1.indexOf$2(haystack, needle, startIndex);
    if ($.eqB(position, -1))
      break;
    result.push($.StringMatch$(position, haystack, needle));
    endIndex = $.add(position, patternLength);
    if ($.eqB(endIndex, length$))
      break;
    else
      startIndex = $.eqB(position, endIndex) ? $.add(startIndex, 1) : endIndex;
  }
  return result;
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  var substr, t1;
  if (typeof other === 'string')
    return !$.eqB($.CONSTANT0.indexOf$2(receiver, other, startIndex), -1);
  else if (typeof other === 'object' && other !== null && !!other.is$JSSyntaxRegExp)
    return other.hasMatch$1($.CONSTANT0.substring$1(receiver, startIndex));
  else {
    substr = $.CONSTANT0.substring$1(receiver, startIndex);
    t1 = $.getInterceptor$JSString(other).allMatches$1(other, substr);
    return $.getInterceptor$JSArray(t1).iterator$0(t1).get$hasNext();
  }
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace('$', '$$$$'));
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === "undefined") {
    var t1 = [];
    $._dynamicMetadata(t1);
  }
  return $dynamicMetadata;
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, length$, t1, i;
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.StringBuffer_StringBuffer("");
      length$ = receiver.length;
      t1 = $.getInterceptor$JSArray(result);
      t1.add$1(result, to);
      for (i = 0; i < length$; ++i) {
        if (i >= receiver.length)
          throw $.ioore(i);
        t1.add$1(result, receiver[i]);
        t1.add$1(result, to);
      }
      return t1.toString$0(result);
    }
  else
    return $.stringReplaceJS(receiver, $.regExpMakeNative($.JSSyntaxRegExp$(from.replace($.regExpMakeNative($.get$quoteRegExp(), true), "\\$&"), false, false), true), to);
};

$.dynamicBindLookup = function(hasOwnPropertyFunction, tag, methods) {
  var method, i, entry;
  method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, tag);
  if (method == null && !($._dynamicMetadata0() == null))
    for (i = 0; i < $._dynamicMetadata0().length; ++i) {
      entry = $._dynamicMetadata0()[i];
      if ($.callHasOwnProperty(hasOwnPropertyFunction, entry.get$_set(), tag)) {
        method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, entry.get$_tag());
        if (!(method == null))
          break;
      }
    }
  return method;
};

$.stringJoinUnchecked = function(array, separator) {
  return array.join(separator);
};

$.dynamicFunction = function(name$) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[name$];
  if (!(f == null) && !!f.methods)
    return f.methods;
  methods = {};
  dartMethod = Object.getPrototypeOf($.CONSTANT12)[name$];
  if (!(dartMethod == null))
    methods["Object"] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, name$, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, name$, bind);
  return methods;
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$.AudioContextEvents$ = function(_ptr) {
  return new $.AudioContextEvents(_ptr);
};

$._MessageTraverserVisitedMap$0 = function() {
  return new $._MessageTraverserVisitedMap0();
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$0());
  t1._JsCopier$0();
  return t1;
};

$.print = function(object) {
  if (typeof object === 'string')
    $.Primitives_printString(object);
  else
    $.Primitives_printString($.getInterceptor(object).toString$0(object));
};

$.double_parse = function(source) {
  return $.Primitives_parseDouble(source);
};

$.ReceivePortImpl$ = function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.add(t1, 1);
  t1 = new $.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
};

$.Proxy_Proxy$_json = function(data) {
  if ($.eqB($._depth(), 0))
    throw $.$$throw("Cannot create Proxy out of scope.");
  return $._deserialize($._jsPortConvert.callSync$1($.Proxy__serializeDataTree(data)));
};

$.Proxy__serializeDataTree = function(data) {
  var entries, t1, t2;
  if (typeof data === 'object' && data !== null && data.is$Map()) {
    entries = $.List_List(null);
    $.setRuntimeTypeInfo(entries, []);
    for (t1 = data.get$keys(), t1 = $.getInterceptor$JSArray(t1).iterator$0(t1); t1.get$hasNext() === true;) {
      t2 = t1.next$0();
      entries.push([t2, $.Proxy__serializeDataTree(data.operator$index$1(t2))]);
    }
    return ["map", entries];
  } else if (typeof data === 'object' && data !== null && (data.constructor === Array || data.is$List()))
    return ["list", $.getInterceptor$JSArray(data).map$1(data, new $.Proxy__serializeDataTree_anon())];
  else
    return ["simple", $._serialize(data)];
};

$.LoggerEvents$ = function(_logger) {
  return new $.LoggerEvents(_logger);
};

$.Proxy__forward = function(receiver, member, kind, args) {
  var result, t1;
  if ($.eqB($._depth(), 0))
    throw $.$$throw("Cannot access a JavaScript proxy out of scope.");
  result = receiver._port.callSync$1([receiver._liblib1$_id, member, kind, $.getInterceptor$JSArray(args).map$1(args, $._serialize)]);
  t1 = $.getInterceptor$JSStringJSArray(result);
  switch (t1.operator$index$1(result, 0)) {
    case "return":
      return $._deserialize(t1.operator$index$1(result, 1));
    case "throws":
      throw $.$$throw($._deserialize(t1.operator$index$1(result, 1)));
    case "none":
      throw $.$$throw($.NoSuchMethodError$(receiver, member, args, $.makeLiteralMap([]), null));
    default:
      throw $.$$throw("Invalid return value");
  }
};

$.Proxy$_internal = function(_port, _id) {
  return new $.Proxy(_port, _id);
};

$.JSInvocationMirror$ = function(memberName, _internalName, _kind, _arguments, _namedArgumentNames) {
  return new $.JSInvocationMirror(memberName, _internalName, _kind, _arguments, _namedArgumentNames, null);
};

$._FunctionProxy$_internal = function(port, id) {
  var t1 = new $._FunctionProxy(null, port, id);
  t1._FunctionProxy$_internal$2(port, id);
  return t1;
};

$.main = function() {
  var logger, t1, selectElement, serial;
  $.Logger_root().set$level($.CONSTANT);
  logger = $.Logger_Logger("main");
  t1 = $.Logger_root().get$on().get$record();
  $.getInterceptor$JSArray(t1).add$1(t1, new $.main_anon());
  selectElement = $.query("#serialPorts");
  $.Serial_getPorts().then$1(new $.main_anon0(logger, selectElement));
  serial = $.Serial$();
  t1 = $.query("#openSerial").get$on().get$click();
  $.getInterceptor$JSArray(t1).add$1(t1, new $.main_anon1(selectElement, serial));
  t1 = $.query("#ping").get$on().get$click();
  $.getInterceptor$JSArray(t1).add$1(t1, new $.main_anon2(logger, serial));
};

$.window = function() {
  return window;
};

$.document = function() {
  return document;
};

$.query = function(selector) {
  return $.document().query$1(selector);
};

$.queryAll = function(selector) {
  return $.document().queryAll$1(selector);
};

$._getNewIsolateId = function() {
  if (!window.$dart$isolate$counter)
    window.$dart$isolate$counter = 1;
  return window.$dart$isolate$counter++;
};

$.LogRecord$ = function(level, message, loggerName, time, exception, exceptionText) {
  var t1, t2;
  t1 = time == null ? $.Date_Date$now() : time;
  t2 = $.LogRecord__nextNumber;
  $.LogRecord__nextNumber = $.add(t2, 1);
  return new $.LogRecord(level, message, loggerName, t1, t2, exception, exceptionText);
};

$.Serial_getPorts = function() {
  var completer = $.Completer_Completer();
  $.scoped(new $.Serial_getPorts_anon(completer));
  return completer.get$future();
};

$.Serial$ = function() {
  return new $.Serial(null, $.Logger_Logger("Serial"), null, "", null);
};

$.WebSocketEvents$ = function(_ptr) {
  return new $.WebSocketEvents(_ptr);
};

$.WorkerEvents$ = function(_ptr) {
  return new $.WorkerEvents(_ptr);
};

$._browserPrefix = function() {
  if ($._cachedBrowserPrefix == null)
    if ($._Device_isFirefox() === true)
      $._cachedBrowserPrefix = "-moz-";
    else if ($._Device_isIE() === true)
      $._cachedBrowserPrefix = "-ms-";
    else if ($._Device_isOpera() === true)
      $._cachedBrowserPrefix = "-o-";
    else
      $._cachedBrowserPrefix = "-webkit-";
  return $._cachedBrowserPrefix;
};

$.AbstractWorkerEvents$ = function(_ptr) {
  return new $.AbstractWorkerEvents(_ptr);
};

$._DOMWindowCrossFrame$ = function(_window) {
  return new $._DOMWindowCrossFrame(_window);
};

$._DOMWindowCrossFrame__createSafe = function(w) {
  var t1 = $.window();
  if (w == null ? t1 == null : w === t1)
    return w;
  else
    return $._DOMWindowCrossFrame$(w);
};

$.Future_Future$immediate = function(value, T) {
  return $._FutureImpl__FutureImpl$immediate(value, T);
};

$._ElementAttributeMap$ = function(element) {
  return new $._ElementAttributeMap(element);
};

$.WorkerContextEvents$ = function(_ptr) {
  return new $.WorkerContextEvents(_ptr);
};

$.Set_Set = function(E) {
  return $._HashSetImpl$(E);
};

$._FrozenElementList$_wrap = function(_nodeList) {
  return new $._FrozenElementList(_nodeList);
};

$.MediaStreamEvents$ = function(_ptr) {
  return new $.MediaStreamEvents(_ptr);
};

$._FrozenElementListIterator$ = function(_list) {
  return new $._FrozenElementListIterator(_list, 0);
};

$.ElementEvents$ = function(_ptr) {
  return new $.ElementEvents(_ptr);
};

$.MediaStreamTrackEvents$ = function(_ptr) {
  return new $.MediaStreamTrackEvents(_ptr);
};

$.Events$ = function(_ptr) {
  return new $.Events(_ptr);
};

$.MediaStreamTrackListEvents$ = function(_ptr) {
  return new $.MediaStreamTrackListEvents(_ptr);
};

$._AllMatchesIterable$ = function(_re, _str) {
  return new $._AllMatchesIterable(_re, _str);
};

$.ScriptProcessorNodeEvents$ = function(_ptr) {
  return new $.ScriptProcessorNodeEvents(_ptr);
};

$.MessagePortEvents$ = function(_ptr) {
  return new $.MessagePortEvents(_ptr);
};

$._AllMatchesIterator$ = function(re, _str) {
  return new $._AllMatchesIterator($.JSSyntaxRegExp__globalVersionOf(re), _str, null, false);
};

$._MatchImplementation$ = function(pattern, str, start, end, _groups) {
  return new $._MatchImplementation(pattern, str, start, end, _groups);
};

$.IllegalJSRegExpException$ = function(_pattern, _errmsg) {
  return new $.IllegalJSRegExpException(_pattern, _errmsg);
};

$.NotificationEvents$ = function(_ptr) {
  return new $.NotificationEvents(_ptr);
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$._dispatchEvent = function(receiver, message) {
  var event$ = $.CustomEvent_CustomEvent(receiver, false, false, $.JSON_stringify(message));
  $.window().$$dom_dispatchEvent$1(event$);
};

$.PeerConnection00Events$ = function(_ptr) {
  return new $.PeerConnection00Events(_ptr);
};

$._convertNativeToDart_Window = function(win) {
  return $._DOMWindowCrossFrame__createSafe(win);
};

$.FilteredElementList$ = function(node) {
  return new $.FilteredElementList(node, node.get$nodes());
};

$.convertDartToNative_SerializedScriptValue = function(value) {
  return $._convertDartToNative_PrepareForStructuredClone(value);
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var values, copies, t1, t2, t3, t4, copy;
  values = [];
  copies = [];
  t1 = new $._convertDartToNative_PrepareForStructuredClone_findSlot(values, copies);
  t2 = new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies);
  t3 = new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies);
  t4 = new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots();
  copy = new $._convertDartToNative_PrepareForStructuredClone_walk(t2, t3, t1).call$1(value);
  t4.call$0();
  return copy;
};

$.convertNativeToDart_SerializedScriptValue = function(object) {
  return $.convertNativeToDart_AcceptStructuredClone(object, true);
};

$.convertNativeToDart_AcceptStructuredClone = function(object, mustCopy) {
  var values, copies;
  values = [];
  copies = [];
  return new $.convertNativeToDart_AcceptStructuredClone_walk(new $.convertNativeToDart_AcceptStructuredClone_findSlot(copies, values), new $.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new $.convertNativeToDart_AcceptStructuredClone_writeSlot(copies), mustCopy).call$1(object);
};

$.RtcDataChannelEvents$ = function(_ptr) {
  return new $.RtcDataChannelEvents(_ptr);
};

$.FrameSetElementEvents$ = function(_ptr) {
  return new $.FrameSetElementEvents(_ptr);
};

$.RtcPeerConnectionEvents$ = function(_ptr) {
  return new $.RtcPeerConnectionEvents(_ptr);
};

$._Device_userAgent = function() {
  return $.window().get$navigator().get$userAgent();
};

$._Device_isOpera = function() {
  var t1 = $._Device_userAgent();
  return $.getInterceptor$JSString(t1).contains$2(t1, "Opera", 0);
};

$._Device_isIE = function() {
  var t1, t2;
  if ($._Device_isOpera() !== true) {
    t1 = $._Device_userAgent();
    t2 = $.getInterceptor$JSString(t1).contains$2(t1, "MSIE", 0) === true;
    t1 = t2;
  } else
    t1 = false;
  return t1;
};

$._Device_isFirefox = function() {
  var t1 = $._Device_userAgent();
  return $.getInterceptor$JSString(t1).contains$2(t1, "Firefox", 0);
};

$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$.InputElementEvents$ = function(_ptr) {
  return new $.InputElementEvents(_ptr);
};

$.SharedWorkerContextEvents$ = function(_ptr) {
  return new $.SharedWorkerContextEvents(_ptr);
};

$.Date_Date$now = function() {
  return $._DateImpl$now();
};

$.Date_Date$fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch, isUtc) {
  return $._DateImpl$fromMillisecondsSinceEpoch(millisecondsSinceEpoch, isUtc);
};

$._inject = function(code) {
  var script, t1;
  script = $.ScriptElement_ScriptElement();
  script.set$type("text/javascript");
  script.set$innerHTML(code);
  t1 = $.document().get$body().get$nodes();
  $.getInterceptor$JSArray(t1).add$1(t1, script);
};

$.MediaElementEvents$ = function(_ptr) {
  return new $.MediaElementEvents(_ptr);
};

$._initialize = function(exception) {
  var t1;
  if (!($._jsPortSync == null))
    return;
  try {
    $._jsPortSync = $.window().lookupPort$1("dart-js-context");
  } catch (exception) {
    $.unwrapException(exception);
  }

  if ($._jsPortSync == null) {
    $._inject("(function() {\n  // Proxy support for js.dart.\n\n  var globalContext = window;\n\n  // Table for local objects and functions that are proxied.\n  function ProxiedObjectTable() {\n    // Name for debugging.\n    this.name = 'js-ref';\n\n    // Table from IDs to JS objects.\n    this.map = {};\n\n    // Generator for new IDs.\n    this._nextId = 0;\n\n    // Counter for deleted proxies.\n    this._deletedCount = 0;\n\n    // Flag for one-time initialization.\n    this._initialized = false;\n\n    // Ports for managing communication to proxies.\n    this.port = new ReceivePortSync();\n    this.sendPort = this.port.toSendPort();\n\n    // Set of IDs that are global.\n    // These will not be freed on an exitScope().\n    this.globalIds = {};\n\n    // Stack of scoped handles.\n    this.handleStack = [];\n\n    // Stack of active scopes where each value is represented by the size of\n    // the handleStack at the beginning of the scope.  When an active scope\n    // is popped, the handleStack is restored to where it was when the\n    // scope was entered.\n    this.scopeIndices = [];\n  }\n\n  // Number of valid IDs.  This is the number of objects (global and local)\n  // kept alive by this table.\n  ProxiedObjectTable.prototype.count = function () {\n    return Object.keys(this.map).length;\n  }\n\n  // Number of total IDs ever allocated.\n  ProxiedObjectTable.prototype.total = function () {\n    return this.count() + this._deletedCount;\n  }\n\n  // Adds an object to the table and return an ID for serialization.\n  ProxiedObjectTable.prototype.add = function (obj) {\n    if (this.scopeIndices.length == 0) {\n      throw \"Cannot allocate a proxy outside of a scope.\";\n    }\n    // TODO(vsm): Cache refs for each obj?\n    var ref = this.name + '-' + this._nextId++;\n    this.handleStack.push(ref);\n    this.map[ref] = obj;\n    return ref;\n  }\n\n  ProxiedObjectTable.prototype._initializeOnce = function () {\n    if (!this._initialized) {\n      this._initialize();\n      this._initialized = true;\n    }\n  }\n\n  // Enters a new scope for this table.\n  ProxiedObjectTable.prototype.enterScope = function() {\n    this._initializeOnce();\n    this.scopeIndices.push(this.handleStack.length);\n  }\n\n  // Invalidates all non-global IDs in the current scope and\n  // exit the current scope.\n  ProxiedObjectTable.prototype.exitScope = function() {\n    var start = this.scopeIndices.pop();\n    for (var i = start; i < this.handleStack.length; ++i) {\n      var key = this.handleStack[i];\n      if (!this.globalIds.hasOwnProperty(key)) {\n        delete this.map[this.handleStack[i]];\n        this._deletedCount++;\n      }\n    }\n    this.handleStack = this.handleStack.splice(0, start);\n  }\n\n  // Makes this ID globally scope.  It must be explicitly invalidated.\n  ProxiedObjectTable.prototype.globalize = function(id) {\n    this.globalIds[id] = true;\n  }\n\n  // Invalidates this ID, potentially freeing its corresponding object.\n  ProxiedObjectTable.prototype.invalidate = function(id) {\n    var old = this.get(id);\n    delete this.globalIds[id];\n    delete this.map[id];\n    this._deletedCount++;\n    return old;\n  }\n\n  // Gets the object or function corresponding to this ID.\n  ProxiedObjectTable.prototype.get = function (id) {\n    if (!this.map.hasOwnProperty(id)) {\n      throw 'Proxy ' + id + ' has been invalidated.'\n    }\n    return this.map[id];\n  }\n\n  ProxiedObjectTable.prototype._initialize = function () {\n    // Configure this table's port to forward methods, getters, and setters\n    // from the remote proxy to the local object.\n    var table = this;\n\n    this.port.receive(function (message) {\n      // TODO(vsm): Support a mechanism to register a handler here.\n      try {\n        var receiver = table.get(message[0]);\n        var member = message[1];\n        var kind = message[2];\n        var args = message[3].map(deserialize);\n        if (kind == 'get') {\n          // Getter.\n          var field = member;\n          if (field in receiver && args.length == 0) {\n            return [ 'return', serialize(receiver[field]) ];\n          }\n        } else if (kind == 'set') {\n          // Setter.\n          var field = member;\n          if (args.length == 1) {\n            return [ 'return', serialize(receiver[field] = args[0]) ];\n          }\n        } else if (kind == 'apply') {\n          // Direct function invocation.\n          // TODO(vsm): Should we capture _this_ automatically?\n          return [ 'return', serialize(receiver.apply(null, args)) ];\n        } else if (member == '[]' && args.length == 1) {\n          // Index getter.\n          return [ 'return', serialize(receiver[args[0]]) ];\n        } else if (member == '[]=' && args.length == 2) {\n          // Index setter.\n          return [ 'return', serialize(receiver[args[0]] = args[1]) ];\n        } else {\n          var f = receiver[member];\n          if (f) {\n            var result = f.apply(receiver, args);\n            return [ 'return', serialize(result) ];\n          }\n        }\n        return [ 'none' ];\n      } catch (e) {\n        return [ 'throws', e.toString() ];\n      }\n    });\n  }\n\n  // Singleton for local proxied objects.\n  var proxiedObjectTable = new ProxiedObjectTable();\n\n  // DOM element serialization code.\n  var _localNextElementId = 0;\n  var _DART_ID = 'data-dart_id';\n  var _DART_TEMPORARY_ATTACHED = 'data-dart_temporary_attached';\n\n  function serializeElement(e) {\n    // TODO(vsm): Use an isolate-specific id.\n    var id;\n    if (e.hasAttribute(_DART_ID)) {\n      id = e.getAttribute(_DART_ID);\n    } else {\n      id = (_localNextElementId++).toString();\n      e.setAttribute(_DART_ID, id);\n    }\n    if (e !== document.documentElement) {\n      // Element must be attached to DOM to be retrieve in js part.\n      // Attach top unattached parent to avoid detaching parent of \"e\" when\n      // appending \"e\" directly to document. We keep count of elements\n      // temporarily attached to prevent detaching top unattached parent to\n      // early. This count is equals to the length of _DART_TEMPORARY_ATTACHED\n      // attribute. There could be other elements to serialize having the same\n      // top unattached parent.\n      var top = e;\n      while (true) {\n        if (top.hasAttribute(_DART_TEMPORARY_ATTACHED)) {\n          var oldValue = top.getAttribute(_DART_TEMPORARY_ATTACHED);\n          var newValue = oldValue + \"a\";\n          top.setAttribute(_DART_TEMPORARY_ATTACHED, newValue);\n          break;\n        }\n        if (top.parentNode == null) {\n          top.setAttribute(_DART_TEMPORARY_ATTACHED, \"a\");\n          document.documentElement.appendChild(top);\n          break;\n        }\n        if (top.parentNode === document.documentElement) {\n          // e was already attached to dom\n          break;\n        }\n        top = top.parentNode;\n      }\n    }\n    return id;\n  }\n\n  function deserializeElement(id) {\n    // TODO(vsm): Clear the attribute.\n    var list = document.querySelectorAll('[' + _DART_ID + '=\"' + id + '\"]');\n\n    if (list.length > 1) throw 'Non unique ID: ' + id;\n    if (list.length == 0) {\n      throw 'Element must be attached to the document: ' + id;\n    }\n    var e = list[0];\n    if (e !== document.documentElement) {\n      // detach temporary attached element\n      var top = e;\n      while (true) {\n        if (top.hasAttribute(_DART_TEMPORARY_ATTACHED)) {\n          var oldValue = top.getAttribute(_DART_TEMPORARY_ATTACHED);\n          var newValue = oldValue.substring(1);\n          top.setAttribute(_DART_TEMPORARY_ATTACHED, newValue);\n          // detach top only if no more elements have to be unserialized\n          if (top.getAttribute(_DART_TEMPORARY_ATTACHED).length === 0) {\n            top.removeAttribute(_DART_TEMPORARY_ATTACHED);\n            document.documentElement.removeChild(top);\n          }\n          break;\n        }\n        if (top.parentNode === document.documentElement) {\n          // e was already attached to dom\n          break;\n        }\n        top = top.parentNode;\n      }\n    }\n    return e;\n  }\n\n\n  // Type for remote proxies to Dart objects.\n  function DartProxy(id, sendPort) {\n    this.id = id;\n    this.port = sendPort;\n  }\n\n  // Serializes JS types to SendPortSync format:\n  // - primitives -> primitives\n  // - sendport -> sendport\n  // - DOM element -> [ 'domref', element-id ]\n  // - Function -> [ 'funcref', function-id, sendport ]\n  // - Object -> [ 'objref', object-id, sendport ]\n  function serialize(message) {\n    if (message == null) {\n      return null;  // Convert undefined to null.\n    } else if (typeof(message) == 'string' ||\n               typeof(message) == 'number' ||\n               typeof(message) == 'boolean') {\n      // Primitives are passed directly through.\n      return message;\n    } else if (message instanceof SendPortSync) {\n      // Non-proxied objects are serialized.\n      return message;\n    } else if (message instanceof Element &&\n        (message.ownerDocument == null || message.ownerDocument == document)) {\n      return [ 'domref', serializeElement(message) ];\n    } else if (typeof(message) == 'function') {\n      if ('_dart_id' in message) {\n        // Remote function proxy.\n        var remoteId = message._dart_id;\n        var remoteSendPort = message._dart_port;\n        return [ 'funcref', remoteId, remoteSendPort ];\n      } else {\n        // Local function proxy.\n        return [ 'funcref',\n                 proxiedObjectTable.add(message),\n                 proxiedObjectTable.sendPort ];\n      }\n    } else if (message instanceof DartProxy) {\n      // Remote object proxy.\n      return [ 'objref', message.id, message.port ];\n    } else {\n      // Local object proxy.\n      return [ 'objref',\n               proxiedObjectTable.add(message),\n               proxiedObjectTable.sendPort ];\n    }\n  }\n\n  function deserialize(message) {\n    if (message == null) {\n      return null;  // Convert undefined to null.\n    } else if (typeof(message) == 'string' ||\n               typeof(message) == 'number' ||\n               typeof(message) == 'boolean') {\n      // Primitives are passed directly through.\n      return message;\n    } else if (message instanceof SendPortSync) {\n      // Serialized type.\n      return message;\n    }\n    var tag = message[0];\n    switch (tag) {\n      case 'funcref': return deserializeFunction(message);\n      case 'objref': return deserializeObject(message);\n      case 'domref': return deserializeElement(message[1]);\n    }\n    throw 'Unsupported serialized data: ' + message;\n  }\n\n  // Create a local function that forwards to the remote function.\n  function deserializeFunction(message) {\n    var id = message[1];\n    var port = message[2];\n    // TODO(vsm): Add a more robust check for a local SendPortSync.\n    if (\"receivePort\" in port) {\n      // Local function.\n      return proxiedObjectTable.get(id);\n    } else {\n      // Remote function.  Forward to its port.\n      var f = function () {\n        var depth = enterScope();\n        try {\n          var args = Array.prototype.slice.apply(arguments).map(serialize);\n          var result = port.callSync([id, '#call', args]);\n          if (result[0] == 'throws') throw deserialize(result[1]);\n          return deserialize(result[1]);\n        } finally {\n          exitScope(depth);\n        }\n      };\n      // Cache the remote id and port.\n      f._dart_id = id;\n      f._dart_port = port;\n      return f;\n    }\n  }\n\n  // Creates a DartProxy to forwards to the remote object.\n  function deserializeObject(message) {\n    var id = message[1];\n    var port = message[2];\n    // TODO(vsm): Add a more robust check for a local SendPortSync.\n    if (\"receivePort\" in port) {\n      // Local object.\n      return proxiedObjectTable.get(id);\n    } else {\n      // Remote object.\n      return new DartProxy(id, port);\n    }\n  }\n\n  // Instantiate a Date with arguments.\n  function instantiateDate(args) {\n    // 7 arguments because the longest constructor is : new Date(year, month,\n    // day, hour, minute, second, millisecond)\n    if (args.length === 0) {\n      return new Date();\n    } else if (args.length === 1) {\n      return new Date(args[0]);\n    } else if (args.length === 2) {\n      return new Date(args[0], args[1]);\n    } else if (args.length === 3) {\n      return new Date(args[0], args[1], args[2]);\n    } else if (args.length === 4) {\n      return new Date(args[0], args[1], args[2], args[3]);\n    } else if (args.length === 5) {\n      return new Date(args[0], args[1], args[2], args[3], args[4]);\n    } else if (args.length === 6) {\n      return new Date(args[0], args[1], args[2], args[3], args[4], args[5]);\n    } else if (args.length === 7) {\n      return new Date(args[0], args[1], args[2], args[3], args[4], args[5],\n                     args[6]);\n    }\n    return null;\n  }\n\n  // Remote handler to construct a new JavaScript object given its\n  // serialized constructor and arguments.\n  function construct(args) {\n    args = args.map(deserialize);\n    var constructor = args[0];\n    args = Array.prototype.slice.call(args, 1);\n\n    var ret = null;\n    // Date can only be instantiated with the new operator.\n    if (constructor === Date) {\n      ret = instantiateDate(args);\n    } else {\n      // Dummy Type with correct constructor.\n      var Type = function(){};\n      Type.prototype = constructor.prototype;\n  \n      // Create a new instance\n      var instance = new Type();\n  \n      // Call the original constructor.\n      ret = constructor.apply(instance, args);\n      ret = Object(ret) === ret ? ret : instance;\n    }\n    return serialize(ret);\n  }\n\n  // Remote handler to return the top-level JavaScript context.\n  function context(data) {\n    return serialize(globalContext);\n  }\n\n  // Remote handler for debugging.\n  function debug() {\n    var live = proxiedObjectTable.count();\n    var total = proxiedObjectTable.total();\n    return 'JS objects Live : ' + live +\n           ' (out of ' + total + ' ever allocated).';\n  }\n\n  // Return true if two JavaScript proxies are equal (==).\n  function proxyEquals(args) {\n    return deserialize(args[0]) == deserialize(args[1]);\n  }\n\n  // Return true if a JavaScript proxy is instance of a given type (instanceof).\n  function proxyInstanceof(args) {\n    return deserialize(args[0]) instanceof deserialize(args[1]);\n  }\n\n  function proxyConvert(args) {\n    return serialize(deserializeDataTree(args));\n  }\n\n  function deserializeDataTree(data) {\n    var type = data[0];\n    var value = data[1];\n    if (type === 'map') {\n      var obj = {};\n      for (var i = 0; i < value.length; i++) {\n        obj[value[i][0]] = deserializeDataTree(value[i][1]);\n      }\n      return obj;\n    } else if (type === 'list') {\n      var list = [];\n      for (var i = 0; i < value.length; i++) {\n        list.push(deserializeDataTree(value[i]));\n      }\n      return list;\n    } else /* 'simple' */ {\n      return deserialize(value);\n    }\n  }\n\n  function makeGlobalPort(name, f) {\n    var port = new ReceivePortSync();\n    port.receive(f);\n    window.registerPort(name, port.toSendPort());\n  }\n\n  // Enters a new scope in the JavaScript context.\n  function enterJavaScriptScope() {\n    proxiedObjectTable.enterScope();\n  }\n\n  // Enters a new scope in both the JavaScript and Dart context.\n  var _dartEnterScopePort = null;\n  function enterScope() {\n    enterJavaScriptScope();\n    if (!_dartEnterScopePort) {\n      _dartEnterScopePort = window.lookupPort('js-dart-enter-scope');\n    }\n    return _dartEnterScopePort.callSync([]);\n  }\n\n  // Exits the current scope (and invalidate local IDs) in the JavaScript\n  // context.\n  function exitJavaScriptScope() {\n    proxiedObjectTable.exitScope();\n  }\n\n  // Exits the current scope in both the JavaScript and Dart context.\n  var _dartExitScopePort = null;\n  function exitScope(depth) {\n    exitJavaScriptScope();\n    if (!_dartExitScopePort) {\n      _dartExitScopePort = window.lookupPort('js-dart-exit-scope');\n    }\n    return _dartExitScopePort.callSync([ depth ]);\n  }\n\n  makeGlobalPort('dart-js-context', context);\n  makeGlobalPort('dart-js-create', construct);\n  makeGlobalPort('dart-js-debug', debug);\n  makeGlobalPort('dart-js-equals', proxyEquals);\n  makeGlobalPort('dart-js-instanceof', proxyInstanceof);\n  makeGlobalPort('dart-js-convert', proxyConvert);\n  makeGlobalPort('dart-js-enter-scope', enterJavaScriptScope);\n  makeGlobalPort('dart-js-exit-scope', exitJavaScriptScope);\n  makeGlobalPort('dart-js-globalize', function(data) {\n    if (data[0] == \"objref\") return proxiedObjectTable.globalize(data[1]);\n    // TODO(vsm): Do we ever need to globalize functions?\n    throw 'Illegal type: ' + data[0];\n  });\n  makeGlobalPort('dart-js-invalidate', function(data) {\n    if (data[0] == \"objref\") return proxiedObjectTable.invalidate(data[1]);\n    // TODO(vsm): Do we ever need to globalize functions?\n    throw 'Illegal type: ' + data[0];\n  });\n})();\n");
    $._jsPortSync = $.window().lookupPort$1("dart-js-context");
  }
  $._jsPortCreate = $.window().lookupPort$1("dart-js-create");
  $._jsPortDebug = $.window().lookupPort$1("dart-js-debug");
  $._jsPortEquals = $.window().lookupPort$1("dart-js-equals");
  $._jsPortInstanceof = $.window().lookupPort$1("dart-js-instanceof");
  $._jsPortConvert = $.window().lookupPort$1("dart-js-convert");
  $._jsEnterJavaScriptScope = $.window().lookupPort$1("dart-js-enter-scope");
  $._jsExitJavaScriptScope = $.window().lookupPort$1("dart-js-exit-scope");
  $._jsGlobalize = $.window().lookupPort$1("dart-js-globalize");
  $._jsInvalidate = $.window().lookupPort$1("dart-js-invalidate");
  t1 = $.ReceivePortSync$();
  t1.receive$1(new $._initialize_anon());
  $._dartEnterDartScope = t1;
  t1 = $.ReceivePortSync$();
  t1.receive$1(new $._initialize_anon0());
  $._dartExitDartScope = t1;
  $.window().registerPort$2("js-dart-enter-scope", $._dartEnterDartScope.toSendPort$0());
  $.window().registerPort$2("js-dart-exit-scope", $._dartExitDartScope.toSendPort$0());
};

$._depth = function() {
  var t1 = $.get$_proxiedObjectTable().get$_scopeIndices();
  return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
};

$._enterScope = function() {
  $._initialize();
  $.get$_proxiedObjectTable().enterScope$0();
  $._jsEnterJavaScriptScope.callSync$1([]);
  var t1 = $.get$_proxiedObjectTable().get$_scopeIndices();
  return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
};

$._exitScope = function(depth) {
  $._jsExitJavaScriptScope.callSync$1([]);
  $.get$_proxiedObjectTable().exitScope$0();
};

$.map = function(data) {
  return $.Proxy_Proxy$_json(data);
};

$._CompleterImpl$ = function(T) {
  var t1 = new $._CompleterImpl($._FutureImpl$());
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.scoped = function(f) {
  var depth, t1;
  depth = $._enterScope();
  try {
    t1 = f.call$0();
    return t1;
  } finally {
    $._exitScope(depth);
  }
};

$._serialize = function(message) {
  var t1, proxy;
  if (message == null)
    return;
  else if (typeof message === 'string' || typeof message === 'number' || typeof message === 'boolean')
    return message;
  else if (typeof message === 'object' && message !== null && !!message.is$SendPortSync)
    return message;
  else {
    if (typeof message === 'object' && message !== null && message.is$Element()) {
      t1 = message.ownerDocument;
      t1 = t1 == null || $.eqB(t1, $.document());
    } else
      t1 = false;
    if (t1)
      return ["domref", $._serializeElement(message)];
    else if (typeof message === 'object' && message !== null && !!message.is$Callback)
      return message.get$_serialized();
    else if (typeof message === 'function' || typeof message === 'object' && message !== null && !!message.is$Function)
      if ($.get$_FunctionProxy__map().containsKey$1(message) === true) {
        t1 = $.get$_FunctionProxy__map();
        proxy = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, message);
        return ["funcref", proxy.get$_liblib1$_id(), proxy.get$_port()];
      } else
        throw $.$$throw("A function must be converted to a Callback before it can be serialized.");
    else if (typeof message === 'object' && message !== null && !!message.is$Proxy)
      return ["objref", message._liblib1$_id, message._port];
    else {
      t1 = $.get$_proxiedObjectTable();
      return ["objref", $.getInterceptor$JSArray(t1).add$1(t1, message), $.get$_proxiedObjectTable().get$sendPort()];
    }
  }
};

$._deserialize = function(message) {
  var t1, t2, t3;
  t1 = new $._deserialize_deserializeFunction();
  t2 = new $._deserialize_deserializeObject();
  if (message == null)
    return;
  else if (typeof message === 'string' || typeof message === 'number' || typeof message === 'boolean')
    return message;
  else if (typeof message === 'object' && message !== null && !!message.is$SendPortSync)
    return message;
  t3 = $.getInterceptor$JSStringJSArray(message);
  switch (t3.operator$index$1(message, 0)) {
    case "funcref":
      return t1.call$1(message);
    case "objref":
      return t2.call$1(message);
    case "domref":
      return $._deserializeElement(t3.operator$index$1(message, 1));
  }
  throw $.$$throw("Unsupported serialized data: " + $.S(message));
};

$._deserializeElement = function(id) {
  var list, t1, e, top$, oldValue, newValue, t2;
  list = $.queryAll("[data-dart_id=\"" + $.S(id) + "\"]");
  t1 = $.getInterceptor$JSStringJSArray(list);
  if ($.gtB(t1.get$length(list), 1))
    throw $.$$throw("Non unique ID: " + $.S(id));
  if ($.eqB(t1.get$length(list), 0))
    throw $.$$throw("Only elements attached to document can be serialized: " + $.S(id));
  e = t1.operator$index$1(list, 0);
  t1 = $.document().get$documentElement();
  if (!(e == null ? t1 == null : e === t1))
    for (top$ = e; true;) {
      if (top$.get$attributes().containsKey$1("data-dart_temporary_attached") === true) {
        t1 = top$.get$attributes();
        oldValue = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "data-dart_temporary_attached");
        newValue = $.getInterceptor$JSString(oldValue).substring$1(oldValue, 1);
        $.indexSet(top$.get$attributes(), "data-dart_temporary_attached", newValue);
        t1 = top$.get$attributes();
        t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "data-dart_temporary_attached");
        if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 0)) {
          top$.get$attributes().remove$1("data-dart_temporary_attached");
          top$.remove$0();
        }
        break;
      }
      t1 = top$.get$parent();
      t2 = $.document().get$documentElement();
      if (t1 == null ? t2 == null : t1 === t2)
        break;
      top$ = top$.get$parent();
    }
  return e;
};

$._serializeElement = function(e) {
  var t1, id, top$, oldValue, newValue, t2;
  if (e.get$attributes().containsKey$1("data-dart_id") === true) {
    t1 = e.get$attributes();
    id = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "data-dart_id");
  } else {
    t1 = $._localNextElementId;
    $._localNextElementId = $.add(t1, 1);
    id = "dart-" + $.S(t1);
    $.indexSet(e.get$attributes(), "data-dart_id", id);
  }
  t1 = $.document().get$documentElement();
  if (!(e == null ? t1 == null : e === t1))
    for (top$ = e; true;) {
      if (top$.get$attributes().containsKey$1("data-dart_temporary_attached") === true) {
        t1 = top$.get$attributes();
        oldValue = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "data-dart_temporary_attached");
        newValue = $.getInterceptor$JSString(oldValue).concat$1(oldValue, "a");
        $.indexSet(top$.get$attributes(), "data-dart_temporary_attached", newValue);
        break;
      }
      if (top$.get$parent() == null) {
        $.indexSet(top$.get$attributes(), "data-dart_temporary_attached", "a");
        t1 = $.document().get$documentElement().get$elements();
        $.getInterceptor$JSArray(t1).add$1(t1, top$);
        break;
      }
      t1 = top$.get$parent();
      t2 = $.document().get$documentElement();
      if (t1 == null ? t2 == null : t1 === t2)
        break;
      top$ = top$.get$parent();
    }
  return id;
};

$.context = function() {
  if ($.eqB($._depth(), 0))
    throw $.$$throw("Cannot get JavaScript context out of scope.");
  return $._deserialize($._jsPortSync.callSync$1([]));
};

$._FutureImpl$ = function(T) {
  var t1 = new $._FutureImpl(false, null, null, null, false, false, [], [], []);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FutureImpl__FutureImpl$immediate = function(value, T) {
  var res = $._FutureImpl$();
  res._setValue$1(value);
  return res;
};

$.String_String$fromCharCodes = function(charCodes) {
  if (!$.isJsArray(charCodes)) {
    charCodes = $.List_List$from(charCodes);
    $.setRuntimeTypeInfo(charCodes, []);
  }
  return $.Primitives_stringFromCharCodes(charCodes);
};

$.BodyElementEvents$ = function(_ptr) {
  return new $.BodyElementEvents(_ptr);
};

$.SpeechRecognitionEvents$ = function(_ptr) {
  return new $.SpeechRecognitionEvents(_ptr);
};

$.List_List = function(length$, E) {
  return $.Primitives_newList(length$);
};

$.List_List$from = function(other, E) {
  var list, t1;
  list = $.List_List(null, E);
  $.setRuntimeTypeInfo(list, [E]);
  for (t1 = $.getInterceptor$JSArray(other).iterator$0(other); t1.get$hasNext() === true;)
    list.push(t1.next$0());
  return list;
};

$.FutureAlreadyCompleteException$ = function() {
  return new $.FutureAlreadyCompleteException();
};

$.Map_Map = function(K, V) {
  return $._HashMapImpl$(K, V);
};

$.FutureUnhandledException$ = function(source, stackTrace) {
  return new $.FutureUnhandledException(source, stackTrace);
};

$.DatabaseEvents$ = function(_ptr) {
  return new $.DatabaseEvents(_ptr);
};

$.FutureNotCompleteException$ = function() {
  return new $.FutureNotCompleteException();
};

$.Futures_wait = function(futures) {
  var t1, completer, result, values, i, future;
  t1 = {};
  if (typeof futures !== 'string' && (typeof futures !== 'object' || futures === null || futures.constructor !== Array && !futures.is$JavaScriptIndexingBehavior()))
    return $.Futures_wait$bailout(1, futures, t1);
  if ($.getInterceptor$JSStringJSArray(futures).get$isEmpty(futures) === true)
    return $.Future_Future$immediate($.CONSTANT13, $.List);
  completer = $.Completer_Completer($.List);
  result = completer.get$future();
  t1.remaining_0 = futures.length;
  values = $.List_List(futures.length);
  $.setRuntimeTypeInfo(values, []);
  for (i = 0; i < futures.length; ++i) {
    future = futures[i];
    future.then$1(new $.Futures_wait_anon(t1, result, i, values, completer));
    future.handleException$1(new $.Futures_wait_anon0(result, future, completer));
  }
  return result;
};

$._PendingSendPortFinder$ = function() {
  var t1 = $._MessageTraverserVisitedMap$0();
  t1 = new $._PendingSendPortFinder([], t1);
  t1._PendingSendPortFinder$0();
  return t1;
};

$.TextTrackEvents$ = function(_ptr) {
  return new $.TextTrackEvents(_ptr);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$.TextTrackCueEvents$ = function(_ptr) {
  return new $.TextTrackCueEvents(_ptr);
};

$.int_parse = function(source) {
  return $.Primitives_parseInt(source);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$._JsDeserializer$0 = function() {
  return new $._JsDeserializer0(null);
};

$.TextTrackListEvents$ = function(_ptr) {
  return new $.TextTrackListEvents(_ptr);
};

$.OpenDBRequestEvents$ = function(_ptr) {
  return new $.OpenDBRequestEvents(_ptr);
};

$.TransactionEvents$ = function(_ptr) {
  return new $.TransactionEvents(_ptr);
};

$.DoubleLinkedQueue$ = function(E) {
  var t1 = new $.DoubleLinkedQueue(null);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.DoubleLinkedQueue$0();
  return t1;
};

$.VersionChangeRequestEvents$ = function(_ptr) {
  return new $.VersionChangeRequestEvents(_ptr);
};

$.RequestEvents$ = function(_ptr) {
  return new $.RequestEvents(_ptr);
};

$.ApplicationCacheEvents$ = function(_ptr) {
  return new $.ApplicationCacheEvents(_ptr);
};

$._DoubleLinkedQueueIterator$ = function(_sentinel, E) {
  var t1 = new $._DoubleLinkedQueueIterator(_sentinel, null);
  $.setRuntimeTypeInfo(t1, [E]);
  t1._DoubleLinkedQueueIterator$1(_sentinel);
  return t1;
};

$._DoubleLinkedQueueEntrySentinel$ = function(E) {
  var t1 = new $._DoubleLinkedQueueEntrySentinel(null, null, null);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.DoubleLinkedQueueEntry$1(null);
  t1._DoubleLinkedQueueEntrySentinel$0();
  return t1;
};

$.BatteryManagerEvents$ = function(_ptr) {
  return new $.BatteryManagerEvents(_ptr);
};

$.DoubleLinkedQueueEntry$ = function(e, E) {
  var t1 = new $.DoubleLinkedQueueEntry(null, null, null);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.DoubleLinkedQueueEntry$1(e);
  return t1;
};

$.Element_Element$tag = function(tag) {
  return document.createElement(tag);
};

$._HashSetImpl$ = function(E) {
  var t1 = new $._HashSetImpl(null);
  $.setRuntimeTypeInfo(t1, [E]);
  t1._HashSetImpl$0();
  return t1;
};

$.CustomEvent_CustomEvent = function(type, canBubble, cancelable, detail) {
  return $._CustomEventFactoryProvider_createCustomEvent(type, canBubble, cancelable, detail);
};

$._HashSetIterator$ = function(set_, E) {
  var t1 = new $._HashSetIterator(set_._backingMap.get$_keys(), -1);
  $.setRuntimeTypeInfo(t1, [E]);
  t1._HashSetIterator$1(set_);
  return t1;
};

$.TypeImpl$ = function(typeName) {
  return new $.TypeImpl(typeName);
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, element.get$$$dom_children());
};

$.DedicatedWorkerContextEvents$ = function(_ptr) {
  return new $.DedicatedWorkerContextEvents(_ptr);
};

$.ElementInstanceEvents$ = function(_ptr) {
  return new $.ElementInstanceEvents(_ptr);
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$._OptionElementFactoryProvider_createOptionElement = function(data, value, defaultSelected, selected) {
  if (data == null)
    return new Option();
  if (value == null)
    return new Option(data);
  if (defaultSelected == null)
    return new Option(data,value);
  if (selected == null)
    return new Option(data,value,defaultSelected);
  return new Option(data,value,defaultSelected,selected);
};

$._DateImpl$fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch, isUtc) {
  var t1 = new $._DateImpl(millisecondsSinceEpoch, isUtc);
  t1._DateImpl$fromMillisecondsSinceEpoch$2(millisecondsSinceEpoch, isUtc);
  return t1;
};

$._DateImpl$now = function() {
  var t1 = new $._DateImpl($.Primitives_dateNow(), false);
  t1._DateImpl$now$0();
  return t1;
};

$.DocumentEvents$ = function(_ptr) {
  return new $.DocumentEvents(_ptr);
};

$.OpenInfo$ = function(connectionId) {
  return new $.OpenInfo(connectionId);
};

$.WriteInfo$ = function(bytesWritten) {
  return new $.WriteInfo(bytesWritten);
};

$.Completer_Completer = function(T) {
  return $._CompleterImpl$(T);
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError(message);
};

$.Callback$once = function(f) {
  var t1 = new $.Callback(null, null, null);
  t1.Callback$once$1(f);
  return t1;
};

$.Callback$many = function(f) {
  var t1 = new $.Callback(null, null, null);
  t1.Callback$many$1(f);
  return t1;
};

$._CustomEventFactoryProvider_createCustomEvent = function(type, canBubble, cancelable, detail) {
  var e = $.document().$$dom_createEvent$1("CustomEvent");
  e.$$dom_initCustomEvent$4(type, canBubble, cancelable, detail);
  return e;
};

$.LoggerHandlerList$ = function(_logger) {
  return new $.LoggerHandlerList(_logger);
};

$._JsonStringifier_stringify = function(object) {
  var output = $.StringBuffer_StringBuffer("");
  $._JsonStringifier$(output).stringifyValue$1(object);
  return $.getInterceptor(output).toString$0(output);
};

$._JsonStringifier$ = function(sb) {
  return new $._JsonStringifier(sb, []);
};

$._JsonStringifier_escape = function(sb, s) {
  var t1, length$, charCodes, i, needsEscape, charCode, t2;
  t1 = $.getInterceptor$JSStringJSArray(s);
  length$ = t1.get$length(s);
  charCodes = $.List_List(null, $.$int);
  $.setRuntimeTypeInfo(charCodes, [$.$int]);
  for (i = 0, needsEscape = false; $.ltB(i, length$); ++i) {
    charCode = t1.charCodeAt$1(s, i);
    if ($.ltB(charCode, 32)) {
      charCodes.push(92);
      switch (charCode) {
        case 8:
          charCodes.push(98);
          break;
        case 9:
          charCodes.push(116);
          break;
        case 10:
          charCodes.push(110);
          break;
        case 12:
          charCodes.push(102);
          break;
        case 13:
          charCodes.push(114);
          break;
        default:
          charCodes.push(117);
          t2 = $.and($.shr(charCode, 12), 15);
          if ($.ltB(t2, 10)) {
            if (typeof t2 !== 'number')
              throw $.iae(t2);
            t2 = 48 + t2;
          } else {
            if (typeof t2 !== 'number')
              throw $.iae(t2);
            t2 = 87 + t2;
          }
          charCodes.push(t2);
          t2 = $.and($.shr(charCode, 8), 15);
          if ($.ltB(t2, 10)) {
            if (typeof t2 !== 'number')
              throw $.iae(t2);
            t2 = 48 + t2;
          } else {
            if (typeof t2 !== 'number')
              throw $.iae(t2);
            t2 = 87 + t2;
          }
          charCodes.push(t2);
          t2 = $.and($.shr(charCode, 4), 15);
          if ($.ltB(t2, 10)) {
            if (typeof t2 !== 'number')
              throw $.iae(t2);
            t2 = 48 + t2;
          } else {
            if (typeof t2 !== 'number')
              throw $.iae(t2);
            t2 = 87 + t2;
          }
          charCodes.push(t2);
          t2 = $.and(charCode, 15);
          if ($.ltB(t2, 10)) {
            if (typeof t2 !== 'number')
              throw $.iae(t2);
            t2 = 48 + t2;
          } else {
            if (typeof t2 !== 'number')
              throw $.iae(t2);
            t2 = 87 + t2;
          }
          charCodes.push(t2);
          break;
      }
      needsEscape = true;
    } else if ($.eqB(charCode, 34) || $.eqB(charCode, 92)) {
      charCodes.push(92);
      charCodes.push(charCode);
      needsEscape = true;
    } else
      charCodes.push(charCode);
  }
  t1 = $.getInterceptor$JSArray(sb);
  t1.add$1(sb, needsEscape ? $.String_String$fromCharCodes(charCodes) : s);
};

$.StringBuffer_StringBuffer = function(content$) {
  return $._StringBufferImpl$(content$);
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$.JsonUnsupportedObjectError$ = function(unsupportedObject) {
  return new $.JsonUnsupportedObjectError(unsupportedObject, null);
};

$.ListIterator$ = function(list, T) {
  var t1 = new $.ListIterator(0, list);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.JsonUnsupportedObjectError$withCause = function(unsupportedObject, cause) {
  return new $.JsonUnsupportedObjectError(unsupportedObject, cause);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$._ProxiedObjectTable$ = function() {
  var t1, t2, t3, t4;
  t1 = $.makeLiteralMap([]);
  t2 = $.ReceivePortSync$();
  t3 = $.List_List(null, $.String);
  $.setRuntimeTypeInfo(t3, [$.String]);
  t4 = $.List_List(null, $.$int);
  $.setRuntimeTypeInfo(t4, [$.$int]);
  t4 = new $._ProxiedObjectTable("dart-ref", 0, 0, t1, t2, $.Set_Set($.String), t3, t4);
  t4._ProxiedObjectTable$0();
  return t4;
};

$.ReceivePortSync$ = function() {
  var t1 = new $.ReceivePortSync(null, null, null);
  t1.ReceivePortSync$0();
  return t1;
};

$.ReceivePortSync__isolateId = function() {
  if ($.ReceivePortSync__cachedIsolateId == null)
    $.ReceivePortSync__cachedIsolateId = $._getNewIsolateId();
  return $.ReceivePortSync__cachedIsolateId;
};

$.ReceivePortSync__getListenerName = function(isolateId, portId) {
  return "dart-port-" + $.S(isolateId) + "-" + $.S(portId);
};

$.ReceivePortSync__lookup = function(isolateId, portId) {
  var t1;
  if ($.eqB(isolateId, $.ReceivePortSync__isolateId())) {
    t1 = $.ReceivePortSync__portMap;
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, portId).toSendPort$0();
  } else
    return $._RemoteSendPortSync$(isolateId, portId);
};

$.EventSourceEvents$ = function(_ptr) {
  return new $.EventSourceEvents(_ptr);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.Error_safeToString = function(object) {
  var t1;
  if (typeof object === 'number' && Math.floor(object) === object || typeof object === 'number' || typeof object === 'boolean' || null == object)
    return $.getInterceptor(object).toString$0(object);
  if (typeof object === 'string') {
    t1 = $.CONSTANT0.replaceAll$2(object, "\\", "\\\\");
    t1 = $.getInterceptor$JSString(t1).replaceAll$2(t1, "\n", "\\n");
    t1 = $.getInterceptor$JSString(t1).replaceAll$2(t1, "\r", "\\r");
    return "\"" + $.S($.getInterceptor$JSString(t1).replaceAll$2(t1, "\"", "\\\"")) + "\"";
  }
  return $.Primitives_objectToString(object);
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof dst !== 'object' || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !dst.is$JavaScriptIndexingBehavior())
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = src.length, t2 = dst.length, j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$.Arrays_lastIndexOf = function(a, element, startIndex) {
  var t1, i;
  if (startIndex !== (startIndex | 0))
    return $.Arrays_lastIndexOf$bailout(1, a, element, startIndex);
  if (startIndex < 0)
    return -1;
  t1 = a.length;
  if (startIndex >= t1)
    startIndex = t1 - 1;
  for (i = startIndex; i >= 0; --i) {
    if (i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$._JsonParser$ = function(json) {
  var t1 = new $._JsonParser(json, $.getInterceptor$JSStringJSArray(json).get$length(json), 0);
  t1._JsonParser$1(json);
  return t1;
};

$.LinkedHashMap_LinkedHashMap = function(K, V) {
  return $._LinkedHashMapImpl$(K, V);
};

$.JSSyntaxRegExp$ = function(pattern, ignoreCase, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, ignoreCase);
};

$._StringBufferImpl$ = function(content$) {
  var t1 = new $._StringBufferImpl(null, null);
  t1._StringBufferImpl$1(content$);
  return t1;
};

$.JSSyntaxRegExp__globalVersionOf = function(other) {
  var t1, t2, re;
  t1 = other.get$pattern();
  t2 = other.get$multiLine();
  re = $.JSSyntaxRegExp$(t1, other.get$ignoreCase(), t2);
  re._re = $.regExpMakeNative(re, true);
  return re;
};

$.RegExp_RegExp = function(pattern, ignoreCase, multiLine) {
  return $.JSSyntaxRegExp$(pattern, ignoreCase, multiLine);
};

$.FixedSizeListIterator$ = function(array, T) {
  var t1 = new $.FixedSizeListIterator($.getInterceptor$JSStringJSArray(array).get$length(array), array, 0);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.Strings__toJsStringArray = function(strings) {
  var t1, length$, i, string, array;
  if (typeof strings !== 'string' && (typeof strings !== 'object' || strings === null || strings.constructor !== Array && !strings.is$JavaScriptIndexingBehavior()))
    return $.Strings__toJsStringArray$bailout(1, strings);
  $.checkNull(strings);
  t1 = $.getInterceptor$JSStringJSArray(strings);
  length$ = strings.length;
  if ($.isJsArray(strings)) {
    for (i = 0; i < length$; ++i) {
      if (i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
    }
    array = strings;
  } else {
    array = $.List_List(length$);
    for (i = 0; i < length$; ++i) {
      if (i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
      array[i] = string;
    }
  }
  return array;
};

$._LinkedHashMapImpl$ = function(K, V) {
  var t1 = new $._LinkedHashMapImpl(null, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  t1._LinkedHashMapImpl$0();
  return t1;
};

$.ScriptElement_ScriptElement = function() {
  return $.document().$$dom_createElement$1("script");
};

$._KeyValuePair$ = function(key, value, K, V) {
  var t1 = new $._KeyValuePair(key, value);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$.StringMatch$ = function(start, str, pattern) {
  return new $.StringMatch(start, str, pattern);
};

$._JsSerializer$ = function() {
  return new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
};

$._JsSendPortSync$ = function(_id) {
  return new $._JsSendPortSync(_id);
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.add($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_parseInt = function(string) {
  var match, base, result;
  $.checkString(string);
  match = /^\s*[+-]?(?:0(x)[a-f0-9]+|\d+)\s*$/i.exec(string);
  if (match == null)
    throw $.$$throw($.FormatException$(string));
  base = !($.getInterceptor$JSStringJSArray(match).operator$index$1(match, 1) == null) ? 16 : 10;
  result = parseInt(string, base);
  if ($.CONSTANT5.get$isNaN(result) === true)
    throw $.$$throw($.FormatException$(string));
  return result;
};

$.Primitives_parseDouble = function(string) {
  var result;
  $.checkString(string);
  if (!/^\s*(?:NaN|[+-]?(?:Infinity|(?:\.\d+|\d+(?:\.\d+)?)(?:[eE][+-]?\d+)?))\s*$/.test(string))
    throw $.$$throw($.FormatException$(string));
  result = parseFloat(string);
  if ($.CONSTANT5.get$isNaN(result) === true && !$.eqB(string, "NaN"))
    throw $.$$throw($.FormatException$(string));
  return result;
};

$.Primitives_objectTypeName = function(object) {
  var name$, decompiled, t1;
  name$ = $.constructorNameFallback(object);
  if ($.eqB(name$, "Object")) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === 'string')
      name$ = decompiled;
  }
  t1 = $.getInterceptor$JSString(name$);
  return t1.charCodeAt$1(name$, 0) === 36 ? t1.substring$1(name$, 1) : name$;
};

$.Primitives_objectToString = function(object) {
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.Primitives_newList = function(length$) {
  var result;
  if (length$ == null)
    return new Array();
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$) || length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  result = new Array(length$);
  result.fixed$length = true;
  return result;
};

$._LocalSendPortSync$_internal = function(_receivePort) {
  return new $._LocalSendPortSync(_receivePort);
};

$.Primitives__fromCharCodeApply = function(array) {
  var end, t1, result, i, subarray, t2;
  end = array.length;
  for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      t2 = t2 < end ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result = result + String.fromCharCode.apply(null, subarray);
  }
  return result;
};

$.Primitives_stringFromCodePoints = function(codePoints) {
  var a, t1, t2;
  a = [];
  for (t1 = $.CONSTANT2.iterator$0(codePoints); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (!(typeof t2 === 'number' && Math.floor(t2) === t2))
      throw $.$$throw($.ArgumentError$(t2));
    if (t2 <= 65535)
      a.push(t2);
    else if (t2 <= 1114111) {
      a.push(55296 + ($.shr(t2 - 65536, 10) & 1023));
      a.push(56320 + (t2 & 1023));
    } else
      throw $.$$throw($.ArgumentError$(t2));
  }
  return $.Primitives__fromCharCodeApply(a);
};

$.Primitives_stringFromCharCodes = function(charCodes) {
  var t1, t2;
  for (t1 = $.CONSTANT2.iterator$0(charCodes); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (!(typeof t2 === 'number' && Math.floor(t2) === t2))
      throw $.$$throw($.ArgumentError$(t2));
    if (t2 < 0)
      throw $.$$throw($.ArgumentError$(t2));
    if (t2 > 65535)
      return $.Primitives_stringFromCodePoints(charCodes);
  }
  return $.Primitives__fromCharCodeApply(charCodes);
};

$.Primitives_printString = function(string) {
  if ("\nThis program is using an experimental feature called \"mirrors\".  As\ncurrently implemented, mirrors do not work with minification, and will\ncause spurious errors depending on how code was optimized.\n\nThe authors of this program are aware of these problems and have\ndecided the thrill of using an experimental feature is outweighing the\nrisks.  Furthermore, the authors of this program understand that\nlong-term, to fix the problems mentioned above, mirrors may have\nnegative impact on size and performance of Dart programs compiled to\nJavaScript.\n" === string)
    $.Primitives_mirrorsEnabled = true;
  else if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw 'Unable to print message: ' + String(string);
};

$._RemoteSendPortSync$ = function(_isolateId, _portId) {
  return new $._RemoteSendPortSync(_isolateId, _portId);
};

$._RemoteSendPortSync__call = function(isolateId, portId, message) {
  var t1, target, source, listener, t2;
  t1 = {};
  target = "dart-port-" + $.S(isolateId) + "-" + $.S(portId);
  source = target + "-result";
  t1.result_0 = null;
  listener = new $._RemoteSendPortSync__call_anon(t1);
  t2 = $.window().get$on();
  t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, source);
  $.getInterceptor$JSArray(t2).add$1(t2, listener);
  $._dispatchEvent(target, [source, message]);
  t2 = $.window().get$on();
  $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, source).remove$1(listener);
  return t1.result_0;
};

$.Primitives_lazyAsJsDate = function(receiver) {
  if (receiver.date === (void 0))
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
};

$.Primitives_getHours = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0) : ($.Primitives_lazyAsJsDate(receiver).getHours() + 0);
};

$.Primitives_getMinutes = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0) : ($.Primitives_lazyAsJsDate(receiver).getMinutes() + 0);
};

$.Primitives_getSeconds = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0) : ($.Primitives_lazyAsJsDate(receiver).getSeconds() + 0);
};

$.FileReaderEvents$ = function(_ptr) {
  return new $.FileReaderEvents(_ptr);
};

$.Primitives_getDay = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0) : ($.Primitives_lazyAsJsDate(receiver).getDate() + 0);
};

$.Primitives_getMilliseconds = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0) : ($.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0);
};

$.Primitives_getYear = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0) : ($.Primitives_lazyAsJsDate(receiver).getFullYear() + 0);
};

$.Primitives_getMonth = function(receiver) {
  return receiver.isUtc === true ? $.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : $.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
};

$.Lists_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof startIndex !== 'number')
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof endIndex !== 'number')
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$.Lists_lastIndexOf = function(a, element, startIndex) {
  var t1, t2, i;
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $.Lists_lastIndexOf$bailout(1, a, element, startIndex);
  if (typeof startIndex !== 'number')
    return $.Lists_lastIndexOf$bailout(1, a, element, startIndex);
  if (startIndex < 0)
    return -1;
  t1 = $.getInterceptor$JSStringJSArray(a);
  t2 = a.length;
  if (startIndex >= t2)
    startIndex = t2 - 1;
  for (i = startIndex; i >= 0; --i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$.Lists_getRange = function(a, start, length$, accumulator) {
  var end, i;
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $.Lists_getRange$bailout(1, a, start, length$, accumulator);
  if (typeof start !== 'number')
    return $.Lists_getRange$bailout(1, a, start, length$, accumulator);
  if ($.ltB(length$, 0))
    throw $.$$throw($.ArgumentError$("length"));
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  if (typeof length$ !== 'number')
    throw $.iae(length$);
  end = start + length$;
  if (end > a.length)
    throw $.$$throw($.RangeError$value(end));
  for (i = start; i < end; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    accumulator.push(a[i]);
  }
  return accumulator;
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$.Primitives_dateNow = function() {
  return Date.now();
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$.Collections_contains = function(iterable, element) {
  var t1;
  for (t1 = $.getInterceptor$JSArray(iterable).iterator$0(iterable); t1.get$hasNext() === true;)
    if ($.eqB(element, t1.next$0()))
      return true;
  return false;
};

$.Collections_forEach = function(iterable, f) {
  var t1;
  for (t1 = $.getInterceptor$JSArray(iterable).iterator$0(iterable); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
};

$.Collections_map = function(source, destination, f) {
  var t1;
  for (t1 = $.getInterceptor$JSArray(source).iterator$0(source); t1.get$hasNext() === true;)
    destination.push(f.call$1(t1.next$0()));
  return destination;
};

$.Collections_filter = function(source, destination, f) {
  var t1, t2;
  for (t1 = $.getInterceptor$JSArray(source).iterator$0(source); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (f.call$1(t2) === true)
      destination.push(t2);
  }
  return destination;
};

$.Collections_collectionToString = function(c) {
  var result, t1;
  result = $.StringBuffer_StringBuffer("");
  t1 = $.List_List(null);
  $.setRuntimeTypeInfo(t1, []);
  $.Collections__emitCollection(c, result, t1);
  return $.getInterceptor(result).toString$0(result);
};

$.Collections__emitCollection = function(c, result, visiting) {
  var t1, isList, t2, t3, first, t4;
  t1 = $.getInterceptor$JSArray(visiting);
  t1.add$1(visiting, c);
  isList = typeof c === 'object' && c !== null && (c.constructor === Array || c.is$List());
  t2 = $.getInterceptor$JSArray(result);
  t2.add$1(result, isList ? "[" : "{");
  for (t3 = $.getInterceptor$JSArray(c).iterator$0(c), first = true; t3.get$hasNext() === true; first = false) {
    t4 = t3.next$0();
    if (!first)
      t2.add$1(result, ", ");
    $.Collections__emitObject(t4, result, visiting);
  }
  t2.add$1(result, isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.Collections__emitObject = function(o, result, visiting) {
  var t1;
  if (typeof o === 'object' && o !== null && (o.constructor === Array || o.is$Collection()))
    if ($.Collections__containsRef(visiting, o)) {
      t1 = $.getInterceptor$JSArray(result);
      t1.add$1(result, typeof o === 'object' && o !== null && (o.constructor === Array || o.is$List()) ? "[...]" : "{...}");
    } else
      $.Collections__emitCollection(o, result, visiting);
  else if (typeof o === 'object' && o !== null && o.is$Map())
    if ($.Collections__containsRef(visiting, o))
      $.getInterceptor$JSArray(result).add$1(result, "{...}");
    else
      $.Maps__emitMap(o, result, visiting);
  else
    $.getInterceptor$JSArray(result).add$1(result, o);
};

$.Collections__containsRef = function(c, ref) {
  var t1, t2;
  for (t1 = $.getInterceptor$JSArray(c).iterator$0(c); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.FileWriterEvents$ = function(_ptr) {
  return new $.FileWriterEvents(_ptr);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$.HashMap_HashMap = function(K, V) {
  return $._HashMapImpl$(K, V);
};

$.JSON_parse = function(json) {
  return $._JsonParser$(json).parseToplevel$0();
};

$.JSON_stringify = function(object) {
  return $._JsonStringifier_stringify(object);
};

$._callInIsolate = function(isolate, function$) {
  isolate.eval$1(function$);
  $._globalState().get$topEventLoop().run$0();
};

$._globalState = function() {
  return $globalState;
};

$._currentIsolate = function() {
  return $._globalState().get$currentContext();
};

$._globalState0 = function(val) {
  $globalState = val;
};

$._deserializeMessage = function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsDeserializer$0().deserialize$1(message);
  else
    return message;
};

$._window = function() {
  return typeof window != "undefined" ? window : null;
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState0(t1);
  if ($._globalState().get$isWorker() === true)
    return;
  rootContext = $._IsolateContext$();
  $._globalState().set$rootContext(rootContext);
  $globals = rootContext.isolateStatics;
  $static_init();
  $._globalState().set$currentContext(rootContext);
  rootContext.eval$1(entry);
  $._globalState().get$topEventLoop().run$0();
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $.Futures_wait(finder.ports).then$1(new $._waitForPendingPorts_anon(callback));
};

$._serializeMessage = function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsSerializer$0().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$.LocalWindowEvents$ = function(_ptr) {
  return new $.LocalWindowEvents(_ptr);
};

$.ParagraphElement_ParagraphElement = function() {
  return $.document().$$dom_createElement$1("p");
};

$.OptionElement_OptionElement = function(data, value, defaultSelected, selected) {
  var t1, t2, t3, t4;
  t1 = $ === data;
  if (t1)
    data = null;
  t2 = $ === value;
  if (t2)
    value = null;
  t3 = $ === defaultSelected;
  if (t3)
    defaultSelected = null;
  t4 = $ === selected;
  if (t4)
    selected = null;
  if (t1)
    return $._OptionElementFactoryProvider_createOptionElement(null, null, null, null);
  if (t2)
    return $._OptionElementFactoryProvider_createOptionElement(data, null, null, null);
  if (t3)
    return $._OptionElementFactoryProvider_createOptionElement(data, value, null, null);
  if (t4)
    return $._OptionElementFactoryProvider_createOptionElement(data, value, defaultSelected, null);
  return $._OptionElementFactoryProvider_createOptionElement(data, value, defaultSelected, selected);
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$.Exception_Exception = function(message) {
  return $._ExceptionImplementation$(message);
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue($._IsolateEvent));
};

$.HttpRequestEvents$ = function(_ptr) {
  return new $.HttpRequestEvents(_ptr);
};

$._HashMapImpl$ = function(K, V) {
  var t1 = new $._HashMapImpl(null, null, null, null, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  t1._HashMapImpl$0();
  return t1;
};

$._HashMapImpl__computeLoadLimit = function(capacity) {
  return $.tdiv(capacity * 3, 4);
};

$._HashMapImpl__nextProbe = function(currentProbe, numberOfProbes, length$) {
  return $.and($.add(currentProbe, numberOfProbes), $.sub(length$, 1));
};

$.HttpRequestUploadEvents$ = function(_ptr) {
  return new $.HttpRequestUploadEvents(_ptr);
};

$.EventListenerList$ = function(_ptr, _type) {
  return new $.EventListenerList(_ptr, _type);
};

$.Maps_mapToString = function(m) {
  var result, t1;
  result = $.StringBuffer_StringBuffer("");
  t1 = $.List_List(null);
  $.setRuntimeTypeInfo(t1, []);
  $.Maps__emitMap(m, result, t1);
  return $.getInterceptor(result).toString$0(result);
};

$.Maps__emitMap = function(m, result, visiting) {
  var t1, t2, t3;
  t1 = {};
  t2 = $.getInterceptor$JSArray(visiting);
  t2.add$1(visiting, m);
  t3 = $.getInterceptor$JSArray(result);
  t3.add$1(result, "{");
  t1.first_0 = true;
  $.getInterceptor$JSArray(m).forEach$1(m, new $.Maps__emitMap_anon(t1, result, visiting));
  t3.add$1(result, "}");
  t2.removeLast$0(visiting);
};

$.joinArguments$bailout = function(state0, types, startIndex) {
  var buffer, t1, t2, index, firstArgument;
  buffer = $.StringBuffer_StringBuffer("");
  for (t1 = $.getInterceptor$JSStringJSArray(types), t2 = $.getInterceptor$JSArray(buffer), index = startIndex, firstArgument = true; $.ltB(index, t1.get$length(types)); ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      t2.add$1(buffer, ", ");
    t2.add$1(buffer, $.runtimeTypeToString(t1.operator$index$1(types, index)));
  }
  return $.getInterceptor(buffer).toString$0(buffer);
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var i, j;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j) {
      if (i < 0 || i >= src.length)
        throw $.ioore(i);
      $.indexSet(dst, j, src[i]);
    }
  else
    for (j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= src.length)
        throw $.ioore(i);
      $.indexSet(dst, j, src[i]);
    }
};

$.Arrays_lastIndexOf$bailout = function(state0, a, element, startIndex) {
  var i;
  if ($.ltB(startIndex, 0))
    return -1;
  if ($.geB(startIndex, a.length))
    startIndex = a.length - 1;
  for (i = startIndex; $.geB(i, 0); --i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$.Futures_wait$bailout = function(state0, futures, t1) {
  var t2, completer, result, values, i, future;
  t2 = $.getInterceptor$JSStringJSArray(futures);
  if (t2.get$isEmpty(futures) === true)
    return $.Future_Future$immediate($.CONSTANT13, $.List);
  completer = $.Completer_Completer($.List);
  result = completer.get$future();
  t1.remaining_0 = t2.get$length(futures);
  values = $.List_List(t2.get$length(futures));
  $.setRuntimeTypeInfo(values, []);
  for (i = 0; $.ltB(i, t2.get$length(futures)); ++i) {
    future = t2.operator$index$1(futures, i);
    future.then$1(new $.Futures_wait_anon(t1, result, i, values, completer));
    future.handleException$1(new $.Futures_wait_anon0(result, future, completer));
  }
  return result;
};

$.Lists_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var t1, i;
  t1 = $.getInterceptor$JSStringJSArray(a);
  if ($.geB(startIndex, t1.get$length(a)))
    return -1;
  if ($.ltB(startIndex, 0))
    startIndex = 0;
  for (i = startIndex; $.ltB(i, endIndex); i = $.add(i, 1))
    if ($.eqB(t1.operator$index$1(a, i), element))
      return i;
  return -1;
};

$.Lists_lastIndexOf$bailout = function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      startIndex = env2;
      element = env1;
      a = env0;
      break;
    case 2:
      startIndex = env3;
      element = env2;
      t1 = env1;
      a = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      if ($.ltB(startIndex, 0))
        return -1;
      t1 = $.getInterceptor$JSStringJSArray(a);
      if ($.geB(startIndex, t1.get$length(a)))
        startIndex = $.sub(t1.get$length(a), 1);
    case 2:
      var startIndex, element, a, t1, i;
      state0 = 0;
      for (i = startIndex; $.geB(i, 0); i = $.sub(i, 1))
        if ($.eqB(t1.operator$index$1(a, i), element))
          return i;
      return -1;
  }
};

$.Lists_getRange$bailout = function(state0, a, start, length$, accumulator) {
  var end, t1, i;
  if ($.ltB(length$, 0))
    throw $.$$throw($.ArgumentError$("length"));
  if ($.ltB(start, 0))
    throw $.$$throw($.RangeError$value(start));
  end = $.add(start, length$);
  t1 = $.getInterceptor$JSStringJSArray(a);
  if ($.gtB(end, t1.get$length(a)))
    throw $.$$throw($.RangeError$value(end));
  for (i = start; $.ltB(i, end); i = $.add(i, 1))
    accumulator.push(t1.operator$index$1(a, i));
  return accumulator;
};

$.Strings__toJsStringArray$bailout = function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      strings = env0;
      break;
    case 2:
      length$ = env2;
      t1 = env1;
      strings = env0;
      break;
    case 3:
      length$ = env3;
      t1 = env2;
      array = env1;
      strings = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      $.checkNull(strings);
      t1 = $.getInterceptor$JSStringJSArray(strings);
      length$ = t1.get$length(strings);
    case 2:
      state0 = 0;
    case 3:
      var strings, t1, length$, i, string, array;
      if (state0 === 0 && $.isJsArray(strings)) {
        for (i = 0; $.ltB(i, length$); ++i) {
          string = t1.operator$index$1(strings, i);
          if (!(typeof string === 'string'))
            throw $.$$throw($.ArgumentError$(string));
        }
        array = strings;
      } else
        switch (state0) {
          case 0:
            array = $.List_List(length$);
          case 3:
            state0 = 0;
            for (i = 0; $.ltB(i, length$); ++i) {
              string = t1.operator$index$1(strings, i);
              if (!(typeof string === 'string'))
                throw $.$$throw($.ArgumentError$(string));
              $.indexSet(array, i, string);
            }
        }
      return array;
  }
};

$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.toStringWrapper.call$0 = $.toStringWrapper;
$.toStringWrapper.$name = "toStringWrapper";
$._deserialize.call$1 = $._deserialize;
$._deserialize.$name = "_deserialize";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$._serialize.call$1 = $._serialize;
$._serialize.$name = "_serialize";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
Isolate.$finishClasses($$);
$$ = {};
$.$int = {builtin$cls: '$int'};
$.List = {builtin$cls: 'List'};
$.Map = {builtin$cls: 'Map'};
$.Animation = {builtin$cls: 'Animation'};
$.ReceivePort = {builtin$cls: 'ReceivePort'};
$.StyleSheet = {builtin$cls: 'StyleSheet'};
$.num = {builtin$cls: 'num'};
$.Gamepad = {builtin$cls: 'Gamepad'};
$.TextTrack = {builtin$cls: 'TextTrack'};
$.TextTrackCue = {builtin$cls: 'TextTrackCue'};
$.MediaStream = {builtin$cls: 'MediaStream'};
$.DomPlugin = {builtin$cls: 'DomPlugin'};
$.Match = {builtin$cls: 'Match'};
$.DomMimeType = {builtin$cls: 'DomMimeType'};
$.Touch = {builtin$cls: 'Touch'};
$.ClientRect = {builtin$cls: 'ClientRect'};
$._ManagerStub = {builtin$cls: '_ManagerStub'};
$.Length = {builtin$cls: 'Length'};
$.String = {builtin$cls: 'String'};
$.Element = {builtin$cls: 'Element'};
$.Transform = {builtin$cls: 'Transform'};
$.Entry = {builtin$cls: 'Entry'};
$.EntrySync = {builtin$cls: 'EntrySync'};
$.Number = {builtin$cls: 'Number'};
$.SourceBuffer = {builtin$cls: 'SourceBuffer'};
$.Node = {builtin$cls: 'Node'};
$.PathSeg = {builtin$cls: 'PathSeg'};
$.SpeechGrammar = {builtin$cls: 'SpeechGrammar'};
$.Function = {builtin$cls: 'Function'};
$.File = {builtin$cls: 'File'};
$.SpeechInputResult = {builtin$cls: 'SpeechInputResult'};
$.ElementInstance = {builtin$cls: 'ElementInstance'};
$.CssRule = {builtin$cls: 'CssRule'};
$.CssValue = {builtin$cls: 'CssValue'};
$.SpeechRecognitionResult = {builtin$cls: 'SpeechRecognitionResult'};
$.CONSTANT3 = new Isolate.$isolateProperties.JSInt();
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CONSTANT13 = Isolate.makeConstantList([]);
$.CONSTANT0 = new Isolate.$isolateProperties.JSString();
$.CONSTANT1 = new Isolate.$isolateProperties.NullThrownError();
$.CONSTANT6 = new Isolate.$isolateProperties.ConstantMap(0, {}, Isolate.$isolateProperties.CONSTANT13);
$.CONSTANT14 = new Isolate.$isolateProperties.Level("INFO", 800);
$.CONSTANT4 = new Isolate.$isolateProperties._DeletedKeySentinel();
$.CONSTANT = new Isolate.$isolateProperties.Level("ALL", 0);
$.CONSTANT9 = $.createRuntimeType('$int');
$.CONSTANT12 = new Isolate.$isolateProperties.Object();
$.CONSTANT7 = new Isolate.$isolateProperties.Level("FINE", 500);
$.CONSTANT8 = $.createRuntimeType('String');
$.CONSTANT11 = $.createRuntimeType('bool');
$.CONSTANT10 = $.createRuntimeType('$double');
$.CONSTANT2 = new Isolate.$isolateProperties.JSArray();
$.CONSTANT5 = new Isolate.$isolateProperties.JSNumber();
$._JsonParser_BACKSPACE = 8;
$._JsonParser_TAB = 9;
$._JsonParser_NEW_LINE = 10;
$._JsonParser_FORM_FEED = 12;
$._JsonParser_CARRIAGE_RETURN = 13;
$._JsonParser_SPACE = 32;
$._JsonParser_QUOTE = 34;
$._JsonParser_PLUS = 43;
$.ReceivePortSync__portMap = null;
$._JsonParser_COMMA = 44;
$.ReceivePortSync__portIdCount = null;
$.ReceivePortSync__cachedIsolateId = null;
$._JsonParser_DOT = 46;
$._JsonParser_CHAR_0 = 48;
$._JsonParser_SLASH = 47;
$._JsonParser_CHAR_1 = 49;
$._JsonParser_CHAR_2 = 50;
$._JsonParser_CHAR_3 = 51;
$._JsonParser_CHAR_4 = 52;
$._JsonParser_MINUS = 45;
$._JsonParser_CHAR_5 = 53;
$._JsonParser_CHAR_6 = 54;
$._JsonParser_CHAR_7 = 55;
$._JsonParser_CHAR_8 = 56;
$._JsonParser_CHAR_9 = 57;
$._JsonParser_COLON = 58;
$._JsonParser_CHAR_CAPITAL_E = 69;
$._JsonParser_LBRACKET = 91;
$._JsonParser_BACKSLASH = 92;
$._JsonParser_RBRACKET = 93;
$._JsonParser_CHAR_B = 98;
$._JsonParser_CHAR_E = 101;
$._JsonParser_CHAR_F = 102;
$._JsonParser_CHAR_N = 110;
$._JsonParser_CHAR_R = 114;
$._JsonParser_CHAR_T = 116;
$._JsonParser_CHAR_U = 117;
$._JsonParser_LBRACE = 123;
$._JsonParser_RBRACE = 125;
$._JsonParser_STRING_LITERAL = 34;
$._JsonParser_NUMBER_LITERAL = 45;
$._JsonParser_NULL_LITERAL = 110;
$._JsonParser_FALSE_LITERAL = 102;
$._JsonParser_TRUE_LITERAL = 116;
$._JsonParser_WHITESPACE = 32;
$._JsonParser_LAST_ASCII = 125;
$._JsonParser_NULL_STRING = "null";
$._JsonParser_FALSE_STRING = "false";
$._JsonParser_TRUE_STRING = "true";
$._JsonParser_tokens = null;
$._DateImpl__MAX_MILLISECONDS_SINCE_EPOCH = 8640000000000000;
$._getTypeNameOf = null;
$.Logger__loggers = null;
$.Level_ALL = Isolate.$isolateProperties.CONSTANT;
$.MIRROR_OPT_IN_MESSAGE = "\nThis program is using an experimental feature called \"mirrors\".  As\ncurrently implemented, mirrors do not work with minification, and will\ncause spurious errors depending on how code was optimized.\n\nThe authors of this program are aware of these problems and have\ndecided the thrill of using an experimental feature is outweighing the\nrisks.  Furthermore, the authors of this program understand that\nlong-term, to fix the problems mentioned above, mirrors may have\nnegative impact on size and performance of Dart programs compiled to\nJavaScript.\n";
$.Level_FINE = Isolate.$isolateProperties.CONSTANT7;
$.Level_INFO = Isolate.$isolateProperties.CONSTANT14;
$.Primitives_hashCodeSeed = 0;
$.Primitives_mirrorsEnabled = false;
$.Primitives_DOLLAR_CHAR_VALUE = 36;
$._jsPortSync = null;
$._jsPortCreate = null;
$._jsPortEquals = null;
$._jsPortInstanceof = null;
$._jsPortConvert = null;
$._jsEnterJavaScriptScope = null;
$._jsExitJavaScriptScope = null;
$._jsGlobalize = null;
$._jsInvalidate = null;
$._dartEnterDartScope = null;
$._dartExitDartScope = null;
$.ReceivePortImpl__nextFreeId = 1;
$._HashMapImpl__INITIAL_CAPACITY = 8;
$._HashMapImpl__DELETED_KEY = Isolate.$isolateProperties.CONSTANT4;
$._jsPortDebug = null;
$._localNextElementId = 0;
$._DART_ID = "data-dart_id";
$._DART_TEMPORARY_ATTACHED = "data-dart_temporary_attached";
$.hierarchicalLoggingEnabled = false;
$._rootLevel = Isolate.$isolateProperties.CONSTANT14;
$.JSInvocationMirror_SETTER = 2;
$.JSInvocationMirror_METHOD = 0;
$.JSInvocationMirror_GETTER = 1;
$.LogRecord__nextNumber = 0;
$._cachedBrowserPrefix = null;
$.getInterceptor$JSStringJSArray = function(receiver) {
  if (typeof receiver == 'string') return $.JSString.prototype;
  if (receiver != null && receiver.constructor == Array) return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSString = function(receiver) {
  if (typeof receiver == 'string') return $.JSString.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSNumber = function(receiver) {
  if (typeof receiver == 'number') return $.JSNumber.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == 'string') return $.JSString.prototype;
  if (receiver != null && receiver.constructor == Array) return $.JSArray.prototype;
  if (typeof receiver == 'number' && Math.floor(receiver) == receiver) return $.JSInt.prototype;
  if (typeof receiver == 'number') return $.JSDouble.prototype;
  if (receiver == null) return $.JSNull.prototype;
  if (typeof receiver == 'function') return $.JSFunction.prototype;
  if (typeof receiver == 'boolean') return $.JSBool.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSArray = function(receiver) {
  if (receiver != null && receiver.constructor == Array) return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
Isolate.$lazy($, '_proxiedObjectTable', '_proxiedObjectTable', 'get$_proxiedObjectTable', function() {
  return $._ProxiedObjectTable$();
}, function() { return $._proxiedObjectTable; });
Isolate.$lazy($, 'quoteRegExp', 'quoteRegExp', 'get$quoteRegExp', function() {
  return $.JSSyntaxRegExp$("[-[\\]{}()*+?.,\\\\^$|#\\s]", false, false);
}, function() { return $.quoteRegExp; });
Isolate.$lazy($, '_map', '_FunctionProxy__map', 'get$_FunctionProxy__map', function() {
  return $.Map_Map($.Function, $._FunctionProxy);
}, function() { return $._FunctionProxy__map; });
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''];
  var fields_array = fields ? fields.split(',') : [];
  for (var i = 0; i < fields_array.length; i++) {
    $.$generateAccessor(fields_array[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method) {        if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table) {
    $.defineProperty(Object.prototype, key, table[key]);
  }
})({
 get$hashCode: function() { return $.hashCodeForNativeObject(this); },
 is$JavaScriptIndexingBehavior: function() { return false; },
 is$List: function() { return false; },
 is$File: function() { return false; },
 is$KeyRange: function() { return false; },
 is$Blob: function() { return false; },
 is$ImageData: function() { return false; },
 is$Collection: function() { return false; },
 is$ArrayBufferView: function() { return false; },
 is$Map: function() { return false; },
 is$ArrayBuffer: function() { return false; },
 is$FileList: function() { return false; },
 toString$0: function() { return $.toStringForNativeObject(this); },
 is$Element: function() { return false; }
});

$.$defineNativeClass('AbstractWorker', {
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
    return $.AbstractWorkerEvents$(this);
  } else {
    return Object.prototype.get$on.call(this);
  }
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLAnchorElement', {
 get$name: function() { return this.name; },
 set$type: function(v) { this.type = v; },
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('WebKitAnimation', {
 get$name: function() { return this.name; }
});

$.$defineNativeClass('HTMLAppletElement', {
 get$name: function() { return this.name; }
});

$.$defineNativeClass('DOMApplicationCache', {
 get$on: function() {
  return $.ApplicationCacheEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('ArrayBuffer', {
 is$ArrayBuffer: function() { return true; }
});

$.$defineNativeClass('ArrayBufferView', {
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Attr', {
 get$name: function() { return this.name; },
 get$value: function() { return this.value; },
 set$value: function(v) { this.value = v; }
});

$.$defineNativeClass('HTMLBRElement', {
 clear$0: function() {
  return this.clear.call$0();
}
});

$.$defineNativeClass('BatteryManager', {
 get$level: function() { return this.level; },
 get$on: function() {
  return $.BatteryManagerEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('Blob', {
 is$Blob: function() { return true; }
});

$.$defineNativeClass('HTMLBodyElement', {
 get$on: function() {
  return $.BodyElementEvents$(this);
}
});

$.$defineNativeClass('HTMLButtonElement', {
 get$name: function() { return this.name; },
 set$type: function(v) { this.type = v; },
 get$value: function() { return this.value; },
 set$value: function(v) { this.value = v; }
});

$.$defineNativeClass('CharacterData', {
 get$data: function() { return this.data; },
 get$length: function() { return this.length; },
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('CompositionEvent', {
 get$data: function() { return this.data; }
});

$.$defineNativeClass('WebKitCSSKeyframesRule', {
 get$name: function() { return this.name; }
});

$.$defineNativeClass('WebKitCSSMatrix', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('CSSStyleDeclaration', {
 get$length: function() { return this.length; },
 _getPropertyValue$1: function(propertyName) {
  return this.getPropertyValue(propertyName);
},
 getPropertyValue$1: function(propertyName) {
  var propValue = this._getPropertyValue$1(propertyName);
  return !(propValue == null) ? propValue : "";
},
 get$clear: function() {
  return this.getPropertyValue$1("clear");
},
 clear$0: function() {
  return this.get$clear().call$0();
},
 get$filter: function() {
  return this.getPropertyValue$1($.S($._browserPrefix()) + "filter");
},
 filter$1: function(arg0) {
  return this.get$filter().call$1(arg0);
}
});

$.$defineNativeClass('CustomEvent', {
 get$detail: function() { return this.detail; },
 $$dom_initCustomEvent$4: function(typeArg, canBubbleArg, cancelableArg, detailArg) {
  return this.initCustomEvent(typeArg,canBubbleArg,cancelableArg,detailArg);
}
});

$.$defineNativeClass('DataTransferItemList', {
 get$length: function() { return this.length; },
 add$2: function(data_OR_file, type) {
  return this.add(data_OR_file,type);
},
 add$1: function(data_OR_file) {
  return this.add(data_OR_file);
},
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('DedicatedWorkerContext', {
 get$on: function() {
  return $.DedicatedWorkerContextEvents$(this);
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($.convertDartToNative_SerializedScriptValue(message), messagePorts);
    return;
  }
  this._postMessage_2$1($.convertDartToNative_SerializedScriptValue(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message, $);
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
}
});

$.$defineNativeClass('HTMLDetailsElement', {
 open$3: function(arg0, arg1, arg2) {
  return this.open.call$3(arg0, arg1, arg2);
}
});

$.$defineNativeClass('Document', {
 get$$$dom_body: function() { return this.body; },
 get$documentElement: function() { return this.documentElement; },
 get$on: function() {
  return $.DocumentEvents$(this);
},
 $$dom_createElement$1: function(tagName) {
  return this.createElement(tagName);
},
 $$dom_createEvent$1: function(eventType) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$$dom_createEvent$1')) {
    return this.createEvent(eventType);
  } else {
    return Object.prototype.$$dom_createEvent$1.call(this, eventType);
  }
},
 $$dom_getElementById$1: function(elementId) {
  return this.getElementById(elementId);
},
 $$dom_getElementsByName$1: function(elementName) {
  return this.getElementsByName(elementName);
},
 $$dom_getElementsByTagName$1: function(tagname) {
  return this.getElementsByTagName(tagname);
},
 $$dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 $$dom_querySelectorAll$1: function(selectors) {
  return this.querySelectorAll(selectors);
},
 query$1: function(selectors) {
  if ($.RegExp_RegExp("^#[_a-zA-Z]\\w*$", false, false).hasMatch$1(selectors) === true)
    return this.$$dom_getElementById$1($.CONSTANT0.substring$1(selectors, 1));
  return this.$$dom_querySelector$1(selectors);
},
 queryAll$1: function(selectors) {
  var mutableMatches, t2, len, copyOfMatches, t1, i, t3;
  if ($.RegExp_RegExp("^\\[name=[\"'][^'\"]+['\"]\\]$", false, false).hasMatch$1(selectors) === true) {
    mutableMatches = this.$$dom_getElementsByName$1($.CONSTANT0.substring$2(selectors, 7, selectors.length - 2));
    if (typeof mutableMatches !== 'string' && (typeof mutableMatches !== 'object' || mutableMatches === null || mutableMatches.constructor !== Array && !mutableMatches.is$JavaScriptIndexingBehavior()))
      return this.queryAll$1$bailout(1, mutableMatches);
    t2 = $.getInterceptor$JSStringJSArray(mutableMatches);
    len = mutableMatches.length;
    copyOfMatches = $.List_List(len, $.Element);
    $.setRuntimeTypeInfo(copyOfMatches, [$.Element]);
    for (t1 = mutableMatches.length, t2 = copyOfMatches.length, i = 0; i < len; ++i) {
      if (i >= t1)
        throw $.ioore(i);
      t3 = mutableMatches[i];
      if (i >= t2)
        throw $.ioore(i);
      copyOfMatches[i] = t3;
    }
    return $._FrozenElementList$_wrap(copyOfMatches);
  } else if ($.RegExp_RegExp("^[*a-zA-Z0-9]+$", false, false).hasMatch$1(selectors) === true) {
    mutableMatches = this.$$dom_getElementsByTagName$1(selectors);
    if (typeof mutableMatches !== 'string' && (typeof mutableMatches !== 'object' || mutableMatches === null || mutableMatches.constructor !== Array && !mutableMatches.is$JavaScriptIndexingBehavior()))
      return this.queryAll$1$bailout(3, mutableMatches);
    t2 = $.getInterceptor$JSStringJSArray(mutableMatches);
    len = mutableMatches.length;
    copyOfMatches = $.List_List(len, $.Element);
    $.setRuntimeTypeInfo(copyOfMatches, [$.Element]);
    for (t1 = mutableMatches.length, t2 = copyOfMatches.length, i = 0; i < len; ++i) {
      if (i >= t1)
        throw $.ioore(i);
      t3 = mutableMatches[i];
      if (i >= t2)
        throw $.ioore(i);
      copyOfMatches[i] = t3;
    }
    return $._FrozenElementList$_wrap(copyOfMatches);
  } else
    return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
},
 queryAll$1$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      mutableMatches = env0;
      break;
    case 2:
      len = env2;
      t2 = env1;
      mutableMatches = env0;
      break;
    case 3:
      mutableMatches = env0;
      break;
    case 4:
      len = env2;
      t2 = env1;
      mutableMatches = env0;
      break;
  }
  switch (state0) {
    case 0:
    default:
      var mutableMatches, t2, len, copyOfMatches, i, t1;
      if (state0 === 2 || state0 === 1 || state0 === 0 && $.RegExp_RegExp("^\\[name=[\"'][^'\"]+['\"]\\]$", false, false).hasMatch$1(selectors) === true)
        switch (state0) {
          case 0:
            mutableMatches = this.$$dom_getElementsByName$1($.CONSTANT0.substring$2(selectors, 7, selectors.length - 2));
          case 1:
            state0 = 0;
            t2 = $.getInterceptor$JSStringJSArray(mutableMatches);
            len = t2.get$length(mutableMatches);
          case 2:
            state0 = 0;
            copyOfMatches = $.List_List(len, $.Element);
            $.setRuntimeTypeInfo(copyOfMatches, [$.Element]);
            for (i = 0; $.ltB(i, len); ++i) {
              t1 = t2.operator$index$1(mutableMatches, i);
              if (i >= copyOfMatches.length)
                throw $.ioore(i);
              copyOfMatches[i] = t1;
            }
            return $._FrozenElementList$_wrap(copyOfMatches);
        }
      else
        switch (state0) {
          case 0:
          default:
            if (state0 === 4 || state0 === 3 || state0 === 0 && $.RegExp_RegExp("^[*a-zA-Z0-9]+$", false, false).hasMatch$1(selectors) === true)
              switch (state0) {
                case 0:
                  mutableMatches = this.$$dom_getElementsByTagName$1(selectors);
                case 3:
                  state0 = 0;
                  t2 = $.getInterceptor$JSStringJSArray(mutableMatches);
                  len = t2.get$length(mutableMatches);
                case 4:
                  state0 = 0;
                  copyOfMatches = $.List_List(len, $.Element);
                  $.setRuntimeTypeInfo(copyOfMatches, [$.Element]);
                  for (i = 0; $.ltB(i, len); ++i) {
                    t1 = t2.operator$index$1(mutableMatches, i);
                    if (i >= copyOfMatches.length)
                      throw $.ioore(i);
                    copyOfMatches[i] = t1;
                  }
                  return $._FrozenElementList$_wrap(copyOfMatches);
              }
            else
              return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
        }
  }
}
});

$.$defineNativeClass('DocumentFragment', {
 get$elements: function() {
  return this.get$children();
},
 get$children: function() {
  if (this._children == null)
    this._children = $.FilteredElementList$(this);
  return this._children;
},
 query$1: function(selectors) {
  return this.$$dom_querySelector$1(selectors);
},
 queryAll$1: function(selectors) {
  return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
},
 set$innerHtml: function(value) {
  if (Object.getPrototypeOf(this).hasOwnProperty('set$innerHtml')) {
    var t1, e, nodes;
    t1 = this.get$nodes();
    $.getInterceptor$JSArray(t1).clear$0(t1);
    e = $.Element_Element$tag("div");
    e.set$innerHtml(value);
    nodes = $.List_List$from(e.get$nodes());
    $.setRuntimeTypeInfo(nodes, []);
    t1 = this.get$nodes();
    $.getInterceptor$JSArray(t1).addAll$1(t1, nodes);
  } else {
    return Object.prototype.set$innerHtml.call(this, value);
  }
},
 append$1: function(element) {
  var t1 = this.get$children();
  $.getInterceptor$JSArray(t1).add$1(t1, element);
},
 get$id: function() {
  return "";
},
 get$parent: function() {
  return;
},
 get$attributes: function() {
  return $.CONSTANT6;
},
 click$0: function() {
},
 get$click: function() {
  return new $.BoundClosure(this, 'click$0');
},
 set$scrollTop: function(value) {
  throw $.$$throw($.UnsupportedError$("Document fragments don't support scrolling."));
},
 get$on: function() {
  return $.ElementEvents$(this);
},
 $$dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 $$dom_querySelectorAll$1: function(selectors) {
  return this.querySelectorAll(selectors);
}
});

$.$defineNativeClass('DocumentType', {
 get$name: function() { return this.name; },
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('DOMError', {
 get$name: function() { return this.name; }
});

$.$defineNativeClass('DOMException', {
 get$message: function() { return this.message; },
 get$name: function() { return this.name; },
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('MimeTypeArray', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.DomMimeType);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Plugin', {
 get$length: function() { return this.length; },
 get$name: function() { return this.name; }
});

$.$defineNativeClass('PluginArray', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.DomPlugin);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Selection', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMSettableTokenList', {
 get$value: function() { return this.value; },
 set$value: function(v) { this.value = v; }
});

$.$defineNativeClass('DOMStringList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.String);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 contains$1: function(string) {
  return this.contains(string);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('DOMTokenList', {
 get$length: function() { return this.length; },
 contains$1: function(token) {
  return this.contains(token);
},
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('Element', {
 get$$$dom_children: function() { return this.children; },
 get$id: function() { return this.id; },
 set$innerHtml: function(v) { this.innerHTML = v; },
 get$$$dom_firstElementChild: function() { return this.firstElementChild; },
 get$$$dom_lastElementChild: function() { return this.lastElementChild; },
 get$scrollHeight: function() { return this.scrollHeight; },
 set$scrollTop: function(v) { this.scrollTop = v; },
 get$attributes: function() {
  return $._ElementAttributeMap$(this);
},
 set$innerHTML: function(value) {
  this.set$innerHtml(value);
},
 get$elements: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$elements')) {
    return this.get$children();
  } else {
    return Object.prototype.get$elements.call(this);
  }
},
 get$children: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$children')) {
    return $._ChildrenElementList$_wrap(this);
  } else {
    return Object.prototype.get$children.call(this);
  }
},
 set$children: function(value) {
  if (Object.getPrototypeOf(this).hasOwnProperty('set$children')) {
    var copy, children, t1;
    copy = $.List_List$from(value);
    $.setRuntimeTypeInfo(copy, []);
    children = this.get$children();
    t1 = $.getInterceptor$JSArray(children);
    t1.clear$0(children);
    t1.addAll$1(children, copy);
  } else {
    return Object.prototype.set$children.call(this, value);
  }
},
 query$1: function(selectors) {
  return this.$$dom_querySelector$1(selectors);
},
 queryAll$1: function(selectors) {
  return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
},
 append$1: function(e) {
  var t1 = this.get$children();
  $.getInterceptor$JSArray(t1).add$1(t1, e);
},
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
    return $.ElementEvents$(this);
  } else {
    return Object.prototype.get$on.call(this);
  }
},
 click$0: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('click$0')) {
    return this.click();
  } else {
    return Object.prototype.click$0.call(this);
  }
},
 get$click: function() {
  return new $.BoundClosure(this, 'click$0');
},
 $$dom_getAttribute$1: function(name) {
  return this.getAttribute(name);
},
 $$dom_hasAttribute$1: function(name) {
  return this.hasAttribute(name);
},
 $$dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 $$dom_querySelectorAll$1: function(selectors) {
  return this.querySelectorAll(selectors);
},
 $$dom_removeAttribute$1: function(name) {
  return this.removeAttribute(name);
},
 $$dom_setAttribute$2: function(name, value) {
  return this.setAttribute(name,value);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLEmbedElement', {
 get$name: function() { return this.name; },
 set$type: function(v) { this.type = v; }
});

$.$defineNativeClass('Entry', {
 get$name: function() { return this.name; },
 remove$2: function(successCallback, errorCallback) {
  return this.remove($.convertDartClosureToJS(successCallback, 0),$.convertDartClosureToJS(errorCallback, 1));
},
 remove$1: function(successCallback) {
  successCallback = $.convertDartClosureToJS(successCallback, 0);
  return this.remove(successCallback);
}
});

$.$defineNativeClass('EntrySync', {
 get$name: function() { return this.name; },
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('ErrorEvent', {
 get$message: function() { return this.message; }
});

$.$defineNativeClass('EventException', {
 get$message: function() { return this.message; },
 get$name: function() { return this.name; },
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('EventSource', {
 get$on: function() {
  return $.EventSourceEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('EventTarget', {
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
    return $.Events$(this);
  } else {
    return Object.prototype.get$on.call(this);
  }
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$$dom_addEventListener$3')) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  } else {
    return Object.prototype.$$dom_addEventListener$3.call(this, type, listener, useCapture);
  }
},
 $$dom_dispatchEvent$1: function(event) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$$dom_dispatchEvent$1')) {
    return this.dispatchEvent(event);
  } else {
    return Object.prototype.$$dom_dispatchEvent$1.call(this, event);
  }
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$$dom_removeEventListener$3')) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  } else {
    return Object.prototype.$$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }
}
});

$.$defineNativeClass('HTMLFieldSetElement', {
 get$elements: function() { return this.elements; },
 get$name: function() { return this.name; }
});

$.$defineNativeClass('File', {
 get$name: function() { return this.name; },
 is$File: function() { return true; }
});

$.$defineNativeClass('FileException', {
 get$message: function() { return this.message; },
 get$name: function() { return this.name; },
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('FileList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.File);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$FileList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('FileReader', {
 get$on: function() {
  return $.FileReaderEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('DOMFileSystem', {
 get$name: function() { return this.name; }
});

$.$defineNativeClass('DOMFileSystemSync', {
 get$name: function() { return this.name; }
});

$.$defineNativeClass('FileWriter', {
 get$length: function() { return this.length; },
 get$on: function() {
  return $.FileWriterEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 write$1: function(data) {
  return this.write(data);
}
});

$.$defineNativeClass('FileWriterSync', {
 get$length: function() { return this.length; },
 write$1: function(data) {
  return this.write(data);
}
});

$.$defineNativeClass('Float32Array', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.num);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Float64Array', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.num);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLFormElement', {
 get$length: function() { return this.length; },
 get$name: function() { return this.name; },
 reset$0: function() {
  return this.reset();
}
});

$.$defineNativeClass('HTMLFrameElement', {
 get$name: function() { return this.name; }
});

$.$defineNativeClass('HTMLFrameSetElement', {
 get$on: function() {
  return $.FrameSetElementEvents$(this);
}
});

$.$defineNativeClass('Gamepad', {
 get$id: function() { return this.id; }
});

$.$defineNativeClass('HTMLAllCollection', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.Node);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLCollection', {
 get$length: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$length')) {
    return this.length;
  } else {
    return Object.prototype.get$length.call(this);
  }
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.Node);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  if (Object.getPrototypeOf(this).hasOwnProperty('set$length')) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  } else {
    return Object.prototype.set$length.call(this, value);
  }
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLDocument', {
 get$body: function() {
  return $.document().get$$$dom_body();
}
});

$.$defineNativeClass('HTMLOptionsCollection', {
 get$length: function() {
  return this.length;
},
 set$length: function(value) {
  this.length = value;
},
 remove$1: function(index) {
  return this.remove(index);
}
});

$.$defineNativeClass('XMLHttpRequest', {
 get$on: function() {
  return $.HttpRequestEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 open$5: function(method, url, async, user, password) {
  return this.open(method,url,async,user,password);
},
 open$3: function(method, url, async) {
  return this.open(method, url, async);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('XMLHttpRequestException', {
 get$message: function() { return this.message; },
 get$name: function() { return this.name; },
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XMLHttpRequestUpload', {
 get$on: function() {
  return $.HttpRequestUploadEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLIFrameElement', {
 get$name: function() { return this.name; }
});

$.$defineNativeClass('ImageData', {
 get$data: function() { return this.data; },
 is$ImageData: function() { return true; }
});

$.$defineNativeClass('HTMLImageElement', {
 get$name: function() { return this.name; },
 complete$1: function(arg0) {
  return this.complete.call$1(arg0);
}
});

$.$defineNativeClass('HTMLInputElement', {
 get$name: function() { return this.name; },
 get$pattern: function() { return this.pattern; },
 set$type: function(v) { this.type = v; },
 get$value: function() { return this.value; },
 set$value: function(v) { this.value = v; },
 get$on: function() {
  return $.InputElementEvents$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('Int16Array', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.$int);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Int32Array', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.$int);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Int8Array', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.$int);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLKeygenElement', {
 get$name: function() { return this.name; }
});

$.$defineNativeClass('HTMLLIElement', {
 set$type: function(v) { this.type = v; },
 get$value: function() { return this.value; },
 set$value: function(v) { this.value = v; }
});

$.$defineNativeClass('HTMLLinkElement', {
 set$type: function(v) { this.type = v; }
});

$.$defineNativeClass('History', {
 get$length: function() { return this.length; }
});

$.$defineNativeClass('Location', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMWindow', {
 get$name: function() { return this.name; },
 get$navigator: function() { return this.navigator; },
 get$document: function() {
  return this.document;
},
 open$3: function(url, name$, options) {
  if (options == null)
    return $._DOMWindowCrossFrame__createSafe(this.open(url,name$));
  else
    return $._DOMWindowCrossFrame__createSafe(this.open(url,name$,options));
},
 lookupPort$1: function(name$) {
  var t1, port;
  t1 = this.get$document().get$documentElement().get$attributes();
  port = $.JSON_parse($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "dart-port:" + name$));
  return $._JsDeserializer$().deserialize$1(port);
},
 registerPort$2: function(name$, port) {
  var serialized = $._JsSerializer$().traverse$1(port);
  $.indexSet(this.get$document().get$documentElement().get$attributes(), "dart-port:" + name$, $.JSON_stringify(serialized));
},
 get$on: function() {
  return $.LocalWindowEvents$(this);
},
 get$parent: function() {
  return $._convertNativeToDart_Window(this.parent);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 _postMessage_1$2: function(message, targetOrigin) {
  return this.postMessage(message,targetOrigin);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
}
});

$.$defineNativeClass('HTMLMapElement', {
 get$name: function() { return this.name; }
});

$.$defineNativeClass('MediaController', {
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLMediaElement', {
 get$on: function() {
  return $.MediaElementEvents$(this);
}
});

$.$defineNativeClass('MediaKeyEvent', {
 get$message: function() { return this.message; }
});

$.$defineNativeClass('MediaList', {
 get$length: function() { return this.length; }
});

$.$defineNativeClass('MediaSource', {
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStream', {
 get$on: function() {
  return $.MediaStreamEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStreamTrack', {
 get$on: function() {
  return $.MediaStreamTrackEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStreamTrackList', {
 get$length: function() { return this.length; },
 get$on: function() {
  return $.MediaStreamTrackListEvents$(this);
},
 add$1: function(track) {
  return this.add(track);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 remove$1: function(track) {
  return this.remove(track);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MessageEvent', {
 get$ports: function() { return this.ports; },
 get$data: function() {
  return $.convertNativeToDart_SerializedScriptValue(this.data);
}
});

$.$defineNativeClass('MessagePort', {
 get$on: function() {
  return $.MessagePortEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($.convertDartToNative_SerializedScriptValue(message), messagePorts);
    return;
  }
  this._postMessage_2$1($.convertDartToNative_SerializedScriptValue(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message, $);
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLMetaElement', {
 get$name: function() { return this.name; }
});

$.$defineNativeClass('HTMLMeterElement', {
 get$value: function() { return this.value; },
 set$value: function(v) { this.value = v; }
});

$.$defineNativeClass('NamedNodeMap', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.Node);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Navigator', {
 get$userAgent: function() { return this.userAgent; }
});

$.$defineNativeClass('Node', {
 get$$$dom_attributes: function() { return this.attributes; },
 get$$$dom_childNodes: function() { return this.childNodes; },
 get$$$dom_localName: function() { return this.localName; },
 get$$$dom_namespaceUri: function() { return this.namespaceURI; },
 get$parent: function() { return this.parentElement; },
 set$text: function(v) { this.textContent = v; },
 get$nodes: function() {
  return $._ChildNodeListLazy$(this);
},
 remove$0: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('remove$0')) {
    var t1 = this.parentNode;
    if (!(t1 == null))
      t1.$$dom_removeChild$1(this);
  } else {
    return Object.prototype.remove$0.call(this);
  }
},
 replaceWith$1: function(otherNode, exception) {
  var parent$;
  try {
    parent$ = this.parentNode;
    parent$.$$dom_replaceChild$2(otherNode, this);
  } catch (exception) {
    $.unwrapException(exception);
  }

  return this;
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_appendChild$1: function(newChild) {
  return this.appendChild(newChild);
},
 contains$1: function(other) {
  return this.contains(other);
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $$dom_removeChild$1: function(oldChild) {
  return this.removeChild(oldChild);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_replaceChild$2: function(newChild, oldChild) {
  return this.replaceChild(newChild,oldChild);
}
});

$.$defineNativeClass('NodeIterator', {
 filter$1: function(arg0) {
  return this.filter.call$1(arg0);
}
});

$.$defineNativeClass('NodeList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.Node);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Notification', {
 get$on: function() {
  return $.NotificationEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLOListElement', {
 set$type: function(v) { this.type = v; }
});

$.$defineNativeClass('HTMLObjectElement', {
 get$data: function() { return this.data; },
 get$name: function() { return this.name; },
 set$type: function(v) { this.type = v; }
});

$.$defineNativeClass('HTMLOptionElement', {
 get$value: function() { return this.value; },
 set$value: function(v) { this.value = v; }
});

$.$defineNativeClass('HTMLOutputElement', {
 get$name: function() { return this.name; },
 get$value: function() { return this.value; },
 set$value: function(v) { this.value = v; }
});

$.$defineNativeClass('HTMLParamElement', {
 get$name: function() { return this.name; },
 set$type: function(v) { this.type = v; },
 get$value: function() { return this.value; },
 set$value: function(v) { this.value = v; }
});

$.$defineNativeClass('PeerConnection00', {
 get$on: function() {
  return $.PeerConnection00Events$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('PositionError', {
 get$message: function() { return this.message; }
});

$.$defineNativeClass('ProcessingInstruction', {
 get$data: function() { return this.data; }
});

$.$defineNativeClass('HTMLProgressElement', {
 get$value: function() { return this.value; },
 set$value: function(v) { this.value = v; }
});

$.$defineNativeClass('RadioNodeList', {
 get$value: function() { return this.value; },
 set$value: function(v) { this.value = v; }
});

$.$defineNativeClass('Range', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('RangeException', {
 get$message: function() { return this.message; },
 get$name: function() { return this.name; },
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('RTCDataChannel', {
 get$on: function() {
  return $.RtcDataChannelEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('RTCPeerConnection', {
 get$on: function() {
  return $.RtcPeerConnectionEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('RTCSessionDescription', {
 set$type: function(v) { this.type = v; }
});

$.$defineNativeClass('HTMLScriptElement', {
 set$type: function(v) { this.type = v; }
});

$.$defineNativeClass('ScriptProfileNode', {
 children$0: function() {
  return this.children();
},
 get$children: function() {
  return new $.BoundClosure(this, 'children$0');
}
});

$.$defineNativeClass('HTMLSelectElement', {
 get$length: function() { return this.length; },
 set$length: function(v) { this.length = v; },
 get$name: function() { return this.name; },
 get$value: function() { return this.value; },
 set$value: function(v) { this.value = v; }
});

$.$defineNativeClass('ShadowRoot', {
 set$innerHtml: function(v) { this.innerHTML = v; }
});

$.$defineNativeClass('SharedWorkerContext', {
 get$name: function() { return this.name; },
 get$on: function() {
  return $.SharedWorkerContextEvents$(this);
}
});

$.$defineNativeClass('SourceBuffer', {
 append$1: function(data) {
  return this.append(data);
}
});

$.$defineNativeClass('SourceBufferList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.SourceBuffer);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLSourceElement', {
 set$type: function(v) { this.type = v; }
});

$.$defineNativeClass('SpeechGrammarList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.SpeechGrammar);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechRecognition', {
 get$on: function() {
  return $.SpeechRecognitionEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('SpeechRecognitionError', {
 get$message: function() { return this.message; }
});

$.$defineNativeClass('SpeechRecognitionResult', {
 get$length: function() { return this.length; }
});

$.$defineNativeClass('SQLError', {
 get$message: function() { return this.message; }
});

$.$defineNativeClass('SQLException', {
 get$message: function() { return this.message; }
});

$.$defineNativeClass('SQLResultSetRowList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.Map);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Storage', {
 containsKey$1: function(key) {
  return !(this.$$dom_getItem$1(key) == null);
},
 operator$index$1: function(key) {
  return this.$$dom_getItem$1(key);
},
 operator$indexSet$2: function(key, value) {
  this.$$dom_setItem$2(key, value);
},
 remove$1: function(key) {
  var value = this.operator$index$1(key);
  this.$$dom_removeItem$1(key);
  return value;
},
 clear$0: function() {
  return this.$$dom_clear$0();
},
 forEach$1: function(f) {
  var i, key;
  for (i = 0; true; ++i) {
    key = this.$$dom_key$1(i);
    if (key == null)
      return;
    f.call$2(key, this.operator$index$1(key));
  }
},
 get$keys: function() {
  var keys = [];
  this.forEach$1(new $.Storage_keys_anon(keys));
  return keys;
},
 get$values: function() {
  var values = [];
  this.forEach$1(new $.Storage_values_anon(values));
  return values;
},
 get$length: function() {
  return this.length;
},
 get$isEmpty: function() {
  return this.$$dom_key$1(0) == null;
},
 $$dom_clear$0: function() {
  return this.clear();
},
 $$dom_getItem$1: function(key) {
  return this.getItem(key);
},
 $$dom_key$1: function(index) {
  return this.key(index);
},
 $$dom_removeItem$1: function(key) {
  return this.removeItem(key);
},
 $$dom_setItem$2: function(key, data) {
  return this.setItem(key,data);
},
 is$Map: function() { return true; }
});

$.$defineNativeClass('StorageEvent', {
 get$key: function() { return this.key; }
});

$.$defineNativeClass('HTMLStyleElement', {
 set$type: function(v) { this.type = v; }
});

$.$defineNativeClass('HTMLTextAreaElement', {
 get$name: function() { return this.name; },
 get$value: function() { return this.value; },
 set$value: function(v) { this.value = v; }
});

$.$defineNativeClass('TextEvent', {
 get$data: function() { return this.data; }
});

$.$defineNativeClass('TextTrack', {
 get$on: function() {
  return $.TextTrackEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('TextTrackCue', {
 get$id: function() { return this.id; },
 set$text: function(v) { this.text = v; },
 get$on: function() {
  return $.TextTrackCueEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('TextTrackCueList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.TextTrackCue);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('TextTrackList', {
 get$on: function() {
  return $.TextTrackListEvents$(this);
},
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.TextTrack);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('TimeRanges', {
 get$length: function() { return this.length; }
});

$.$defineNativeClass('TouchList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.Touch);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('TreeWalker', {
 filter$1: function(arg0) {
  return this.filter.call$1(arg0);
}
});

$.$defineNativeClass('UIEvent', {
 get$detail: function() { return this.detail; }
});

$.$defineNativeClass('HTMLUListElement', {
 set$type: function(v) { this.type = v; }
});

$.$defineNativeClass('Uint16Array', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.$int);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Uint32Array', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.$int);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Uint8Array', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.$int);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('WebGLActiveInfo', {
 get$name: function() { return this.name; }
});

$.$defineNativeClass('WebKitNamedFlow', {
 get$name: function() { return this.name; },
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('WebSocket', {
 get$on: function() {
  return $.WebSocketEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$2: function(code, reason) {
  return this.close(code,reason);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('Worker', {
 get$on: function() {
  return $.WorkerEvents$(this);
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($.convertDartToNative_SerializedScriptValue(message), messagePorts);
    return;
  }
  this._postMessage_2$1($.convertDartToNative_SerializedScriptValue(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message, $);
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
}
});

$.$defineNativeClass('WorkerContext', {
 get$navigator: function() { return this.navigator; },
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
    return $.WorkerContextEvents$(this);
  } else {
    return Object.prototype.get$on.call(this);
  }
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
}
});

$.$defineNativeClass('WorkerLocation', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('WorkerNavigator', {
 get$userAgent: function() { return this.userAgent; }
});

$.$defineNativeClass('XPathException', {
 get$message: function() { return this.message; },
 get$name: function() { return this.name; },
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XSLTProcessor', {
 reset$0: function() {
  return this.reset();
}
});

$.$defineNativeClass('ClientRectList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.ClientRect);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('CSSRuleList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.CssRule);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('CSSValueList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.CssValue);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('EntryArray', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.Entry);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('EntryArraySync', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.EntrySync);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('GamepadList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.Gamepad);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('MediaStreamList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.MediaStream);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechInputResultList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.SpeechInputResult);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechRecognitionResultList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.SpeechRecognitionResult);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('StyleSheetList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.StyleSheet);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('WebKitAnimationList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.Animation);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('IDBCursor', {
 get$key: function() { return this.key; }
});

$.$defineNativeClass('IDBCursorWithValue', {
 get$value: function() { return this.value; }
});

$.$defineNativeClass('IDBDatabase', {
 get$name: function() { return this.name; },
 get$on: function() {
  return $.DatabaseEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBDatabaseException', {
 get$message: function() { return this.message; },
 get$name: function() { return this.name; },
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('IDBIndex', {
 get$name: function() { return this.name; },
 get$1: function(key) {
  var t1, t2;
  t1 = $ === key;
  if (t1)
    key = null;
  t1 = !t1;
  if (t1)
    t2 = typeof key === 'object' && key !== null && key.is$KeyRange() || key == null;
  else
    t2 = false;
  if (t2)
    return this._get_1$1(key);
  if (t1)
    return this._get_2$1(key);
  throw $.$$throw($.ArgumentError$("Incorrect number or type of arguments"));
},
 _get_1$1: function(key) {
  return this.get(key);
},
 _get_2$1: function(key) {
  return this.get(key);
}
});

$.$defineNativeClass('IDBKeyRange', {
 is$KeyRange: function() { return true; }
});

$.$defineNativeClass('IDBObjectStore', {
 get$name: function() { return this.name; },
 add$2: function(value, key) {
  var t1 = $ === key;
  if (t1)
    key = null;
  if (!t1)
    return this._add_1$2($.convertDartToNative_SerializedScriptValue(value), key);
  return this._add_2$1($.convertDartToNative_SerializedScriptValue(value));
},
 add$1: function(value) {
  return this.add$2(value, $);
},
 _add_1$2: function(value, key) {
  return this.add(value,key);
},
 _add_2$1: function(value) {
  return this.add(value);
},
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('IDBOpenDBRequest', {
 get$on: function() {
  return $.OpenDBRequestEvents$(this);
}
});

$.$defineNativeClass('IDBRequest', {
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
    return $.RequestEvents$(this);
  } else {
    return Object.prototype.get$on.call(this);
  }
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBTransaction', {
 get$on: function() {
  return $.TransactionEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBVersionChangeRequest', {
 get$on: function() {
  return $.VersionChangeRequestEvents$(this);
}
});

$.$defineNativeClass('SVGAngle', {
 get$value: function() { return this.value; },
 set$value: function(v) { this.value = v; }
});

$.$defineNativeClass('SVGElementInstance', {
 get$on: function() {
  return $.ElementInstanceEvents$(this);
}
});

$.$defineNativeClass('SVGLength', {
 get$value: function() { return this.value; },
 set$value: function(v) { this.value = v; }
});

$.$defineNativeClass('SVGLengthList', {
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.Length);
},
 get$length: function() {
  return this.numberOfItems;
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGNumber', {
 get$value: function() { return this.value; },
 set$value: function(v) { this.value = v; }
});

$.$defineNativeClass('SVGNumberList', {
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.Number);
},
 get$length: function() {
  return this.numberOfItems;
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGPathSegList', {
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.PathSeg);
},
 get$length: function() {
  return this.numberOfItems;
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGPointList', {
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('SVGScriptElement', {
 set$type: function(v) { this.type = v; }
});

$.$defineNativeClass('SVGStringList', {
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.String);
},
 get$length: function() {
  return this.numberOfItems;
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGStyleElement', {
 set$type: function(v) { this.type = v; }
});

$.$defineNativeClass('SVGDocument', {
 $$dom_createEvent$1: function(eventType) {
  return this.createEvent(eventType);
}
});

$.$defineNativeClass('SVGElement', {
 get$elements: function() {
  return $.FilteredElementList$(this);
},
 get$children: function() {
  return $.FilteredElementList$(this);
},
 set$children: function(value) {
  var children, t1;
  children = this.get$children();
  t1 = $.getInterceptor$JSArray(children);
  t1.clear$0(children);
  t1.addAll$1(children, value);
},
 set$innerHtml: function(svg) {
  var container, t1;
  container = $.Element_Element$tag("div");
  container.set$innerHtml("<svg version=\"1.1\">" + $.S(svg) + "</svg>");
  t1 = container.get$children();
  this.set$children($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, 0).get$children());
},
 get$$$dom_children: function() {
  throw $.$$throw($.UnsupportedError$("Cannot get dom_children on SVG."));
},
 click$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot invoke click SVG."));
},
 get$click: function() {
  return new $.BoundClosure(this, 'click$0');
},
 get$id: function() {
  return this.id;
}
});

$.$defineNativeClass('SVGException', {
 get$message: function() { return this.message; },
 get$name: function() { return this.name; },
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('SVGTransformList', {
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.Transform);
},
 get$length: function() {
  return this.numberOfItems;
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('SVGElementInstanceList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.ElementInstance);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element, null);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('AudioBuffer', {
 get$length: function() { return this.length; }
});

$.$defineNativeClass('AudioContext', {
 get$on: function() {
  return $.AudioContextEvents$(this);
}
});

$.$defineNativeClass('AudioParam', {
 get$name: function() { return this.name; },
 get$value: function() { return this.value; },
 set$value: function(v) { this.value = v; }
});

$.$defineNativeClass('BiquadFilterNode', {
 set$type: function(v) { this.type = v; }
});

$.$defineNativeClass('OscillatorNode', {
 set$type: function(v) { this.type = v; }
});

$.$defineNativeClass('ScriptProcessorNode', {
 get$on: function() {
  return $.ScriptProcessorNodeEvents$(this);
}
});

$.$defineNativeClass('Worker', {
 get$id: function() {
  return this.id;
},
 postMessage$1: function(msg) {
  return this.postMessage(msg);
}
});

$.$defineNativeClass('DOMWindow', {
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0), timeout);
}
});

// 198 dynamic classes.
// 340 classes
// 31 !leaf
(function() {
  var v0_Uint8Array = 'Uint8Array|Uint8ClampedArray', v1_MediaElement = 'HTMLMediaElement|HTMLAudioElement|HTMLVideoElement', v2_SvgElement = 'SVGElement|SVGAElement|SVGAltGlyphDefElement|SVGTextContentElement|SVGTextPositioningElement|SVGAltGlyphElement|SVGTRefElement|SVGTSpanElement|SVGTextElement|SVGTextPathElement|SVGAltGlyphItemElement|SVGAnimationElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGSetElement|SVGCircleElement|SVGClipPathElement|SVGComponentTransferFunctionElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGCursorElement|SVGDefsElement|SVGDescElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFloodElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeElement|SVGFEMergeNodeElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFEPointLightElement|SVGFESpecularLightingElement|SVGFESpotLightElement|SVGFETileElement|SVGFETurbulenceElement|SVGFilterElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement|SVGHKernElement|SVGImageElement|SVGLineElement|SVGMPathElement|SVGMarkerElement|SVGMaskElement|SVGMetadataElement|SVGMissingGlyphElement|SVGPathElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGScriptElement|SVGStopElement|SVGStyleElement|SVGSVGElement|SVGSwitchElement|SVGSymbolElement|SVGTitleElement|SVGUseElement|SVGVKernElement|SVGViewElement', v3_Element = [v1_MediaElement, v2_SvgElement, 'Element|HTMLElement|HTMLAnchorElement|HTMLAppletElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBaseFontElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDirectoryElement|HTMLDivElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMarqueeElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement'].join('|'), v4_CharacterData = 'CharacterData|Text|CDATASection|Comment', v5_Document = 'Document|HTMLDocument|SVGDocument', v6_DocumentFragment = 'DocumentFragment|ShadowRoot', v7_Node = [v3_Element, v4_CharacterData, v5_Document, v6_DocumentFragment, 'Node|Attr|DocumentType|EntityReference|Notation|ProcessingInstruction'].join('|'), v8_AbstractWorker = 'AbstractWorker|SharedWorker|Worker', v9_WorkerContext = 'WorkerContext|DedicatedWorkerContext|SharedWorkerContext', v10_MediaStream = 'MediaStream|LocalMediaStream', v11_Request = 'IDBRequest|IDBOpenDBRequest|IDBVersionChangeRequest';
  $.dynamicSetMetadata([['WorkerContext', v9_WorkerContext], ['CSSValueList', 'CSSValueList|WebKitCSSTransformValue|WebKitCSSFilterValue'], ['IDBCursor', 'IDBCursor|IDBCursorWithValue'], ['IDBRequest', v11_Request], ['AbstractWorker', v8_AbstractWorker], ['Uint8Array', v0_Uint8Array], ['ArrayBufferView', [v0_Uint8Array, 'ArrayBufferView|DataView|Float32Array|Float64Array|Int16Array|Int32Array|Int8Array|Uint16Array|Uint32Array'].join('|')], ['Blob', 'Blob|File'], ['CharacterData', v4_CharacterData], ['Document', v5_Document], ['DocumentFragment', v6_DocumentFragment], ['DOMTokenList', 'DOMTokenList|DOMSettableTokenList'], ['HTMLMediaElement', v1_MediaElement], ['SVGElement', v2_SvgElement], ['Element', v3_Element], ['Entry', 'Entry|DirectoryEntry|FileEntry'], ['EntrySync', 'EntrySync|DirectoryEntrySync|FileEntrySync'], ['Node', v7_Node], ['MediaStream', v10_MediaStream], ['EventTarget', [v7_Node, v8_AbstractWorker, v9_WorkerContext, v10_MediaStream, v11_Request, 'EventTarget|DOMApplicationCache|BatteryManager|EventSource|FileReader|FileWriter|XMLHttpRequest|XMLHttpRequestUpload|DOMWindow|MediaController|MediaSource|MediaStreamTrack|MediaStreamTrackList|MessagePort|Notification|PeerConnection00|Performance|RTCDataChannel|RTCPeerConnection|SourceBufferList|SpeechRecognition|TextTrack|TextTrackCue|TextTrackList|WebKitNamedFlow|WebSocket|IDBDatabase|IDBTransaction|SVGElementInstance|AudioContext'].join('|')], ['HTMLCollection', 'HTMLCollection|HTMLOptionsCollection'], ['AudioParam', 'AudioParam|AudioGain'], ['NodeList', 'NodeList|RadioNodeList'], ['UIEvent', 'UIEvent|CompositionEvent|KeyboardEvent|MouseEvent|WheelEvent|TextEvent|TouchEvent|SVGZoomEvent']]);
})();

var $globalThis = $;
var $globalState;
var $globals;
var $isWorker = false;
var $supportsWorkers = false;
var $thisScriptUrl;
function $static_init(){};

function $initGlobals(context) {
  context.isolateStatics = new Isolate();
}
function $setGlobals(context) {
  $ = context.isolateStatics;
  $globalThis = $;
}
$.main.call$0 = $.main

//
// BEGIN invoke [main].
//
if (typeof document !== 'undefined' && document.readyState !== 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner === 'function') {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === 'function') {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
//
// END invoke [main].
//

function init() {
Isolate.$isolateProperties = {};
function generateAccessor(field, prototype) {
  var len = field.length;
  var lastCharCode = field.charCodeAt(len - 1);
  var needsAccessor = (lastCharCode & 63) >= 60;
  if (needsAccessor) {
    var needsGetter = (lastCharCode & 3) > 0;
    var needsSetter = (lastCharCode & 2) == 0;
    var renaming = (lastCharCode & 64) != 0;
    var accessorName = field = field.substring(0, len - 1);
    if (renaming) {
      var divider = field.indexOf(":");
      accessorName = field.substring(0, divider);
      field = field.substring(divider + 1);
    }
    if (needsGetter) {
      var getterString = "return this." + field + ";";
      prototype["get$" + accessorName] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + accessorName] = new Function("v", setterString);
    }
  }
  return field;
};
Isolate.$isolateProperties.$generateAccessor = generateAccessor;
Isolate.$defineClass = function(cls, constructor, prototype) {
  constructor.prototype = prototype;
  constructor.builtin$cls = cls;
  return constructor;
};
var supportsProto = !!{}.__proto__;
Isolate.$pendingClasses = {};
Isolate.$finishClasses = function(collectedClasses) {
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var cls in collectedClasses) {
    if (hasOwnProperty.call(collectedClasses, cls)) {
      var desc = collectedClasses[cls];
      var fields = desc[''], supr;
      if (typeof fields == 'string') {
        var s = fields.split(';'); supr = s[0];
        fields = s[1] == '' ? [] : s[1].split(',');
      } else {
        supr = desc['super'];
      }
      Isolate.$isolateProperties[cls] = Isolate.$defineClass(cls, fields, desc);
      if (supr) Isolate.$pendingClasses[cls] = supr;
    }
  }
  var pendingClasses = Isolate.$pendingClasses;
  Isolate.$pendingClasses = {};
  var finishedClasses = {};
  function finishClass(cls) {
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (hasOwnProperty.call(finishedClasses, cls)) return;
    finishedClasses[cls] = true;
    var superclass = pendingClasses[cls];
    if (!superclass) return;
    finishClass(superclass);
    var constructor = Isolate.$isolateProperties[cls];
    var superConstructor = Isolate.$isolateProperties[superclass];
    var prototype = constructor.prototype;
    if (supportsProto) {
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
    } else {
      function tmp() {};
      tmp.prototype = superConstructor.prototype;
      var newPrototype = new tmp();
      constructor.prototype = newPrototype;
      newPrototype.constructor = constructor;
      for (var member in prototype) {
        if (!member) continue;          if (hasOwnProperty.call(prototype, member)) {
          newPrototype[member] = prototype[member];
        }
      }
    }
  }
  for (var cls in pendingClasses) finishClass(cls);
};
Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue, getter) {
  var sentinelUndefined = {};
  var sentinelInProgress = {};
  prototype[fieldName] = sentinelUndefined;
  prototype[getterName] = function() {
    var result = $[fieldName];
    try {
      if (result === sentinelUndefined) {
        $[fieldName] = sentinelInProgress;
        try {
          result = $[fieldName] = lazyValue();
        } catch (e) {
          if ($[fieldName] === sentinelInProgress) {
            $[fieldName] = null;
          }
          throw e;
        }
      } else if (result === sentinelInProgress) {
        $.throwCyclicInit(staticName);
      }
      return result;
    } finally {
      $[getterName] = getter;
    }
  };
};
Isolate.$finishIsolateConstructor = function(oldIsolate) {
  var isolateProperties = oldIsolate.$isolateProperties;
  function Isolate() {
    for (var staticName in isolateProperties) {
      if (Object.prototype.hasOwnProperty.call(isolateProperties, staticName)) {
        this[staticName] = isolateProperties[staticName];
      }
    }
    // Use the newly created object as prototype. In Chrome this creates a
    // hidden class for the object and makes sure it is fast to access.
    function ForceEfficientMap() {}
    ForceEfficientMap.prototype = this;
    new ForceEfficientMap;
  }
  Isolate.prototype = oldIsolate.prototype;
  Isolate.prototype.constructor = Isolate;
  Isolate.$isolateProperties = isolateProperties;
  return Isolate;
};
}

//@ sourceMappingURL=chrome_app_serial_example.dart.js.map